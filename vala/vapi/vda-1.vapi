/* vda-1.vapi generated by valac 0.44.3, do not modify. */

[CCode (gir_namespace = "Vda", gir_version = "1")]
namespace Vda {
	[CCode (cheader_filename = "vda.h")]
	public class AffectedRows : GLib.Object, Vda.Result, Vda.SqlAffectedRows {
		public AffectedRows (uint rows);
	}
	[CCode (cheader_filename = "vda.h")]
	public class CommandDelete : GLib.Object, Vda.SqlCommand, Vda.SqlCommandTableRelated, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandParametrized, Vda.SqlCommandDelete {
		public CommandDelete (Vda.Connection cnc);
	}
	[CCode (cheader_filename = "vda.h")]
	public class CommandInsert : Vda.CommandModification, Vda.Stringifiable, Vda.SqlCommandInsert {
		public CommandInsert (Vda.Connection cnc);
	}
	[CCode (cheader_filename = "vda.h")]
	public class CommandModification : GLib.Object, Vda.SqlCommand, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommandParametrized {
		public CommandModification (Vda.Connection cnc);
	}
	[CCode (cheader_filename = "vda.h")]
	public class CommandSelect : GLib.Object, Vda.SqlCommand, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandParametrized, Vda.SqlCommandSelect {
		public CommandSelect (Vda.Connection cnc);
	}
	[CCode (cheader_filename = "vda.h")]
	public class CommandUpdate : Vda.CommandModification, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandUpdate {
		public CommandUpdate (Vda.Connection cnc);
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameter : GLib.Object {
		public ConnectionParameter ();
		public string name { get; set construct; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterDbName : Vda.ConnectionParameter {
		public ConnectionParameterDbName ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterHost : Vda.ConnectionParameter {
		public ConnectionParameterHost ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterPassword : Vda.ConnectionParameter {
		public ConnectionParameterPassword ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterPort : Vda.ConnectionParameter {
		public ConnectionParameterPort ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterUserName : Vda.ConnectionParameter {
		public ConnectionParameterUserName ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameters : Gee.HashMap<string,Vda.ConnectionParameter> {
		public ConnectionParameters (string cnc_str);
		public virtual void parse (string cnstring);
		public string to_string ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class Expression : Gee.ArrayList<Vda.SqlExpression>, GLib.ListModel, Vda.SqlExpression {
		public Expression ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionField : Vda.Expression, Vda.SqlExpressionField {
		public ExpressionField ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperator : Vda.Expression, Vda.SqlExpressionOperator {
		protected Vda.SqlExpressionOperator.Type _operator_type;
		public ExpressionOperator ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorAnd : Vda.ExpressionOperatorMultiterm, Vda.SqlExpressionOperatorAnd {
		public ExpressionOperatorAnd ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBetween : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorBetween {
		public ExpressionOperatorBetween ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBetweenSymmetric : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorBetweenSymmetric {
		public ExpressionOperatorBetweenSymmetric ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBinaryUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorBinaryUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorBinaryUnaryterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBinaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorBinaryterm {
		protected string _operator_name;
		public ExpressionOperatorBinaryterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorConcatenate : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorConcatenate {
		public ExpressionOperatorConcatenate ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorDiff : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorDiff {
		public ExpressionOperatorDiff ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorDiv : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorDiv {
		public ExpressionOperatorDiv ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorEq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorEq {
		public ExpressionOperatorEq ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorFinalUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorFinalUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorFinalUnaryterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGeq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorGeq {
		public ExpressionOperatorGeq ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGroup : Vda.ExpressionOperator, Vda.SqlExpressionOperatorGroup {
		public ExpressionOperatorGroup ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGt : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorGt {
		public ExpressionOperatorGt ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIlike : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorIlike {
		public ExpressionOperatorIlike ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIn : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorIn {
		public ExpressionOperatorIn ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorInitialUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorInitialUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorInitialUnaryterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIs : Vda.ExpressionOperatorFinalUnaryterm, Vda.SqlExpressionOperatorIs {
		public ExpressionOperatorIs ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsDistinct : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsDistinct {
		public ExpressionOperatorIsDistinct ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsDistinctFrom : Vda.ExpressionOperatorIsDistinct, Vda.SqlExpressionOperatorIsDistinctFrom {
		public ExpressionOperatorIsDistinctFrom ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsFalse : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsFalse {
		public ExpressionOperatorIsFalse ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNot : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsNot {
		public ExpressionOperatorIsNot ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotDistinct : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotDistinct {
		public ExpressionOperatorIsNotDistinct ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotDistinctFrom : Vda.ExpressionOperatorIsNotDistinct, Vda.SqlExpressionOperatorIsNotDistinctFrom {
		public ExpressionOperatorIsNotDistinctFrom ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotFalse : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotFalse {
		public ExpressionOperatorIsNotFalse ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotNull : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotNull {
		public ExpressionOperatorIsNotNull ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotTrue : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotTrue {
		public ExpressionOperatorIsNotTrue ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotUnknown : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotUnknown {
		public ExpressionOperatorIsNotUnknown ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNull : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsNull {
		public ExpressionOperatorIsNull ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsTrue : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsTrue {
		public ExpressionOperatorIsTrue ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsUnknown : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsUnknown {
		public ExpressionOperatorIsUnknown ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLeq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLeq {
		public ExpressionOperatorLeq ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLike : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLike {
		public ExpressionOperatorLike ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLt : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLt {
		public ExpressionOperatorLt ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorMinus : Vda.ExpressionOperatorBinaryUnaryterm, Vda.SqlExpressionOperatorMinus {
		public ExpressionOperatorMinus ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorMultiterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorMultiterm {
		protected string _operator_name;
		public ExpressionOperatorMultiterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNot : Vda.ExpressionOperatorInitialUnaryterm, Vda.SqlExpressionOperatorNot {
		public ExpressionOperatorNot ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotBetween : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorNotBetween {
		public ExpressionOperatorNotBetween ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotBetweenSymmetric : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorNotBetweenSymmetric {
		public ExpressionOperatorNotBetweenSymmetric ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotEq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorNotEq {
		public ExpressionOperatorNotEq ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotIn : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorNotIn {
		public ExpressionOperatorNotIn ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorOr : Vda.ExpressionOperatorMultiterm, Vda.SqlExpressionOperatorOr {
		public ExpressionOperatorOr ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorPlus : Vda.ExpressionOperatorBinaryUnaryterm, Vda.SqlExpressionOperatorPlus {
		public ExpressionOperatorPlus ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorRegexp : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorRegexp {
		public ExpressionOperatorRegexp ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorSimilarTo : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorSimilarTo {
		public ExpressionOperatorSimilarTo ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorStar : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorStar {
		public ExpressionOperatorStar ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorThreeterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorThreeterm {
		protected string _operator2_name;
		protected string _operator_name;
		public ExpressionOperatorThreeterm ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionValue : Vda.Expression, Vda.SqlExpressionValue {
		public ExpressionValue ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionValueParameter : Vda.ExpressionValue, Vda.SqlExpressionValueParameter {
		public ExpressionValueParameter ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class HashList : Gee.ArrayList<GLib.Object>, GLib.ListModel, Vda.HashModel {
		public HashList ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class InvalidPreparedQuery : Vda.InvalidQuery, Vda.PreparedQuery {
		public InvalidPreparedQuery (string msg);
	}
	[CCode (cheader_filename = "vda.h")]
	public class InvalidQuery : GLib.Object, Vda.Query {
		public InvalidQuery (string msg);
		public string message { get; set construct; }
	}
	[CCode (cheader_filename = "vda.h")]
	public class InvalidResult : GLib.Object, Vda.Result {
		public InvalidResult (string msg);
		public string message { get; set construct; }
	}
	[CCode (cheader_filename = "vda.h")]
	public class Parameters : Gee.HashMap<string,Vda.SqlValue>, Vda.SqlParameters {
		public Parameters ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class Parser : GLib.Object, Vda.SqlParser {
		public Parser ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class TableReference : GLib.Object, Vda.SqlTableReference {
		public TableReference ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class Value : GLib.Object, Vda.Stringifiable, Vda.SqlValue {
		protected string _name;
		protected GLib.Value _val;
		public Value ();
		public virtual bool force_value (GLib.Value val);
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueBit : Vda.ValueBool, Vda.SqlValueBit {
		public ValueBit ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueBool : Vda.Value, Vda.SqlValueBool {
		public ValueBool ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueDate : Vda.Value, Vda.SqlValueDate {
		protected GLib.Date d;
		public ValueDate ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueDouble : Vda.ValueNumeric, Vda.SqlValueDouble {
		public ValueDouble ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueFloat : Vda.ValueNumeric, Vda.SqlValueFloat {
		public ValueFloat ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt16 : Vda.ValueInteger, Vda.SqlValueInt16 {
		public ValueInt16 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt2 : Vda.ValueInteger, Vda.SqlValueInt2 {
		public ValueInt2 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt32 : Vda.ValueInteger, Vda.SqlValueInt32 {
		public ValueInt32 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt4 : Vda.ValueInteger, Vda.SqlValueInt4 {
		public ValueInt4 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt64 : Vda.ValueInteger, Vda.SqlValueInt64 {
		public ValueInt64 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt8 : Vda.ValueInteger, Vda.SqlValueInt8 {
		public ValueInt8 ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueInteger : Vda.Value, Vda.SqlValue, Vda.SqlValueInteger {
		public ValueInteger ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueMathExp : GLib.Object, Vda.Stringifiable, Vda.SqlValue, Vda.SqlValueMathExp {
		public ValueMathExp ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueMoney : Vda.ValueNumeric, Vda.SqlValueMoney {
		public ValueMoney ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueName : Vda.ValueString, Vda.SqlValueName {
		public ValueName ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueNull : Vda.Value, Vda.SqlValueNull {
		public ValueNull ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueNumeric : Vda.Value, Vda.SqlValueNumeric {
		public ValueNumeric ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueOid : Vda.ValueInteger, Vda.SqlValueOid {
		public ValueOid ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueString : Vda.Value, Vda.SqlValueString {
		public ValueString ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueText : Vda.ValueString, Vda.SqlValueText {
		public ValueText ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueTime : Vda.ValueTimestamp, Vda.SqlValueTime {
		public ValueTime ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimeNtz : Vda.ValueTimestamp, Vda.SqlValueTime {
		public ValueTimeNtz ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimestamp : Vda.Value, Vda.SqlValueTimestamp {
		protected GLib.DateTime dt;
		public ValueTimestamp ();
	}
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimestampNtz : Vda.ValueTimestamp, Vda.SqlValueTimestampNtz {
		public ValueTimestampNtz ();
	}
	[CCode (cheader_filename = "vda.h")]
	public interface ColumnModel : GLib.Object {
		public abstract GLib.Type data_type { get; }
		public abstract string name { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Connection : GLib.Object {
		public enum Status {
			INVALID,
			IN_PROGRESS,
			CANCELED,
			MADE,
			DISCONNECTED,
			TIMEOUT,
			CONNECTED
		}
		public abstract bool add_savepoint (string? name) throws GLib.Error;
		public abstract bool begin_transaction (string? name) throws GLib.Error;
		public abstract async void close () throws GLib.Error;
		public abstract bool commit_transaction (string? name) throws GLib.Error;
		public abstract Vda.Role? current_user ();
		public abstract bool delete_savepoint (string? name) throws GLib.Error;
		public abstract Vda.PreparedQuery? get_prepared_query (string name);
		public virtual string locale (string category);
		public abstract async Vda.Connection.Status open () throws GLib.Error;
		public abstract async Vda.Connection.Status open_from_string (string cnc_string) throws GLib.Error;
		public abstract Vda.Query parse_string (string sql) throws GLib.Error;
		public abstract Vda.PreparedQuery? parse_string_prepared (string? name, string sql) throws GLib.Error;
		public abstract Vda.PreparedQuery? query_from_command (Vda.SqlCommand cmd, string? name) throws GLib.Error;
		public abstract bool rollback_savepoint (string? name) throws GLib.Error;
		public abstract bool rollback_transaction (string? name) throws GLib.Error;
		public virtual string value_to_quoted_string (Vda.SqlValue v);
		public abstract string connection_string { get; }
		public abstract bool is_opened { get; }
		public abstract Vda.ConnectionParameters parameters { get; set; }
		public abstract Vda.Connection.Status status { get; }
		public signal void canceled (string message);
		public signal void closed ();
		public signal void closing ();
		public signal void disconnected ();
		public signal void opened ();
		public signal void timeout ();
	}
	[CCode (cheader_filename = "vda.h")]
	public interface DataCollection : GLib.Object {
		public virtual async Vda.TableModel get_objects () throws GLib.Error;
		public abstract GLib.Cancellable cancellable { get; set; }
		public abstract Vda.Connection database_connection { get; set; }
		public abstract GLib.Type object_type { get; }
		public abstract Vda.DataObject parent { get; }
		public abstract string parent_property { get; }
		public abstract string ref_field { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface DataObject : GLib.Object {
		public static Vda.SqlCommandDelete create_delete_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		public static Vda.SqlCommandInsert create_insert_query (Vda.DataObject obj) throws GLib.Error;
		public static Vda.SqlCommandSelect create_select_all (Vda.DataObject obj);
		public static Vda.SqlCommandSelect create_select_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		public static Vda.SqlCommandUpdate create_update_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		public virtual async void delete_data_from_db () throws GLib.Error;
		public virtual async void delete_data_from_db_full (bool use_pkey = false) throws GLib.Error;
		public virtual async void delete_data_from_db_pkey () throws GLib.Error;
		public virtual async void insert_data_into_db () throws GLib.Error;
		public virtual async void update_data_from_db () throws GLib.Error;
		public virtual async void update_data_from_db_full (bool use_pkey = false) throws GLib.Error;
		public virtual async void update_data_from_db_pkey () throws GLib.Error;
		public virtual async void update_data_into_db () throws GLib.Error;
		public virtual async void update_data_into_db_full (bool use_pkey = false) throws GLib.Error;
		public virtual async void update_data_into_db_pkey () throws GLib.Error;
		public virtual void update_from_row (Vda.TableModel table, uint nrow) throws GLib.Error;
		public abstract GLib.Cancellable cancellable { get; set; }
		public abstract Vda.Connection database_connection { get; set; }
		public abstract string database_table_name { get; set construct; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface HashModel : GLib.Object, GLib.ListModel {
		public abstract void add (GLib.Object object);
		public abstract GLib.Object? find (GLib.Object key);
		public abstract void remove (GLib.Object object);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Inserted : GLib.Object, Vda.Result {
		public abstract Vda.RowModel last_inserted { get; }
		public abstract uint number { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface MetaNamedObject : GLib.Object, Vda.MetaObject {
		public abstract string name { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface MetaObject : GLib.Object {
		public abstract Vda.Connection connection { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface ParsedQuery : GLib.Object, Vda.PreparedQuery {
		public abstract Vda.SqlCommand command { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface PreparedQuery : GLib.Object, Vda.Query {
		public abstract string name { get; }
		public abstract Vda.SqlParameters parameters { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Query : GLib.Object {
		public abstract async void cancel ();
		public abstract async Vda.Result? execute (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract string render_sql () throws GLib.Error;
		public abstract Vda.Connection connection { get; }
		public abstract string sql { owned get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Result : GLib.Object {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Role : GLib.Object {
		[Flags]
		public enum Grant {
			NONE,
			SELECT,
			INSERT,
			UPDATE,
			DELETE,
			TRUNCATE,
			REFERENCES,
			TRIGGER,
			CREATE,
			USAGE,
			PRIVILEGES
		}
		public abstract async void change_privilages (Vda.MetaObject object, Vda.Role.Grant grant) throws GLib.Error;
		public abstract async Vda.HashModel membership () throws GLib.Error;
		public abstract async string name () throws GLib.Error;
		public abstract async Vda.Role.Grant privilages (Vda.MetaObject object) throws GLib.Error;
		public abstract Vda.Connection connection { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface RowModel : GLib.Object, GLib.ListModel {
		public abstract Vda.ColumnModel? get_column (string name) throws GLib.Error;
		public abstract Vda.ColumnModel? get_column_at (uint col) throws GLib.Error;
		public abstract string? get_string (string name) throws GLib.Error;
		public abstract string? get_string_at (uint col) throws GLib.Error;
		public abstract Vda.SqlValue? get_value (string name) throws GLib.Error;
		public abstract Vda.SqlValue? get_value_at (uint col) throws GLib.Error;
		public abstract uint n_columns { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlAffectedRows : GLib.Object, Vda.Result {
		public abstract uint number { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommand : GLib.Object {
		public abstract Vda.Connection connection { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandConditional : GLib.Object {
		public abstract Vda.SqlExpression condition { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandDelete : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		public virtual void parse (string sql) throws GLib.Error;
		public virtual string stringify () throws GLib.Error;
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandInsert : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommand, Vda.SqlCommandParametrized {
		public virtual void parse (string sql) throws GLib.Error;
		public virtual string stringify () throws GLib.Error;
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandModification : GLib.Object {
		public abstract void add_field (string name) throws GLib.Error;
		public abstract void add_field_parameter_value (string field, string par, GLib.Type gtype);
		public abstract void add_field_value (string name, GLib.Value? val);
		public abstract void add_parameter (string par, GLib.Type gtype) throws GLib.Error;
		public abstract void add_value (GLib.Value? val) throws GLib.Error;
		public abstract Vda.HashModel fields { get; }
		public abstract Vda.HashModel values { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandParametrized : GLib.Object, Vda.SqlCommand {
		public abstract Vda.SqlParameters parameters { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandSelect : GLib.Object, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		public abstract void add_field (string field, string? table_ref, string? alias = null);
		public abstract void add_math_exp_field (string exp, string? allias) throws GLib.Error;
		public abstract void add_table (string name, string? allias = null);
		public abstract void add_value_field (GLib.Value val, string? allias);
		public virtual void parse (string sql) throws GLib.Error;
		public virtual string stringify () throws GLib.Error;
		public virtual Vda.PreparedQuery to_query (string? name = null) throws GLib.Error;
		public abstract Vda.HashModel fields { get; }
		public abstract Vda.HashModel tables { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandTableRelated : GLib.Object {
		public abstract string allias { get; set; }
		public abstract string table { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandUpdate : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		public virtual void parse (string sql) throws GLib.Error;
		public virtual string stringify () throws GLib.Error;
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpression : GLib.Object, GLib.ListModel {
		public abstract void add_expression (Vda.SqlExpression exp);
		public virtual void add_math_expression (string str, Vda.Connection cnc) throws GLib.Error;
		public static Vda.SqlExpression parse (string str, Vda.Connection cnc, Vda.SqlParameters? @params = null) throws GLib.Error;
		public abstract void remove_expression (Vda.SqlExpression exp);
		public abstract string to_string ();
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionField : GLib.Object, Vda.SqlExpression {
		public abstract string? allias { get; set; }
		public abstract string name { get; set; }
		public abstract string table_ref { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperator : GLib.Object, Vda.SqlExpression {
		public enum Type {
			NONE,
			AND,
			OR,
			EQ,
			IS,
			LIKE,
			BETWEEN,
			NOT_BETWEEN,
			BETWEEN_SYMMETRIC,
			NOT_BETWEEN_SYMMETRIC,
			IS_DISTINCT_FROM,
			IS_NOT_DISTINCT_FROM,
			GT,
			LT,
			GEQ,
			LEQ,
			DIFF,
			REGEXP,
			REGEXP_CI,
			NOT_REGEXP,
			NOT_REGEXP_CI,
			SIMILAR_TO,
			IS_NULL,
			IS_NOT_NULL,
			IS_TRUE,
			IS_NOT_TRUE,
			IS_FALSE,
			IS_NOT_FALSE,
			IS_UNKNOWN,
			IS_NOT_UNKNOWN,
			NOT,
			IN,
			NOT_IN,
			CONCATENATE,
			PLUS,
			MINUS,
			STAR,
			DIV,
			REM,
			BITAND,
			BITOR,
			BITNOT,
			ILIKE
		}
		public abstract Vda.SqlExpressionOperator add_and_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_between_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		public abstract Vda.SqlExpressionOperator add_between_symmetric_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		public abstract Vda.SqlExpressionOperator add_concatenate_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_diff_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_div_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_eq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_geq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_gt_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_in_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_is_distinct_from_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_is_false_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_not_distinct_from_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_is_not_false_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_not_null_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_not_true_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_not_unknown_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_null_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_true_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_is_unknown_operator (Vda.SqlExpression exp1);
		public abstract Vda.SqlExpressionOperator add_leq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_like_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_minus_operator (Vda.SqlExpression exp1, Vda.SqlExpression? exp2);
		public abstract Vda.SqlExpressionOperator add_not_between_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		public abstract Vda.SqlExpressionOperator add_not_between_symmetric_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		public abstract Vda.SqlExpressionOperator add_not_in_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_not_operator (Vda.SqlExpression exp);
		public abstract Vda.SqlExpressionOperator add_or_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_plus_operator (Vda.SqlExpression exp1, Vda.SqlExpression? exp2);
		public abstract Vda.SqlExpressionOperator add_regexp_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_similar_to_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionOperator add_star_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		public abstract Vda.SqlExpressionField create_field_expression (string name);
		public abstract Vda.SqlExpressionValueParameter create_parameter_expression (string name, GLib.Type gtype);
		public abstract Vda.SqlExpressionValue create_value_expression (GLib.Value? val, Vda.Connection cnc);
		public abstract Vda.SqlExpressionOperator.Type operator_type { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorAnd : GLib.Object, Vda.SqlExpressionOperatorMultiterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBetween : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBetweenSymmetric : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBinaryUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBinaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorConcatenate : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorDiff : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorDiv : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorEq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorFinalUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGeq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGroup : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGt : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIlike : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIn : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorInitialUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIs : GLib.Object, Vda.SqlExpressionOperatorFinalUnaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsDistinct : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsDistinctFrom : GLib.Object, Vda.SqlExpressionOperatorIsDistinct {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsFalse : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNot : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotDistinct : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotDistinctFrom : GLib.Object, Vda.SqlExpressionOperatorIsNotDistinct {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotFalse : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotNull : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotTrue : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotUnknown : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNull : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsTrue : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsUnknown : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLeq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLike : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLt : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorMinus : GLib.Object, Vda.SqlExpressionOperatorBinaryUnaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorMultiterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNot : GLib.Object, Vda.SqlExpressionOperatorInitialUnaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotBetween : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotBetweenSymmetric : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotEq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotIn : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorOr : GLib.Object, Vda.SqlExpressionOperatorMultiterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorPlus : GLib.Object, Vda.SqlExpressionOperatorBinaryUnaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorRegexp : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorSimilarTo : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorStar : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorThreeterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionValue : GLib.Object, Vda.SqlExpression {
		public virtual void set_math_expression_value (string str) throws GLib.Error;
		public abstract Vda.Connection? connection { get; set; }
		public abstract Vda.SqlValue value { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionValueParameter : GLib.Object, Vda.SqlExpression, Vda.SqlExpressionValue {
		public static GLib.Type gtype_from_string (string str);
		public virtual void parse (string str) throws GLib.Error;
		public abstract GLib.Type gtype { get; set; }
		public abstract string name { get; set; }
		public abstract Vda.SqlParameters parameters { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlParameters : GLib.Object {
		public abstract Vda.SqlValue get_sql_value (string name);
		public abstract GLib.Value? get_value (string name);
		public abstract void set_sql_value (string name, Vda.SqlValue val);
		public abstract void set_value (string name, GLib.Value val);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlParser : GLib.Object {
		public abstract Vda.SqlCommandParametrized parse (string str, Vda.Connection cnc) throws GLib.Error;
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlTableReference : GLib.Object {
		public abstract string? allias { get; set; }
		public abstract string name { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValue : GLib.Object, Vda.Stringifiable {
		public abstract Vda.SqlValue? cast (GLib.Type type);
		public abstract bool from_value (GLib.Value val);
		public abstract bool is_compatible (GLib.Type type);
		public static Vda.SqlValue? new_from_gtype (GLib.Type type);
		public static Vda.SqlValue new_from_gvalue (GLib.Value? val);
		public abstract bool parse (string str);
		public abstract GLib.Value to_gvalue ();
		public abstract string to_sql_expression ();
		public abstract string to_string_quoted ();
		public abstract string name { get; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBinary : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBit : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBlob : GLib.Object, Vda.SqlValue {
		public abstract void load (GLib.File file);
		public abstract void save (GLib.File file);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBool : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueDate : GLib.Object, Vda.SqlValue {
		public abstract GLib.Date get_date ();
		public abstract void set_date (GLib.Date ts);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueDouble : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueFloat : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
		public abstract float get_float ();
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueGeometricPoint : GLib.Object, Vda.SqlValue {
		public abstract double x { get; set; }
		public abstract double y { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt16 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt2 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt32 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt4 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt64 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt8 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInteger : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueMathExp : GLib.Object, Vda.SqlValue {
		public abstract GCalc.MathEquationManager math { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueMoney : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
		public abstract string locale ();
		public abstract Vda.Connection connection { get; set; }
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueName : GLib.Object, Vda.SqlValue, Vda.SqlValueString {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueNull : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueNumeric : GLib.Object, Vda.SqlValue {
		public abstract string format (string str);
		public abstract double get_double ();
		public abstract double get_imaginary ();
		public abstract int get_precision ();
		public abstract double get_real ();
		public abstract void set_precision (int p);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueOid : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueString : GLib.Object, Vda.SqlValue {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueText : GLib.Object, Vda.SqlValue, Vda.SqlValueString {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTime : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestamp {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimeNtz : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestampNtz {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimestamp : GLib.Object, Vda.SqlValue {
		public abstract string format_local ();
		public abstract string format_locale ();
		public abstract string format_utc ();
		public abstract GLib.DateTime get_timestamp ();
		public abstract void set_timestamp (GLib.DateTime ts);
	}
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimestampNtz : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestamp {
	}
	[CCode (cheader_filename = "vda.h")]
	public interface Stringifiable : GLib.Object {
		public abstract string to_string ();
	}
	[CCode (cheader_filename = "vda.h")]
	public interface TableModel : GLib.Object, GLib.ListModel, Vda.Result {
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain ConnectionError {
		NO_DATABASE_NAME_ERROR,
		SERVER_ERROR,
		QUERY_CREATION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain DataCollectionError {
		INVALID_PROPERTY_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain DataObjectError {
		SELECT_ERROR,
		INSERT_ERROR,
		DELETE_ERROR,
		UPDATE_ERROR,
		PARAMETERS_ERROR,
		NO_CONNECTION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain MetaObjectError {
		APPEND,
		UPDATE,
		SAVE,
		DROP
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain ParserError {
		INVALID_TOKEN_ERROR,
		INVALID_EXPRESSION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain QueryError {
		INVALID_QUERY_ERROR,
		INVALID_CONNECTION_ERROR,
		GENERAL_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain RoleError {
		PROVILAGE_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain RowModelError {
		INVALID_COLUMN_NAME_ERROR,
		INVALID_COLUMN_NUMBER_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlCommandError {
		INVALID_STRUCTURE_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlExpressionError {
		INVALID_EXPRESSION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlSelectCommandError {
		INVALID_FIELDS_ERROR
	}
}

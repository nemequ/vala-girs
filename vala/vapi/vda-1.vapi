/* vda-1.vapi generated by valac 0.46.1.21-b4ad, do not modify. */

[CCode (gir_namespace = "Vda", gir_version = "1")]
namespace Vda {
	/**
	 * A query result with the number of affected rows
	 */
	[CCode (cheader_filename = "vda.h")]
	public class AffectedRows : GLib.Object, Vda.Result, Vda.SqlAffectedRows {
		public AffectedRows (uint rows);
	}
	/**
	 * Implementation of {@link SqlCommandDelete} SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public class CommandDelete : GLib.Object, Vda.SqlCommand, Vda.SqlCommandTableRelated, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandParametrized, Vda.SqlCommandDelete {
		public CommandDelete (Vda.Connection cnc);
	}
	/**
	 * Implementation of {@link SqlCommandInsert} SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public class CommandInsert : Vda.CommandModification, Vda.Stringifiable, Vda.SqlCommandInsert {
		public CommandInsert (Vda.Connection cnc);
	}
	/**
	 * Implementation of {@link SqlCommandModification}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class CommandModification : GLib.Object, Vda.SqlCommand, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommandParametrized {
		public CommandModification (Vda.Connection cnc);
	}
	/**
	 * Implementation of {@link SqlCommandSelect}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class CommandSelect : GLib.Object, Vda.SqlCommand, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandParametrized, Vda.SqlCommandSelect {
		public CommandSelect (Vda.Connection cnc);
	}
	/**
	 * Implementation of {@link SqlCommandUpdate}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class CommandUpdate : Vda.CommandModification, Vda.SqlCommandConditional, Vda.Stringifiable, Vda.SqlCommandUpdate {
		public CommandUpdate (Vda.Connection cnc);
	}
	/**
	 * Connection Parameter
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameter : GLib.Object {
		public ConnectionParameter ();
		public string name { get; set construct; }
		public string value { get; set; }
	}
	/**
	 * Connection Parameter for Data Base's name.
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterDbName : Vda.ConnectionParameter {
		public ConnectionParameterDbName ();
	}
	/**
	 * Connection Parameter for Host for the server to connect to
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterHost : Vda.ConnectionParameter {
		public ConnectionParameterHost ();
	}
	/**
	 * Connection Parameter for user's password for the server to connect to
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterPassword : Vda.ConnectionParameter {
		public ConnectionParameterPassword ();
	}
	/**
	 * Connection Parameter for port for the server to connect to
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterPort : Vda.ConnectionParameter {
		public ConnectionParameterPort ();
	}
	/**
	 * Connection Parameter for user's name for the server to connect to
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameterUserName : Vda.ConnectionParameter {
		public ConnectionParameterUserName ();
	}
	/**
	 * A class to hold and parse connection string
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ConnectionParameters : Gee.HashMap<string,Vda.ConnectionParameter> {
		public ConnectionParameters (string cnc_str);
		public virtual void parse (string cnstring);
		public string to_string ();
	}
	/**
	 * Implemenation of {@link SqlExpression}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class Expression : Gee.ArrayList<Vda.SqlExpression>, GLib.ListModel, Vda.SqlExpression {
		public Expression ();
	}
	/**
	 * An implementation of {@link SqlExpressionField}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionField : Vda.Expression, Vda.SqlExpressionField {
		public ExpressionField ();
	}
	/**
	 * An implementation of {@link SqlExpressionOperator}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperator : Vda.Expression, Vda.SqlExpressionOperator {
		protected Vda.SqlExpressionOperator.Type _operator_type;
		public ExpressionOperator ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorAnd}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorAnd : Vda.ExpressionOperatorMultiterm, Vda.SqlExpressionOperatorAnd {
		public ExpressionOperatorAnd ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorBetween}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBetween : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorBetween {
		public ExpressionOperatorBetween ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorBetweenSymmetric}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBetweenSymmetric : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorBetweenSymmetric {
		public ExpressionOperatorBetweenSymmetric ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorBinaryUnaryterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBinaryUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorBinaryUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorBinaryUnaryterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorBinaryterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorBinaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorBinaryterm {
		protected string _operator_name;
		public ExpressionOperatorBinaryterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorConcatenate}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorConcatenate : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorConcatenate {
		public ExpressionOperatorConcatenate ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorDiff}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorDiff : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorDiff {
		public ExpressionOperatorDiff ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorDiv}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorDiv : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorDiv {
		public ExpressionOperatorDiv ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorEq}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorEq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorEq {
		public ExpressionOperatorEq ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorFinalUnaryterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorFinalUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorFinalUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorFinalUnaryterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorGeq}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGeq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorGeq {
		public ExpressionOperatorGeq ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorGroup}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGroup : Vda.ExpressionOperator, Vda.SqlExpressionOperatorGroup {
		public ExpressionOperatorGroup ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorGt}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorGt : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorGt {
		public ExpressionOperatorGt ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIlike}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIlike : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorIlike {
		public ExpressionOperatorIlike ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIn}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIn : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorIn {
		public ExpressionOperatorIn ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorInitialUnaryterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorInitialUnaryterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorInitialUnaryterm {
		protected string _operator_name;
		public ExpressionOperatorInitialUnaryterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIs}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIs : Vda.ExpressionOperatorFinalUnaryterm, Vda.SqlExpressionOperatorIs {
		public ExpressionOperatorIs ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsDistinct}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsDistinct : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsDistinct {
		public ExpressionOperatorIsDistinct ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsDistinctFrom}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsDistinctFrom : Vda.ExpressionOperatorIsDistinct, Vda.SqlExpressionOperatorIsDistinctFrom {
		public ExpressionOperatorIsDistinctFrom ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsFalse}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsFalse : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsFalse {
		public ExpressionOperatorIsFalse ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNot}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNot : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsNot {
		public ExpressionOperatorIsNot ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotDistinct}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotDistinct : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotDistinct {
		public ExpressionOperatorIsNotDistinct ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotDistinctFrom}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotDistinctFrom : Vda.ExpressionOperatorIsNotDistinct, Vda.SqlExpressionOperatorIsNotDistinctFrom {
		public ExpressionOperatorIsNotDistinctFrom ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotFalse}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotFalse : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotFalse {
		public ExpressionOperatorIsNotFalse ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotNull}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotNull : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotNull {
		public ExpressionOperatorIsNotNull ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotTrue}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotTrue : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotTrue {
		public ExpressionOperatorIsNotTrue ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNotUnknown}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNotUnknown : Vda.ExpressionOperatorIsNot, Vda.SqlExpressionOperatorIsNotUnknown {
		public ExpressionOperatorIsNotUnknown ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsNull}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsNull : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsNull {
		public ExpressionOperatorIsNull ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsTrue}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsTrue : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsTrue {
		public ExpressionOperatorIsTrue ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorIsUnknown}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorIsUnknown : Vda.ExpressionOperatorIs, Vda.SqlExpressionOperatorIsUnknown {
		public ExpressionOperatorIsUnknown ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorLeq}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLeq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLeq {
		public ExpressionOperatorLeq ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorLike}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLike : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLike {
		public ExpressionOperatorLike ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorLt}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorLt : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorLt {
		public ExpressionOperatorLt ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorMinus}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorMinus : Vda.ExpressionOperatorBinaryUnaryterm, Vda.SqlExpressionOperatorMinus {
		public ExpressionOperatorMinus ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorMultiterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorMultiterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorMultiterm {
		protected string _operator_name;
		public ExpressionOperatorMultiterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorNot}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNot : Vda.ExpressionOperatorInitialUnaryterm, Vda.SqlExpressionOperatorNot {
		public ExpressionOperatorNot ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorNotBetween}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotBetween : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorNotBetween {
		public ExpressionOperatorNotBetween ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorNotBetweenSymmetric}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotBetweenSymmetric : Vda.ExpressionOperatorThreeterm, Vda.SqlExpressionOperatorNotBetweenSymmetric {
		public ExpressionOperatorNotBetweenSymmetric ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorNotEq}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotEq : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorNotEq {
		public ExpressionOperatorNotEq ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorNotIn}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorNotIn : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorNotIn {
		public ExpressionOperatorNotIn ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorOr}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorOr : Vda.ExpressionOperatorMultiterm, Vda.SqlExpressionOperatorOr {
		public ExpressionOperatorOr ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorPlus}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorPlus : Vda.ExpressionOperatorBinaryUnaryterm, Vda.SqlExpressionOperatorPlus {
		public ExpressionOperatorPlus ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorRegexp}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorRegexp : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorRegexp {
		public ExpressionOperatorRegexp ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorSimilarTo}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorSimilarTo : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorSimilarTo {
		public ExpressionOperatorSimilarTo ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorStar}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorStar : Vda.ExpressionOperatorBinaryterm, Vda.SqlExpressionOperatorStar {
		public ExpressionOperatorStar ();
	}
	/**
	 * Implemenation of {@link SqlExpressionOperatorThreeterm}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionOperatorThreeterm : Vda.ExpressionOperator, Vda.SqlExpressionOperatorThreeterm {
		protected string _operator2_name;
		protected string _operator_name;
		public ExpressionOperatorThreeterm ();
	}
	/**
	 * Implemenation of {@link SqlExpressionValue}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionValue : Vda.Expression, Vda.SqlExpressionValue {
		public ExpressionValue ();
	}
	/**
	 * Implemenation of {@link SqlExpressionValueParameter}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ExpressionValueParameter : Vda.ExpressionValue, Vda.SqlExpressionValueParameter {
		public ExpressionValueParameter ();
	}
	/**
	 * Implemenation of {@link HashModel}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class HashList : Gee.ArrayList<GLib.Object>, GLib.ListModel, Vda.HashModel {
		public HashList ();
	}
	/**
	 * Invalid {@link PreparedQuery}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class InvalidPreparedQuery : Vda.InvalidQuery, Vda.PreparedQuery {
		public InvalidPreparedQuery (string msg);
	}
	/**
	 * Invalid {@link Query}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class InvalidQuery : GLib.Object, Vda.Query {
		public InvalidQuery (string msg);
		public string message { get; set construct; }
	}
	/**
	 * Represent an invalid {@link Result} after execute a query
	 */
	[CCode (cheader_filename = "vda.h")]
	public class InvalidResult : GLib.Object, Vda.Result {
		public InvalidResult (string msg);
		public string message { get; set construct; }
	}
	/**
	 * Set parameters for a prepared query.
	 */
	[CCode (cheader_filename = "vda.h")]
	public class Parameters : Gee.HashMap<string,Vda.SqlValue>, Vda.SqlParameters {
		public Parameters ();
	}
	/**
	 * An implementation of {@link SqlParser}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class Parser : GLib.Object, Vda.SqlParser {
		public Parser ();
	}
	/**
	 * Represent a table reference by name
	 */
	[CCode (cheader_filename = "vda.h")]
	public class TableReference : GLib.Object, Vda.SqlTableReference {
		public TableReference ();
	}
	/**
	 * An implementation of {@link Vda.SqlValue}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class Value : GLib.Object, Vda.Stringifiable, Vda.SqlValue {
		protected string _name;
		protected GLib.Value _val;
		public Value ();
		/**
		 * Set internal {@link GLib.Value} {@link _val} to the given
		 * value, reseting the current value's type to. Use with caution,
		 * continue reading.
		 *
		 * This should be used only on new value implementations. Forcing
		 * to a type incompatible the the current one, can produce
		 * crashes or un-predictable behavior. Is better if you use
		 * {@link cast} to convert the current to value to another.
		 */
		public virtual bool force_value (GLib.Value val);
	}
	/**
	 * An implementation of {@link SqlValueBit}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueBit : Vda.ValueBool, Vda.SqlValueBit {
		public ValueBit ();
	}
	/**
	 * An implementation of {@link SqlValueBool}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueBool : Vda.Value, Vda.SqlValueBool {
		public ValueBool ();
	}
	/**
	 * An implementation of {@link SqlValueDate}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueDate : Vda.Value, Vda.SqlValueDate {
		protected GLib.Date d;
		public ValueDate ();
	}
	/**
	 * An implementation of {@link SqlValueDouble}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueDouble : Vda.ValueNumeric, Vda.SqlValueDouble {
		public ValueDouble ();
	}
	/**
	 * An implementation of {@link SqlValueFloat}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueFloat : Vda.ValueNumeric, Vda.SqlValueFloat {
		public ValueFloat ();
	}
	/**
	 * An implementation of {@link SqlValueInt16}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt16 : Vda.ValueInteger, Vda.SqlValueInt16 {
		public ValueInt16 ();
	}
	/**
	 * An implementation of {@link SqlValueInt2}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt2 : Vda.ValueInteger, Vda.SqlValueInt2 {
		public ValueInt2 ();
	}
	/**
	 * An implementation of {@link SqlValueInt32}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt32 : Vda.ValueInteger, Vda.SqlValueInt32 {
		public ValueInt32 ();
	}
	/**
	 * An implementation of {@link SqlValueInt4}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt4 : Vda.ValueInteger, Vda.SqlValueInt4 {
		public ValueInt4 ();
	}
	/**
	 * An implementation of {@link SqlValueInt64}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt64 : Vda.ValueInteger, Vda.SqlValueInt64 {
		public ValueInt64 ();
	}
	/**
	 * An implementation of {@link SqlValueInt8}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInt8 : Vda.ValueInteger, Vda.SqlValueInt8 {
		public ValueInt8 ();
	}
	/**
	 * An implementation of {@link SqlValueInteger}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueInteger : Vda.Value, Vda.SqlValue, Vda.SqlValueInteger {
		public ValueInteger ();
	}
	/**
	 * Represent an SQL value
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueMathExp : GLib.Object, Vda.Stringifiable, Vda.SqlValue, Vda.SqlValueMathExp {
		public ValueMathExp ();
	}
	/**
	 * An implementation of {@link SqlValueMoney}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueMoney : Vda.ValueNumeric, Vda.SqlValueMoney {
		public ValueMoney ();
	}
	/**
	 * An implementation of {@link SqlValueName}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueName : Vda.ValueString, Vda.SqlValueName {
		public ValueName ();
	}
	/**
	 * An implementation of {@link SqlValueNull}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueNull : Vda.Value, Vda.SqlValueNull {
		public ValueNull ();
	}
	/**
	 * An implementation of {@link SqlValueNumeric}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueNumeric : Vda.Value, Vda.SqlValueNumeric {
		public ValueNumeric ();
	}
	/**
	 * An implementation of {@link SqlValueOid}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueOid : Vda.ValueInteger, Vda.SqlValueOid {
		public ValueOid ();
	}
	/**
	 * An implementation of {@link SqlValueString}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueString : Vda.Value, Vda.SqlValueString {
		public ValueString ();
	}
	/**
	 * An implementation of {@link SqlValueText}
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueText : Vda.ValueString, Vda.SqlValueText {
		public ValueText ();
	}
	/**
	 * Implementation of {@link SqlValueTime} a time with time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueTime : Vda.ValueTimestamp, Vda.SqlValueTime {
		public ValueTime ();
	}
	/**
	 * An implementation of {@link SqlValueTime} with time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimeNtz : Vda.ValueTimestamp, Vda.SqlValueTime {
		public ValueTimeNtz ();
	}
	/**
	 * An implementation of {@link SqlValueTimestamp} with time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimestamp : Vda.Value, Vda.SqlValueTimestamp {
		protected GLib.DateTime dt;
		public ValueTimestamp ();
	}
	/**
	 * An implementation of {@link SqlValueTimestampNtz} without time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public class ValueTimestampNtz : Vda.ValueTimestamp, Vda.SqlValueTimestampNtz {
		public ValueTimestampNtz ();
	}
	/**
	 * Represent a column in a row of a table model
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface ColumnModel : GLib.Object {
		public abstract GLib.Type data_type { get; }
		public abstract string name { get; }
	}
	/**
	 * An interface to be implemented by database providers
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Connection : GLib.Object {
		/**
		 * Status of the connection
		 */
		public enum Status {
			INVALID,
			/**
			 * Connection is in progress.
			 */
			IN_PROGRESS,
			/**
			 * Connection is canceled, because authentication or parameters
			 */
			CANCELED,
			/**
			 * Connection is made to the server, but still in progress
			 */
			MADE,
			/**
			 * Connection is disconnected.
			 */
			DISCONNECTED,
			/**
			 * Connection is disconnected, because no response from the server.
			 */
			TIMEOUT,
			/**
			 * Connection is done and ready.
			 */
			CONNECTED
		}
		public abstract bool add_savepoint (string? name) throws GLib.Error;
		public abstract bool begin_transaction (string? name) throws GLib.Error;
		/**
		 * Should throw {@link canceled} event at connection closed.
		 */
		public abstract async void close () throws GLib.Error;
		public abstract bool commit_transaction (string? name) throws GLib.Error;
		/**
		 * Get a {@link Role} with data about current user or NULL if no
		 * role information exists for the current connection.
		 */
		public abstract Vda.Role? current_user ();
		public abstract bool delete_savepoint (string? name) throws GLib.Error;
		public abstract Vda.PreparedQuery? get_prepared_query (string name);
		/**
		 * Extract information about connection's locale settings.
		 *
		 * Supported categories are
		 *
		 * * LC_COLLATE Shows the collation order locale
		 * * LC_CTYPE Shows the character classification and case conversion locale
		 * * LC_MESSAGES Shows the language in which messages are displayed
		 * * LC_MONETARY Shows the locale for formatting monetary amounts
		 * * LC_NUMERIC Shows the locale for formatting numbers
		 * * LC_TIME Shows the locale for formatting date and time values
		 *
		 * @param category name of the category to query
		 */
		public virtual string locale (string category);
		/**
		 * Start a connection to a database. Initialy will return {@link Status.IN_PROGRESS}
		 * if the connection has been started. Returns {@link Status.CANCELED} if the connection
		 * can't be started.
		 *
		 * If the connection is not done after a timeout, will returns {@link Status.CANCELED}.
		 *
		 * If the connection is stablished, {@link opened} signal is rised and {@link status}
		 * is set to {@link Status.CONNECTED}
		 *
		 */
		public abstract async Vda.Connection.Status open () throws GLib.Error;
		public abstract async Vda.Connection.Status open_from_string (string cnc_string) throws GLib.Error;
		public abstract Vda.Query parse_string (string sql) throws GLib.Error;
		public abstract Vda.PreparedQuery? parse_string_prepared (string? name, string sql) throws GLib.Error;
		/**
		 * Creates a {@link Query} from a {@link SqlCommand}
		 */
		public abstract Vda.PreparedQuery? query_from_command (Vda.SqlCommand cmd, string? name) throws GLib.Error;
		public abstract bool rollback_savepoint (string? name) throws GLib.Error;
		public abstract bool rollback_transaction (string? name) throws GLib.Error;
		public virtual string value_to_quoted_string (Vda.SqlValue v);
		public abstract string connection_string { get; }
		public abstract bool is_opened { get; }
		public abstract Vda.ConnectionParameters parameters { get; set; }
		public abstract Vda.Connection.Status status { get; }
		public signal void canceled (string message);
		public signal void closed ();
		public signal void closing ();
		/**
		 * Thrown if the connection to the server is not available any.
		 */
		public signal void disconnected ();
		public signal void opened ();
		public signal void timeout ();
	}
	/**
	 * Implementators will be able to execute a SELECT to get all objects
	 * in the database related to a {@link parent} object.
	 *
	 * {{{
	 *
	 * public class Address : Object, Vda.DataObject {
	 *    // DataObject
	 *    public string database_table_name { get; construct set; }
	 *    public Vda.Connection database_connection { get; set; }
	 *    public Cancellable cancellable { get; set; }
	 *
	 *    // Database mapping
	 *    [Description (nick="@id::pkey::auto")]
	 *    public int id { get; set; }
	 *    [Description (nick="@street")]
	 *    public string street { get; set; }
	 *    [Description (nick="@client::id")]
	 *    public int client { get; set; }
	 *    construct {
	 *      database_table_name = "address";
	 *    }
	 *  }
	 *  public class Addresses : Object, Vda.DataCollection {
	 *    private string _parent_property;
	 *    private DataObject _parent;
	 *    private GLib.Type _object_type;
	 *    private string _ref_field;
	 *
	 *    public Vda.Connection database_connection { get; set; }
	 *    public string parent_property { get { return _parent_property; } }
	 *    public DataObject parent { get { return _parent; } }
	 *    public GLib.Type object_type { get { return _object_type; } }
	 *    public string ref_field{ get { return _ref_field; } }
	 *    public Cancellable cancellable { get; set; }
	 *
	 *    construct  {
	 *      _parent_property = "id";
	 *      _ref_field = "client";
	 *      _object_type = typeof (Address);
	 *    }
	 *
	 *    public Addresses (Client client) {
	 *      _parent = client;
	 *    }
	 *  }
	 *
	 *  public class Client : Object, Vda.DataObject {
	 *    Vda.Connection _cnc = null;
	 *    // DataObject
	 *    public string database_table_name { get; construct set; }
	 *    public Vda.Connection database_connection {
	 *      get {
	 *        return _cnc;
	 *      }
	 *      set {
	 *        _cnc = value;
	 *        addresses.database_connection = _cnc;
	 *      }
	 *    }
	 *    public Cancellable cancellable { get; set; }
	 *
	 *    // Database mapping
	 *   [Description (nick="@id::pkey::auto")]
	 *    public int id { get; set; }
	 *    [Description (nick="@name")]
	 *    public string name { get; set; }
	 *    [Description (nick="@description")]
	 *    public string description { get; set; }
	 *    [Description (nick="@phone::id")]
	 *    public string phone { get; set; }
	 *    public Addresses addresses { get; set; }
	 *
	 *    construct {
	 *     database_table_name = "clients";
	 *      addresses = new Addresses (this);
	 *    }
	 *  }
	 * }}}
	 *
	 * Using the above code a query, by accessing the Addresses
	 * object, you can call {@link get_objects} and a the following
	 * query will be executed:
	 *
	 * {{{
	 * SELECT * FROM address WHERE address.client = 100;
	 * }}}
	 *
	 * Above number 100, is calculated from the current instance
	 * of Client object's id property.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface DataCollection : GLib.Object {
		/**
		 * Builds and execute a SELECT command with the given parameters,
		 * and returns a  {@link TableModel} with all related rows.
		 */
		public virtual async Vda.TableModel get_objects () throws GLib.Error;
		/**
		 * Tries to cancell the execution of a SELECT command.
		 */
		public abstract GLib.Cancellable cancellable { get; set; }
		/**
		 * Get Database connection
		 */
		public abstract Vda.Connection database_connection { get; set; }
		/**
		 * The target Object's {@link GLib.Type} of a {@link DataObject}
		 * to get information from like: the database's table's name.
		 * Internally a temporally instance is created to access the required
		 * information.
		 */
		public abstract GLib.Type object_type { get; }
		/**
		 * Parent of the collection, where there is a one to many relation
		 * between the {@link DataObject} representing a single row
		 * in a table and a set of rows in another table.
		 */
		public abstract Vda.DataObject parent { get; }
		/**
		 * Conical name of the parent's property to be used in the filter.
		 */
		public abstract string parent_property { get; }
		/**
		 * Is a canonical property's name in the target {@link DataObject},
		 * to be used in the filter to find it the row in the table has
		 * relation with the {@link parent}
		 *
		 * A condition is added to a SELECT command in the form
		 * parent_table.parent_property = target_object_table.ref_field
		 *
		 * See at {@link parent} and {@link parent_property} for more information.
		 */
		public abstract string ref_field { get; }
	}
	/**
	 * Represent managable row data in a Table in the database.
	 *
	 * Properties should have its nick in the form '@field_name::id' where
	 * 'field_name' is the name of your field in the database's table, supporting
	 * any case, including spaces. '@' is just a mark to detect the property
	 * as one to be mapped to a database's table's field. '::id' should be
	 * added only on properties containing an ID to get data from database.
	 *
	 * In order to be able to execute operations over the database, you should
	 * set {@link database_connection} with the connection to the databae
	 * and {@link database_table_name} to the table's name in the database to
	 * execute operations over.
	 *
	 * If more than one property with a nickname using a '::id' suffix is located,
	 * the object takes the actual value of each property to create a filter
	 * condition with an AND operator as the form
	 * 'field_name = property_value AND field_name2 = property_value2'
	 *
	 * In the following example, the properties name, phone and email, are used
	 * to store data from the database when {@link update_data_from_db} is called.
	 *
	 * If you try to retrive data from the database, first you should set
	 * the properties phone and email, in the example bellow, then call
	 * {@link update_data_from_db}, this will ejecute a SELECT query using
	 * a WHERE condition in the form "phone = 'phonevalue' AND email = 'emailvalue' "
	 * as a filter that should return just one row.
	 *
	 * Once you have the data from any source, like calling {@link update_data_from_db},
	 * is possible to update any property then call {@link update_data_into_db} to
	 * UPDATE the data in the table's database.
	 *
	 * When a new row is required, insert a row, set all the properties you want to
	 * insert with the row and then call {@link insert_data_into_db}. Mark a property
	 * with a nickname using a '::auto' suffix to ignore it in the hope it is
	 * automatically set by the database engine. In the example bellow, the country
	 * property is automatically set by the database engine, as a default value, for
	 * example.
	 *
	 * {{{
	 *   public class Client : Object, Vda.DataObject {
	 *     public string database_table_name { get; construct set; }
	 *     public Vda.Connection database_connection { get; set; }
	 *     public Cancellable cancellable { get; set; }
	 *
	 *     [Description (nick="@id::pkey::auto")]
	 *     public int id { get; set; }
	 *
	 *     [Description (nick="@name")]
	 *     public string name { get; set; }
	 *
	 *     [Description (nick="@phone::id")]
	 *     public string phone { get; set; }
	 *
	 *     [Description (nick="@email::id")]
	 *     public string email { get; set; }
	 *
	 *     [Description (nick="@country::auto")]
	 *     public string country { get; set; }
	 *   }
	 * }}}
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface DataObject : GLib.Object {
		/**
		 * Creates a {@link SqlCommandDelete} to DELETE a {@link DataObject}.
		 *
		 * Use the returned object and modify at your needs, then create a {@link PreparedQuery}
		 * using {@link SqlCommandDelete.to_query} so you can use {@link Query.execute}
		 * to run your command.
		 */
		public static Vda.SqlCommandDelete create_delete_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		/**
		 * Creates an {@link SqlCommandInsert} to INSERT a {@link DataObject}
		 *
		 * Only properties with a nickname as the form '@param_name' prefix are considered
		 * as parameters,where 'param_name' is the parameter name used and added.
		 *
		 * Use the returned object and modify at your needs, then create a {@link PreparedQuery}
		 * using {@link SqlCommandInsert.to_query} so you can use {@link Query.execute}
		 * to run your command.
		 */
		public static Vda.SqlCommandInsert create_insert_query (Vda.DataObject obj) throws GLib.Error;
		/**
		 * Creates an {@link SqlCommandSelect} query, for all objects of the same type
		 * in the database
		 *
		 * @param obj a {@link DataObject} to create a query from
		 */
		public static Vda.SqlCommandSelect create_select_all (Vda.DataObject obj);
		/**
		 * Creates a {@link SqlCommandSelect} to SELECT a {@link DataObject} using
		 * the object's properties with the mark, in the nicks, ::id and ::pkey, filtering
		 * all other objects.
		 *
		 * @param obj the object to create the command from
		 * @param use_pkey change the use of ::id properties with the ones marked as ::pkey
		 *
		 * @return a new {@link SqlCommandSelect}
		 */
		public static Vda.SqlCommandSelect create_select_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		/**
		 *
		 * Creates a {@link SqlCommandUpdate} to UPDATE a {@link DataObject}.
		 *
		 * Use the returned object and modify at your needs, then create a {@link PreparedQuery}
		 * using {@link SqlCommandUpdate.to_query} so you can use {@link Query.execute}
		 * to run your command.
		 *
		 * @param obj a {@link DataObject} used to create query from
		 * @param use_pkey if true property marked with @???:pkey is used instead of '::id'
		 */
		public static Vda.SqlCommandUpdate create_update_query (Vda.DataObject obj, bool use_pkey = false) throws GLib.Error;
		/**
		 * Delete object in the database using marked id properties
		 *
		 * This is a convenient method around {@link delete_data_from_db_full}
		 */
		public virtual async void delete_data_from_db () throws GLib.Error;
		/**
		 * Delete object in the database using marked properties
		 *
		 * Take '::pkey' or '::id' marked property, by its nick, to generate the query.
		 *
		 * Use @param use_pkey to ignore the '::id' marked properties and use the '::pkey'
		 * ones: useful when you already knows the primary
		 * key of the row and you want to update the fields marked as '::id'.
		 *
		 * @param use_pkey enable using primary keys to generate queries, if false use '::id' ones
		 */
		public virtual async void delete_data_from_db_full (bool use_pkey = false) throws GLib.Error;
		/**
		 * Delete object in the database using marked primary key properties
		 *
		 * This is a convenient method around {@link delete_data_from_db_full}
		 */
		public virtual async void delete_data_from_db_pkey () throws GLib.Error;
		/**
		 * Insert a new row with the object's properties with the same name as for
		 * data's query's columns' name.
		 *
		 * This is a one time operation, if you want to know how your data has been saved
		 * like the asigned ID or automatic values, if any, you should query it from the data base,
		 * creating a new instance and using {@link update_data_from_db} if you know
		 * all ID's you have used before.
		 */
		public virtual async void insert_data_into_db () throws GLib.Error;
		/**
		 * Update object's properties' values with the ones in the database.
		 *
		 * This method uses all properties marked as '::id' in its nick.
		 */
		public virtual async void update_data_from_db () throws GLib.Error;
		/**
		 * Update object's properties' values with the ones in the database.
		 *
		 * Take '::pkey' or '::id' marked property, by its nick, to generate the query.
		 *
		 * Use @param use_pkey to ignore the '::id' marked properties and use the '::pkey'
		 * ones: useful when you already knows the primary
		 * key of the row and you want to update the fields marked as '::id'.
		 *
		 * @param use_pkey enable using primary keys to generate queries, if false use '::id' ones
		 */
		public virtual async void update_data_from_db_full (bool use_pkey = false) throws GLib.Error;
		/**
		 * Update object's properties' values with the ones in the database.
		 *
		 * This method uses all properties marked as '::pkey' in its nick.
		 */
		public virtual async void update_data_from_db_pkey () throws GLib.Error;
		/**
		 * Update object's data in the database using marked id properties
		 *
		 * This method uses all properties marked as '::id' in its nick.
		 */
		public virtual async void update_data_into_db () throws GLib.Error;
		/**
		 * Update object's data in the database
		 *
		 * Take '::pkey' or '::id' marked property, by its nick, to generate the query.
		 *
		 * Use @param use_pkey to ignore the '::id' marked properties and use the '::pkey'
		 * ones: useful when you already knows the primary
		 * key of the row and you want to update the fields marked as '::id'.
		 *
		 * @param use_pkey enable using primary keys to generate queries, if false use '::id' ones
		 */
		public virtual async void update_data_into_db_full (bool use_pkey = false) throws GLib.Error;
		/**
		 * Update object's data in the database using marked primary key properties
		 *
		 * This method uses all properties marked as '::id' in its nick.
		 */
		public virtual async void update_data_into_db_pkey () throws GLib.Error;
		/**
		 * Update values from a {@link TableModel} at given row number
		 */
		public virtual void update_from_row (Vda.TableModel table, uint nrow) throws GLib.Error;
		/**
		 * Cancellable object
		 */
		public abstract GLib.Cancellable cancellable { get; set; }
		/**
		 * Get Database connection
		 */
		public abstract Vda.Connection database_connection { get; set; }
		/**
		 * Database connection
		 */
		public abstract string database_table_name { get; set construct; }
	}
	/**
	 * A {@link GLib.ListModel} using a {@link GLib.Object} as a hash key
	 * to find objects in the collection.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface HashModel : GLib.Object, GLib.ListModel {
		/**
		 * Adds a new object to the collection and use itself to
		 * generate the hash required to find it.
		 */
		public abstract void add (GLib.Object object);
		/**
		 * Search the object in the collection using the given key.
		 */
		public abstract GLib.Object? find (GLib.Object key);
		/**
		 * Remove the object from the collection
		 */
		public abstract void remove (GLib.Object object);
	}
	/**
	 * Is a result from a query inserting rows, with the
	 * number of rows and last row inserted
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Inserted : GLib.Object, Vda.Result {
		public abstract Vda.RowModel last_inserted { get; }
		public abstract uint number { get; }
	}
	/**
	 * Base interface for named introspected database's objects
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface MetaNamedObject : GLib.Object, Vda.MetaObject {
		public abstract string name { get; set; }
	}
	/**
	 * Base interface for introspected database's objects
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface MetaObject : GLib.Object {
		public abstract Vda.Connection connection { get; set; }
	}
	/**
	 * Represented a prepared query. Values required by
	 * query can be set by using paramenters property.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface ParsedQuery : GLib.Object, Vda.PreparedQuery {
		public abstract Vda.SqlCommand command { get; }
	}
	/**
	 * Represented a prepared query. Values required by
	 * query can be set by using paramenters property.
	 *
	 * This kind of query holds parameters in an SQL command
	 * so you can change its values in order to execute it. Use {@link parameters}
	 * to set values using {@link Parameters} interface.
	 *
	 * {@link Query.sql} will holds a string representing the query
	 * with all defined parameters you can set. Parameters have a name and a {@link GLib.Type}
	 * and is represented in the string as: ##param_name::param_type, where ## is used
	 * to identify where a parameter declaration starts and :: is used to put apart the
	 * parameter's name and its type's name.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface PreparedQuery : GLib.Object, Vda.Query {
		public abstract string name { get; }
		public abstract Vda.SqlParameters parameters { get; }
	}
	/**
	 * An interface to be represent any query to be executed by
	 * providers
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Query : GLib.Object {
		/**
		 * Cancel the query execution.
		 */
		public abstract async void cancel ();
		/**
		 * Executes the query over the {@link connection}
		 */
		public abstract async Vda.Result? execute (GLib.Cancellable? cancellable) throws GLib.Error;
		/**
		 * The string representation of SQL command with all its values substited if apply.
		 *
		 * For a simple {@link Query}, returns the value at {@link sql}, but for other types
		 * like {@link PreparedQuery} will substitud all values prepared as parameters,
		 * see {@link PreparedQuery} for more details.
		 */
		public abstract string render_sql () throws GLib.Error;
		/**
		 * A {@link Vda.Connection} used to execute query on.
		 */
		public abstract Vda.Connection connection { get; }
		/**
		 * The string representation of SQL command this query use.
		 */
		public abstract string sql { owned get; }
	}
	/**
	 * Represent any result after execute a query
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Result : GLib.Object {
	}
	/**
	 * An interface for database Access Control
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Role : GLib.Object {
		/**
		 * Current user permissions on given object
		 */
		[Flags]
		public enum Grant {
			NONE,
			SELECT,
			INSERT,
			UPDATE,
			DELETE,
			TRUNCATE,
			REFERENCES,
			TRIGGER,
			CREATE,
			USAGE,
			PRIVILEGES
		}
		/**
		 * Current user permissions on given object
		 */
		public abstract async void change_privilages (Vda.MetaObject object, Vda.Role.Grant grant) throws GLib.Error;
		/**
		 * Current user name membership as {@link Role} objects
		 */
		public abstract async Vda.HashModel membership () throws GLib.Error;
		/**
		 * Current user name connected to the database
		 */
		public abstract async string name () throws GLib.Error;
		/**
		 * Current user permissions on given object
		 */
		public abstract async Vda.Role.Grant privilages (Vda.MetaObject object) throws GLib.Error;
		/**
		 * Current user name connected to the database
		 */
		public abstract Vda.Connection connection { get; }
	}
	/**
	 * Represent a row in a table model.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface RowModel : GLib.Object, GLib.ListModel {
		public abstract Vda.ColumnModel? get_column (string name) throws GLib.Error;
		public abstract Vda.ColumnModel? get_column_at (uint col) throws GLib.Error;
		public abstract string? get_string (string name) throws GLib.Error;
		public abstract string? get_string_at (uint col) throws GLib.Error;
		public abstract Vda.SqlValue? get_value (string name) throws GLib.Error;
		public abstract Vda.SqlValue? get_value_at (uint col) throws GLib.Error;
		public abstract uint n_columns { get; }
	}
	/**
	 * Is a result from a query with a number of afected rows
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlAffectedRows : GLib.Object, Vda.Result {
		public abstract uint number { get; }
	}
	/**
	 * Represent an SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommand : GLib.Object {
		public abstract Vda.Connection connection { get; }
	}
	/**
	 * Represent an SQL command using a condition to filter
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandConditional : GLib.Object {
		/**
		 * Condition to use to filter results in a query, for selection or to be affected.
		 */
		public abstract Vda.SqlExpression condition { get; }
	}
	/**
	 * Represent an SQL DELETE command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandDelete : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		/**
		 * Parse SQL string commands and construct its internal tree
		 */
		public virtual void parse (string sql) throws GLib.Error;
		/**
		 * Creates a string representation of a {@link SqlCommandDelete}
		 */
		public virtual string stringify () throws GLib.Error;
		/**
		 * Create a {@link Query} for execution, using internal structure.
		 *
		 * If {@link SqlExpressionValueParameter} object is used for values in condition,
		 * then a {@link PreparedQuery} is returned with the given name.
		 */
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	/**
	 * Represent an SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandInsert : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommand, Vda.SqlCommandParametrized {
		/**
		 * Parse SQL string commands and construct its internal tree
		 */
		public virtual void parse (string sql) throws GLib.Error;
		/**
		 * Creates a string representation
		 */
		public virtual string stringify () throws GLib.Error;
		/**
		 * Create a {@link Query} for execution, using internal structure.
		 *
		 * If {@link ExpressionValueParameter} object is used for values,
		 * then a {@link PreparedQuery} is returned with the given name.
		 */
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	/**
	 * Represent an SQL command to modify tables in the database
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandModification : GLib.Object {
		/**
		 * Add a new {@link SqlExpressionField}.
		 *
		 * New field is not paired with a correspondant {@link ExpressionValue}
		 * so use {@link add_parameter} to add a paired value with
		 * this field, other wise this command will be invalid.
		 *
		 * @param name The field name to change/set
		 */
		public abstract void add_field (string name) throws GLib.Error;
		/**
		 * Add a new {@link SqlExpressionField} and a {@link SqlExpressionValueParameter}
		 * to {@link fields} and {@link values}, to be used to modify field's
		 * value to new value or append to a table. The parameter can be used
		 * to execute the query with specific values.
		 *
		 * @param field The field name to change/set
		 * @param par The parameter's name
		 * @param gtype The parameter's type
		 */
		public abstract void add_field_parameter_value (string field, string par, GLib.Type gtype);
		/**
		 * Add a new {@link SqlExpressionField} and a {@link SqlExpressionField}
		 * to {@link fields} and {@link values}, to be used to modify field's
		 * value to new value or append to a table.
		 *
		 * @param name The field name to change/set
		 * @param val The value to set/change the one at field
		 */
		public abstract void add_field_value (string name, GLib.Value? val);
		/**
		 * Add a new {@link SqlExpressionValueParameter} and checks if there is a field to be used with.
		 *
		 * Value will be associated with the field in the order they where added
		 * using {@link add_field}, take care with {@link add_field_parameter_value}
		 * because you can fall in a desorder set of field/value pairs.
		 *
		 * @param par The parameter's name
		 * @param gtype The parameter's type
		 */
		public abstract void add_parameter (string par, GLib.Type gtype) throws GLib.Error;
		/**
		 * Add a new {@link ExpressionValue}, checking if it pairs with a {@link SqlExpressionField} in the structure.
		 *
		 * Value will be associated with the field in the order they where added
		 * using {@link add_field}, take care with {@link add_field_parameter_value}
		 * because you can fall in a desorder set of field/value pairs.
		 *
		 * @param val The value to change/set
		 */
		public abstract void add_value (GLib.Value? val) throws GLib.Error;
		/**
		 * Fields in the command to use.
		 *
		 * The use of given value depends on the command's type.
		 * For {@link SqlCommandInsert} this will be the field's value to
		 * insert in the database, for example.
		 */
		public abstract Vda.HashModel fields { get; }
		/**
		 * Fields' values in the command to use.
		 *
		 * The use of given value depends on the command's type.
		 * For {@link SqlCommandInsert} this will be the value to
		 * insert in the database, for example.
		 */
		public abstract Vda.HashModel values { get; }
	}
	/**
	 * Represent an SQL command with parameters
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandParametrized : GLib.Object, Vda.SqlCommand {
		/**
		 * Parameters to use when a {@link SqlCommand} is rendered
		 */
		public abstract Vda.SqlParameters parameters { get; }
	}
	/**
	 * Represent an SELECT SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandSelect : GLib.Object, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		/**
		 * Add a field at the given table to the SELECT command.
		 *
		 * If table is given and it is not already in {@link tables},
		 * it is added automatically. If not table is given, the field
		 * is added in the hope it will be referenced as a table, but
		 * checked by the connection at execution time.
		 *
		 * If the field was already added, a new request is ignored.
		 */
		public abstract void add_field (string field, string? table_ref, string? alias = null);
		/**
		 * Add a Math expression string as a field with the given allias.
		 */
		public abstract void add_math_exp_field (string exp, string? allias) throws GLib.Error;
		/**
		 * Add a table with the given name and allias to the SELECT command.
		 *
		 * Any table already added with the same allias, will be removed and
		 * the new table will be used as the table reference for the fields
		 * already added using table's allias.
		 */
		public abstract void add_table (string name, string? allias = null);
		/**
		 * Add a value as a field with the given allias.
		 */
		public abstract void add_value_field (GLib.Value val, string? allias);
		/**
		 * Parse SQL string commands and construct its internal tree
		 */
		public virtual void parse (string sql) throws GLib.Error;
		/**
		 * Creates a string representation
		 */
		public virtual string stringify () throws GLib.Error;
		/**
		 * Create a {@link Query} for execution, using internal structure.
		 *
		 * If {@link SqlExpressionValueParameter} object is used in {@link SqlCommandConditional.condition},
		 * then a {@link PreparedQuery} will be created when converted to {@link Query}.
		 */
		public virtual Vda.PreparedQuery to_query (string? name = null) throws GLib.Error;
		/**
		 * A list of {@link SqlExpressionField}
		 */
		public abstract Vda.HashModel fields { get; }
		/**
		 * A list of {@link SqlTableReference}
		 */
		public abstract Vda.HashModel tables { get; }
	}
	/**
	 * Represent an SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandTableRelated : GLib.Object {
		public abstract string allias { get; set; }
		public abstract string table { get; set; }
	}
	/**
	 * Represent an SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlCommandUpdate : GLib.Object, Vda.SqlCommandTableRelated, Vda.SqlCommandModification, Vda.SqlCommandConditional, Vda.SqlCommand, Vda.SqlCommandParametrized {
		/**
		 * Parse SQL string commands and construct its internal tree
		 */
		public virtual void parse (string sql) throws GLib.Error;
		/**
		 * Creates a string representation
		 */
		public virtual string stringify () throws GLib.Error;
		/**
		 * Create a {@link Query} for execution, using internal structure.
		 *
		 * If {@link ExpressionValueParameter} object is used for values,
		 * then a {@link PreparedQuery} is returned with the given name.
		 */
		public virtual Vda.Query to_query (string? name = null) throws GLib.Error;
	}
	/**
	 * Represent an expression in an SQL command.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpression : GLib.Object, GLib.ListModel {
		/**
		 * Add an expression as a child expression
		 */
		public abstract void add_expression (Vda.SqlExpression exp);
		/**
		 * Add an string math expression as a child expression.
		 *
		 * A {@link SqlExpressionValue} is created and added as a child expression and
		 * its {@link SqlExpressionValue.connection} is set to given {@link Connection}
		 */
		public virtual void add_math_expression (string str, Vda.Connection cnc) throws GLib.Error;
		/**
		 * Parse a math string expression and add it as a child
		 */
		public static Vda.SqlExpression parse (string str, Vda.Connection cnc, Vda.SqlParameters? @params = null) throws GLib.Error;
		/**
		 * Removes an expression as a child expression
		 */
		public abstract void remove_expression (Vda.SqlExpression exp);
		/**
		 * Creates a string representation of this expression.
		 *
		 * If the expressions takes its value from a parameter's value,
		 * like {@link SqlExpressionValueParameter} and is set, the returned
		 * string is the parameter's string representation instead.
		 */
		public abstract string to_string ();
	}
	/**
	 * Represent field in a column as an expression
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionField : GLib.Object, Vda.SqlExpression {
		public abstract string? allias { get; set; }
		public abstract string name { get; set; }
		public abstract string table_ref { get; set; }
	}
	/**
	 * Represent an operator in an {@link SqlExpression}
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperator : GLib.Object, Vda.SqlExpression {
		public enum Type {
			NONE,
			AND,
			OR,
			EQ,
			IS,
			LIKE,
			BETWEEN,
			NOT_BETWEEN,
			BETWEEN_SYMMETRIC,
			NOT_BETWEEN_SYMMETRIC,
			IS_DISTINCT_FROM,
			IS_NOT_DISTINCT_FROM,
			GT,
			LT,
			GEQ,
			LEQ,
			DIFF,
			REGEXP,
			REGEXP_CI,
			NOT_REGEXP,
			NOT_REGEXP_CI,
			SIMILAR_TO,
			IS_NULL,
			IS_NOT_NULL,
			IS_TRUE,
			IS_NOT_TRUE,
			IS_FALSE,
			IS_NOT_FALSE,
			IS_UNKNOWN,
			IS_NOT_UNKNOWN,
			NOT,
			IN,
			NOT_IN,
			CONCATENATE,
			PLUS,
			MINUS,
			STAR,
			DIV,
			REM,
			BITAND,
			BITOR,
			BITNOT,
			ILIKE
		}
		/**
		 * Creates an {@link SqlExpressionOperatorAnd} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_and_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorBetween} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_between_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		/**
		 * Creates an {@link SqlExpressionOperatorBetweenSymmetric} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_between_symmetric_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		/**
		 * Creates an {@link SqlExpressionOperatorConcatenate} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_concatenate_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorDiff} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_diff_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorDiv} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_div_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorEq} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_eq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorGeq} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_geq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorGt} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_gt_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorIn} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_in_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorIsDistinctFrom} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_distinct_from_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorIsFalse} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_false_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNotDistinctFrom} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_not_distinct_from_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNotFalse} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_not_false_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNotNull} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_not_null_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNotTrue} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_not_true_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNotUnknown} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_not_unknown_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsNull} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_null_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsTrue} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_true_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorIsUnknown} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_is_unknown_operator (Vda.SqlExpression exp1);
		/**
		 * Creates an {@link SqlExpressionOperatorLeq} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_leq_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorLike} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_like_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorMinus} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_minus_operator (Vda.SqlExpression exp1, Vda.SqlExpression? exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorNotBetween} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_not_between_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		/**
		 * Creates an {@link SqlExpressionOperatorNotBetweenSymmetric} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_not_between_symmetric_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2, Vda.SqlExpression exp3);
		/**
		 * Creates an {@link SqlExpressionOperatorNotIn} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_not_in_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorNot} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_not_operator (Vda.SqlExpression exp);
		/**
		 * Creates an {@link SqlExpressionOperatorOr} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_or_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorPlus} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_plus_operator (Vda.SqlExpression exp1, Vda.SqlExpression? exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorRegexp} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_regexp_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorSimilarTo} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_similar_to_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionOperatorStar} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionOperator add_star_operator (Vda.SqlExpression exp1, Vda.SqlExpression exp2);
		/**
		 * Creates an {@link SqlExpressionField} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionField create_field_expression (string name);
		/**
		 * Creates an {@link SqlExpressionValueParameter} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionValueParameter create_parameter_expression (string name, GLib.Type gtype);
		/**
		 * Creates an {@link SqlExpressionValue} suitable to be added to a expression
		 */
		public abstract Vda.SqlExpressionValue create_value_expression (GLib.Value? val, Vda.Connection cnc);
		/**
		 * The operator {@link SqlExpressionOperator.Type}
		 */
		public abstract Vda.SqlExpressionOperator.Type operator_type { get; }
	}
	/**
	 * An {@link SqlExpressionOperator} for logic AND operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorAnd : GLib.Object, Vda.SqlExpressionOperatorMultiterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for BETWEEN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBetween : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for BETWEEN SYMMETRIC operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBetweenSymmetric : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for two or one term operators
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBinaryUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for two terms operators
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorBinaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for CONCATENATE operator for strings
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorConcatenate : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic DIFF operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorDiff : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for DIVISION (/) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorDiv : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic EQUAL (=) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorEq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for one term after located operators
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorFinalUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic GREATHER OR EQUAL THAN (>=) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGeq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for grouping expressions
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGroup : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic GREATHER THAN (>) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorGt : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for ILIKE operator for strings
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIlike : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for IN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIn : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for one term initial located operators
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorInitialUnaryterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIs : GLib.Object, Vda.SqlExpressionOperatorFinalUnaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS DISTINCT operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsDistinct : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS DISTINCT FROM operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsDistinctFrom : GLib.Object, Vda.SqlExpressionOperatorIsDistinct {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS FALSE operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsFalse : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNot : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT DISTINCT operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotDistinct : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT DISTINCT FROM operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotDistinctFrom : GLib.Object, Vda.SqlExpressionOperatorIsNotDistinct {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT FALSE operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotFalse : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT NULL operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotNull : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT TRUE operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotTrue : GLib.Object, Vda.SqlExpressionOperatorIsNot {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NOT UNKNOWN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNotUnknown : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS NULL operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsNull : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS TRUE operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsTrue : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for IS UNKNOWN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorIsUnknown : GLib.Object, Vda.SqlExpressionOperatorIs {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic LESS OR EQUAL THAN (<=) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLeq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for LIKE operator for strings
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLike : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic LESS THAN (<) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorLt : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for MINUS (-) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorMinus : GLib.Object, Vda.SqlExpressionOperatorBinaryUnaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for multiple terms operators
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorMultiterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * An {@link SqlExpressionOperator} for NOT operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNot : GLib.Object, Vda.SqlExpressionOperatorInitialUnaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for NOT BETWEEN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotBetween : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for NOT BETWEEN SYMMETRIC operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotBetweenSymmetric : GLib.Object, Vda.SqlExpressionOperatorThreeterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic NOT EQUAL (!=) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotEq : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for NOT IN operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorNotIn : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for logic OR operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorOr : GLib.Object, Vda.SqlExpressionOperatorMultiterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for MINUS (+) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorPlus : GLib.Object, Vda.SqlExpressionOperatorBinaryUnaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for REGULAR EXPRESSION operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorRegexp : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for SIMILAR TO operator for strings
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorSimilarTo : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for STAR (*) operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorStar : GLib.Object, Vda.SqlExpressionOperatorBinaryterm {
	}
	/**
	 * An {@link SqlExpressionOperator} for three terms operator
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionOperatorThreeterm : GLib.Object, Vda.SqlExpressionOperator {
	}
	/**
	 * Represent an SQL value command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionValue : GLib.Object, Vda.SqlExpression {
		/**
		 * Parses an string Math expression and assign its result as a value.
		 *
		 * Parsed expression is stored as a {@link SqlValueMathExp}
		 */
		public virtual void set_math_expression_value (string str) throws GLib.Error;
		/**
		 * A {@link Vda.Connection} to be used by the value.
		 */
		public abstract Vda.Connection? connection { get; set; }
		/**
		 * Actual value as a {@link SqlValue}
		 */
		public abstract Vda.SqlValue value { get; set; }
	}
	/**
	 * Represent a value associated to a parameter in an SQL expression
	 *
	 * The default string representation if no parameter with the same name
	 * is found is: ##parameter_name::parameter_type, where 'parameter_name'
	 * is the actual name and 'parameter_type' is the {@link GLib.Type}'s name,
	 * see {@link gtype_from_string} for some custom type's names supported when
	 * {@link SqlExpression.parse} is used to parse from a string.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlExpressionValueParameter : GLib.Object, Vda.SqlExpression, Vda.SqlExpressionValue {
		/**
		 * Returns a {@link GLib.Type} based on given string.
		 *
		 * Standard GLib names are supported and some equivalent extenssions:
		 * integer for gint, uinteger for guint, float for gfloat, double for gdouble
		 */
		public static GLib.Type gtype_from_string (string str);
		/**
		 * Parse a string representing a parameter declaration.
		 *
		 * Parameters should be declared as: ##param_name::param_type
		 * where param_name is the name of the parameter and param_type
		 * is the parameter's type's name.
		 */
		public virtual void parse (string str) throws GLib.Error;
		public abstract GLib.Type gtype { get; set; }
		public abstract string name { get; set; }
		public abstract Vda.SqlParameters parameters { get; set; }
	}
	/**
	 * Set parameters for a prepared query.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlParameters : GLib.Object {
		public abstract Vda.SqlValue get_sql_value (string name);
		public abstract GLib.Value? get_value (string name);
		public abstract void set_sql_value (string name, Vda.SqlValue val);
		public abstract void set_value (string name, GLib.Value val);
	}
	/**
	 * An SQL Parser creating {@link Vda.SqlCommandParametrized} modificable queries
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlParser : GLib.Object {
		public abstract Vda.SqlCommandParametrized parse (string str, Vda.Connection cnc) throws GLib.Error;
	}
	/**
	 * Represent an SQL command
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlTableReference : GLib.Object {
		public abstract string? allias { get; set; }
		public abstract string name { get; set; }
	}
	/**
	 * Represent an SQL value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValue : GLib.Object, Vda.Stringifiable {
		/**
		 * Tries to cast this object to a compatible {@link GLib.Type}
		 *
		 * Returns: a new {@link SqlValue} or NULL if fails
		 */
		public abstract Vda.SqlValue? cast (GLib.Type type);
		/**
		 * Set this object's value from a {@link GLib.Value}
		 */
		public abstract bool from_value (GLib.Value val);
		/**
		 * Checks if this object is compatible with a given {@link GLib.Type}.
		 *
		 * Compatible means, this value can use {@link cast} to create a new
		 * {@link SqlValue} holding a transformed version of the value, depending
		 * on its type.
		 */
		public abstract bool is_compatible (GLib.Type type);
		/**
		 * Create a new {@link SqlValue} from a {@link GLib.Type}.
		 *
		 * Default handler is returned.
		 */
		public static Vda.SqlValue? new_from_gtype (GLib.Type type);
		/**
		 * Creates a new {@link SqlValue} for the given {@link GLib.Value}
		 */
		public static Vda.SqlValue new_from_gvalue (GLib.Value? val);
		/**
		 * Parse a string representation of a value
		 */
		public abstract bool parse (string str);
		/**
		 * Convert to a {@link GLib.Value}
		 */
		public abstract GLib.Value to_gvalue ();
		/**
		 * Returns an SQL expression of the value.
		 *
		 * The value will be converted to string and quoted if required.
		 */
		public abstract string to_sql_expression ();
		/**
		 * Returns a single quoted string representation of the value.
		 */
		public abstract string to_string_quoted ();
		/**
		 * Value's name
		 */
		public abstract string name { get; }
	}
	/**
	 * Value representing byte sequense data
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBinary : GLib.Object, Vda.SqlValue {
	}
	/**
	 * A one bit value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBit : GLib.Object, Vda.SqlValue {
	}
	/**
	 * Value representing a large binary object
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBlob : GLib.Object, Vda.SqlValue {
		public abstract void load (GLib.File file);
		public abstract void save (GLib.File file);
	}
	/**
	 * A boolean value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueBool : GLib.Object, Vda.SqlValue {
	}
	/**
	 * Value representing a date
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueDate : GLib.Object, Vda.SqlValue {
		public abstract GLib.Date get_date ();
		public abstract void set_date (GLib.Date ts);
	}
	/**
	 * Value representing a float double precision number
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueDouble : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
	}
	/**
	 * Value representing a float single precision number
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueFloat : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
		/**
		 * Converts the internal value to a {@link float} number
		 */
		public abstract float get_float ();
	}
	/**
	 * A value representing a geometric point
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueGeometricPoint : GLib.Object, Vda.SqlValue {
		public abstract double x { get; set; }
		public abstract double y { get; set; }
	}
	/**
	 * A value representing an Integer of sixing bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt16 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer of two bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt2 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer of thirty bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt32 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer of four bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt4 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer of sixty bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt64 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer of eight bytes long
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInt8 : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A value representing an Integer
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueInteger : GLib.Object, Vda.SqlValue {
	}
	/**
	 * A Math Expression holder value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueMathExp : GLib.Object, Vda.SqlValue {
		public abstract GCalc.MathEquationManager math { get; set; }
	}
	/**
	 * Value representing a float point number for use a monetary quantities
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueMoney : GLib.Object, Vda.SqlValue, Vda.SqlValueNumeric {
		public abstract string locale ();
		public abstract Vda.Connection connection { get; set; }
	}
	/**
	 * A text string value, representing a user's name
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueName : GLib.Object, Vda.SqlValue, Vda.SqlValueString {
	}
	/**
	 * Null representation of a value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueNull : GLib.Object, Vda.SqlValue {
	}
	/**
	 * A value representing a real number with variable precision
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueNumeric : GLib.Object, Vda.SqlValue {
		public abstract string format (string str);
		public abstract double get_double ();
		public abstract double get_imaginary ();
		public abstract int get_precision ();
		public abstract double get_real ();
		public abstract void set_precision (int p);
	}
	/**
	 * A value representing an Integer for database object identification
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueOid : GLib.Object, Vda.SqlValue, Vda.SqlValueInteger {
	}
	/**
	 * A string value
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueString : GLib.Object, Vda.SqlValue {
	}
	/**
	 * A text string value, as a long or undefined length string
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueText : GLib.Object, Vda.SqlValue, Vda.SqlValueString {
	}
	/**
	 * Value representing a time with time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTime : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestamp {
	}
	/**
	 * Value representing a time without time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimeNtz : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestampNtz {
	}
	/**
	 * Value representing a timestamp with time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimestamp : GLib.Object, Vda.SqlValue {
		public abstract string format_local ();
		public abstract string format_locale ();
		public abstract string format_utc ();
		public abstract GLib.DateTime get_timestamp ();
		public abstract void set_timestamp (GLib.DateTime ts);
	}
	/**
	 * Value representing a timestamp without time zone
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface SqlValueTimestampNtz : GLib.Object, Vda.SqlValue, Vda.SqlValueTimestamp {
	}
	/**
	 * Set parameters for a prepared query.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface Stringifiable : GLib.Object {
		public abstract string to_string ();
	}
	/**
	 * A result from a select query representing a table with
	 * rows and columns, as a {@link GLib.ListModel} of {@link RowModel} objects.
	 */
	[CCode (cheader_filename = "vda.h")]
	public interface TableModel : GLib.Object, GLib.ListModel, Vda.Result {
	}
	/**
	 * Connection errors
	 */
	[CCode (cheader_filename = "vda.h")]
	public errordomain ConnectionError {
		NO_DATABASE_NAME_ERROR,
		SERVER_ERROR,
		QUERY_CREATION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain DataCollectionError {
		INVALID_PROPERTY_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain DataObjectError {
		SELECT_ERROR,
		INSERT_ERROR,
		DELETE_ERROR,
		UPDATE_ERROR,
		PARAMETERS_ERROR,
		NO_CONNECTION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain MetaObjectError {
		APPEND,
		UPDATE,
		SAVE,
		DROP
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain ParserError {
		INVALID_TOKEN_ERROR,
		INVALID_EXPRESSION_ERROR
	}
	/**
	 * Query execution errors
	 */
	[CCode (cheader_filename = "vda.h")]
	public errordomain QueryError {
		INVALID_QUERY_ERROR,
		INVALID_CONNECTION_ERROR,
		GENERAL_ERROR
	}
	/**
	 * Connection errors
	 */
	[CCode (cheader_filename = "vda.h")]
	public errordomain RoleError {
		PROVILAGE_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain RowModelError {
		INVALID_COLUMN_NAME_ERROR,
		INVALID_COLUMN_NUMBER_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlCommandError {
		INVALID_STRUCTURE_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlExpressionError {
		INVALID_EXPRESSION_ERROR
	}
	[CCode (cheader_filename = "vda.h")]
	public errordomain SqlSelectCommandError {
		INVALID_FIELDS_ERROR
	}
}

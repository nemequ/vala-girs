/* libadwaita-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Adw", gir_namespace = "Adw", gir_version = "1", lower_case_cprefix = "adw_")]
namespace Adw {
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_about_window_get_type ()")]
	[Version (since = "1.2")]
	public sealed class AboutWindow : Adw.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AboutWindow ();
		public void add_acknowledgement_section (string? name, [CCode (array_length = false, array_null_terminated = true)] string[] people);
		public void add_credit_section (string? name, [CCode (array_length = false, array_null_terminated = true)] string[] people);
		public void add_legal_section (string title, string? copyright, Gtk.License license_type, string? license);
		public void add_link (string title, string url);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.4")]
		public AboutWindow.from_appdata (string resource_path, string? release_notes_version);
		public unowned string get_application_icon ();
		public unowned string get_application_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_artists ();
		public unowned string get_comments ();
		public unowned string get_copyright ();
		public unowned string get_debug_info ();
		public unowned string get_debug_info_filename ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_designers ();
		public unowned string get_developer_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_developers ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_documenters ();
		public unowned string get_issue_url ();
		public unowned string get_license ();
		public Gtk.License get_license_type ();
		public unowned string get_release_notes ();
		public unowned string get_release_notes_version ();
		public unowned string get_support_url ();
		public unowned string get_translator_credits ();
		public unowned string get_version ();
		public unowned string get_website ();
		public void set_application_icon (string application_icon);
		public void set_application_name (string application_name);
		public void set_artists ([CCode (array_length = false, array_null_terminated = true)] string[]? artists);
		public void set_comments (string comments);
		public void set_copyright (string copyright);
		public void set_debug_info (string debug_info);
		public void set_debug_info_filename (string filename);
		public void set_designers ([CCode (array_length = false, array_null_terminated = true)] string[]? designers);
		public void set_developer_name (string developer_name);
		public void set_developers ([CCode (array_length = false, array_null_terminated = true)] string[]? developers);
		public void set_documenters ([CCode (array_length = false, array_null_terminated = true)] string[]? documenters);
		public void set_issue_url (string issue_url);
		public void set_license (string license);
		public void set_license_type (Gtk.License license_type);
		public void set_release_notes (string release_notes);
		public void set_release_notes_version (string version);
		public void set_support_url (string support_url);
		public void set_translator_credits (string translator_credits);
		public void set_version (string version);
		public void set_website (string website);
		public string application_icon { get; set; }
		public string application_name { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] artists { get; set; }
		public string comments { get; set; }
		public string copyright { get; set; }
		public string debug_info { get; set; }
		public string debug_info_filename { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] designers { get; set; }
		public string developer_name { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] developers { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] documenters { get; set; }
		public string issue_url { get; set; }
		public string license { get; set; }
		public Gtk.License license_type { get; set; }
		public string release_notes { get; set; }
		public string release_notes_version { get; set; }
		public string support_url { get; set; }
		public string translator_credits { get; set; }
		public string version { get; set; }
		public string website { get; set; }
		public signal bool activate_link (string uri);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_action_row_get_type ()")]
	public class ActionRow : Adw.PreferencesRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ActionRow ();
		public virtual void activate ();
		public void add_prefix (Gtk.Widget widget);
		public void add_suffix (Gtk.Widget widget);
		public unowned Gtk.Widget? get_activatable_widget ();
		[Version (deprecated = true, deprecated_since = "1.3")]
		public unowned string? get_icon_name ();
		public unowned string? get_subtitle ();
		public int get_subtitle_lines ();
		[Version (since = "1.3")]
		public bool get_subtitle_selectable ();
		public int get_title_lines ();
		public void remove (Gtk.Widget widget);
		public void set_activatable_widget (Gtk.Widget? widget);
		[Version (deprecated = true, deprecated_since = "1.3")]
		public void set_icon_name (string? icon_name);
		public void set_subtitle (string subtitle);
		public void set_subtitle_lines (int subtitle_lines);
		[Version (since = "1.3")]
		public void set_subtitle_selectable (bool subtitle_selectable);
		public void set_title_lines (int title_lines);
		public Gtk.Widget activatable_widget { get; set; }
		[Version (deprecated = true, deprecated_since = "1.3")]
		public string icon_name { get; set; }
		public string subtitle { get; set; }
		public int subtitle_lines { get; set; }
		[Version (since = "1.3")]
		public bool subtitle_selectable { get; set; }
		public int title_lines { get; set; }
		public signal void activated ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_animation_get_type ()")]
	public abstract class Animation : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Animation ();
		[Version (since = "1.3")]
		public bool get_follow_enable_animations_setting ();
		public Adw.AnimationState get_state ();
		public unowned Adw.AnimationTarget get_target ();
		public double get_value ();
		public unowned Gtk.Widget get_widget ();
		public void pause ();
		public void play ();
		public void reset ();
		public void resume ();
		[Version (since = "1.3")]
		public void set_follow_enable_animations_setting (bool setting);
		public void set_target (Adw.AnimationTarget target);
		public void skip ();
		[Version (since = "1.3")]
		public bool follow_enable_animations_setting { get; set; }
		public Adw.AnimationState state { get; }
		public Adw.AnimationTarget target { get; set construct; }
		public double value { get; }
		public Gtk.Widget widget { get; construct; }
		public signal void done ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_animation_target_get_type ()")]
	public abstract class AnimationTarget : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AnimationTarget ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_application_get_type ()")]
	public class Application : Gtk.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		public Application (string? application_id, GLib.ApplicationFlags flags);
		public unowned Adw.StyleManager get_style_manager ();
		public Adw.StyleManager style_manager { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_application_window_get_type ()")]
	public class ApplicationWindow : Gtk.ApplicationWindow, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ApplicationWindow (Gtk.Application app);
		[Version (since = "1.4")]
		public void add_breakpoint (owned Adw.Breakpoint breakpoint);
		public unowned Gtk.Widget? get_content ();
		[Version (since = "1.4")]
		public unowned Adw.Breakpoint? get_current_breakpoint ();
		public void set_content (Gtk.Widget? content);
		public Gtk.Widget content { get; set; }
		[Version (since = "1.4")]
		public Adw.Breakpoint current_breakpoint { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_avatar_get_type ()")]
	public sealed class Avatar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Avatar (int size, string? text, bool show_initials);
		public Gdk.Texture draw_to_texture (int scale_factor);
		public unowned Gdk.Paintable? get_custom_image ();
		public unowned string? get_icon_name ();
		public bool get_show_initials ();
		public int get_size ();
		public unowned string? get_text ();
		public void set_custom_image (Gdk.Paintable? custom_image);
		public void set_icon_name (string? icon_name);
		public void set_show_initials (bool show_initials);
		public void set_size (int size);
		public void set_text (string? text);
		public Gdk.Paintable custom_image { get; set; }
		public string icon_name { get; set; }
		public bool show_initials { get; set; }
		public int size { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_banner_get_type ()")]
	[Version (since = "1.3")]
	public sealed class Banner : Gtk.Widget, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Banner (string title);
		public unowned string? get_button_label ();
		public bool get_revealed ();
		public unowned string get_title ();
		public bool get_use_markup ();
		public void set_button_label (string? label);
		public void set_revealed (bool revealed);
		public void set_title (string title);
		public void set_use_markup (bool use_markup);
		public string button_label { get; set; }
		public bool revealed { get; set; }
		public string title { get; set; }
		public bool use_markup { get; set; }
		public signal void button_clicked ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_bin_get_type ()")]
	public class Bin : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Bin ();
		public unowned Gtk.Widget? get_child ();
		public void set_child (Gtk.Widget? child);
		public Gtk.Widget child { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_breakpoint_get_type ()")]
	[Version (since = "1.4")]
	public sealed class Breakpoint : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public Breakpoint (owned Adw.BreakpointCondition condition);
		public void add_setter (GLib.Object object, string property, GLib.Value value);
		public void add_setters (GLib.Object first_object, ...);
		public void add_setters_valist (GLib.Object first_object, string first_property, va_list args);
		public void add_settersv ([CCode (array_length_cname = "n_setters", array_length_pos = 0.5)] GLib.Object[] objects, [CCode (array_length_cname = "n_setters", array_length_pos = 0.5)] string[] names, [CCode (array_length_cname = "n_setters", array_length_pos = 0.5)] GLib.Value[] values);
		public unowned Adw.BreakpointCondition? get_condition ();
		public void set_condition (Adw.BreakpointCondition? condition);
		public Adw.BreakpointCondition condition { get; set; }
		public signal void apply ();
		public signal void unapply ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_breakpoint_bin_get_type ()")]
	[Version (since = "1.4")]
	public class BreakpointBin : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public BreakpointBin ();
		public void add_breakpoint (owned Adw.Breakpoint breakpoint);
		public unowned Gtk.Widget? get_child ();
		public unowned Adw.Breakpoint? get_current_breakpoint ();
		public void set_child (Gtk.Widget? child);
		public Gtk.Widget child { get; set; }
		public Adw.Breakpoint current_breakpoint { get; }
	}
	[CCode (cheader_filename = "adwaita.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "adw_breakpoint_condition_get_type ()")]
	[Compact]
	[Version (since = "1.4")]
	public class BreakpointCondition {
		[CCode (has_construct_function = false)]
		public BreakpointCondition.and (owned Adw.BreakpointCondition condition_1, owned Adw.BreakpointCondition condition_2);
		public Adw.BreakpointCondition copy ();
		public void free ();
		[CCode (has_construct_function = false)]
		public BreakpointCondition.length (Adw.BreakpointConditionLengthType type, double value, Adw.LengthUnit unit);
		[CCode (has_construct_function = false)]
		public BreakpointCondition.or (owned Adw.BreakpointCondition condition_1, owned Adw.BreakpointCondition condition_2);
		public static Adw.BreakpointCondition parse (string str);
		[CCode (has_construct_function = false)]
		public BreakpointCondition.ratio (Adw.BreakpointConditionRatioType type, int width, int height);
		public string to_string ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_button_content_get_type ()")]
	public sealed class ButtonContent : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ButtonContent ();
		[Version (since = "1.4")]
		public bool get_can_shrink ();
		public unowned string get_icon_name ();
		public unowned string get_label ();
		public bool get_use_underline ();
		[Version (since = "1.4")]
		public void set_can_shrink (bool can_shrink);
		public void set_icon_name (string icon_name);
		public void set_label (string label);
		public void set_use_underline (bool use_underline);
		[Version (since = "1.4")]
		public bool can_shrink { get; set; }
		public string icon_name { get; set; }
		public string label { get; set; }
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_callback_animation_target_get_type ()")]
	public sealed class CallbackAnimationTarget : Adw.AnimationTarget {
		[CCode (has_construct_function = false, type = "AdwAnimationTarget*")]
		public CallbackAnimationTarget (owned Adw.AnimationTargetFunc callback);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_get_type ()")]
	public sealed class Carousel : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Carousel ();
		public void append (Gtk.Widget child);
		public bool get_allow_long_swipes ();
		public bool get_allow_mouse_drag ();
		public bool get_allow_scroll_wheel ();
		public bool get_interactive ();
		public uint get_n_pages ();
		public unowned Gtk.Widget get_nth_page (uint n);
		public double get_position ();
		public uint get_reveal_duration ();
		public Adw.SpringParams get_scroll_params ();
		public uint get_spacing ();
		public void insert (Gtk.Widget child, int position);
		public void prepend (Gtk.Widget child);
		public void remove (Gtk.Widget child);
		public void reorder (Gtk.Widget child, int position);
		public void scroll_to (Gtk.Widget widget, bool animate);
		public void set_allow_long_swipes (bool allow_long_swipes);
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		public void set_allow_scroll_wheel (bool allow_scroll_wheel);
		public void set_interactive (bool interactive);
		public void set_reveal_duration (uint reveal_duration);
		public void set_scroll_params (Adw.SpringParams @params);
		public void set_spacing (uint spacing);
		public bool allow_long_swipes { get; set; }
		public bool allow_mouse_drag { get; set; }
		public bool allow_scroll_wheel { get; set; }
		public bool interactive { get; set; }
		public uint n_pages { get; }
		public double position { get; }
		public uint reveal_duration { get; set; }
		public Adw.SpringParams scroll_params { owned get; set; }
		public uint spacing { get; set; }
		public signal void page_changed (uint index);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_indicator_dots_get_type ()")]
	public sealed class CarouselIndicatorDots : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CarouselIndicatorDots ();
		public unowned Adw.Carousel? get_carousel ();
		public void set_carousel (Adw.Carousel? carousel);
		public Adw.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_carousel_indicator_lines_get_type ()")]
	public sealed class CarouselIndicatorLines : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CarouselIndicatorLines ();
		public unowned Adw.Carousel? get_carousel ();
		public void set_carousel (Adw.Carousel? carousel);
		public Adw.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_get_type ()")]
	public sealed class Clamp : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Clamp ();
		public unowned Gtk.Widget? get_child ();
		public int get_maximum_size ();
		public int get_tightening_threshold ();
		[Version (since = "1.4")]
		public Adw.LengthUnit get_unit ();
		public void set_child (Gtk.Widget? child);
		public void set_maximum_size (int maximum_size);
		public void set_tightening_threshold (int tightening_threshold);
		[Version (since = "1.4")]
		public void set_unit (Adw.LengthUnit unit);
		public Gtk.Widget child { get; set; }
		public int maximum_size { get; set; }
		public int tightening_threshold { get; set; }
		[Version (since = "1.4")]
		public Adw.LengthUnit unit { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_layout_get_type ()")]
	public sealed class ClampLayout : Gtk.LayoutManager, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkLayoutManager*")]
		public ClampLayout ();
		public int get_maximum_size ();
		public int get_tightening_threshold ();
		[Version (since = "1.4")]
		public Adw.LengthUnit get_unit ();
		public void set_maximum_size (int maximum_size);
		public void set_tightening_threshold (int tightening_threshold);
		[Version (since = "1.4")]
		public void set_unit (Adw.LengthUnit unit);
		public int maximum_size { get; set; }
		public int tightening_threshold { get; set; }
		[Version (since = "1.4")]
		public Adw.LengthUnit unit { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_clamp_scrollable_get_type ()")]
	public sealed class ClampScrollable : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ClampScrollable ();
		public unowned Gtk.Widget? get_child ();
		public int get_maximum_size ();
		public int get_tightening_threshold ();
		[Version (since = "1.4")]
		public Adw.LengthUnit get_unit ();
		public void set_child (Gtk.Widget? child);
		public void set_maximum_size (int maximum_size);
		public void set_tightening_threshold (int tightening_threshold);
		[Version (since = "1.4")]
		public void set_unit (Adw.LengthUnit unit);
		public Gtk.Widget child { get; set; }
		public int maximum_size { get; set; }
		public int tightening_threshold { get; set; }
		[Version (since = "1.4")]
		public Adw.LengthUnit unit { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_combo_row_get_type ()")]
	public class ComboRow : Adw.ActionRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboRow ();
		[Version (since = "1.4")]
		public bool get_enable_search ();
		public unowned Gtk.Expression? get_expression ();
		public unowned Gtk.ListItemFactory? get_factory ();
		public unowned Gtk.ListItemFactory? get_list_factory ();
		public unowned GLib.ListModel? get_model ();
		public uint get_selected ();
		public unowned GLib.Object? get_selected_item ();
		public bool get_use_subtitle ();
		[Version (since = "1.4")]
		public void set_enable_search (bool enable_search);
		public void set_expression (Gtk.Expression? expression);
		public void set_factory (Gtk.ListItemFactory? factory);
		public void set_list_factory (Gtk.ListItemFactory? factory);
		public void set_model (GLib.ListModel? model);
		public void set_selected (uint position);
		public void set_use_subtitle (bool use_subtitle);
		[Version (since = "1.4")]
		public bool enable_search { get; set; }
		public Gtk.Expression expression { get; set; }
		public Gtk.ListItemFactory factory { get; set; }
		public Gtk.ListItemFactory list_factory { get; set; }
		public GLib.ListModel model { get; set; }
		public uint selected { get; set; }
		public GLib.Object selected_item { get; }
		public bool use_subtitle { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_entry_row_get_type ()")]
	[Version (since = "1.2")]
	public class EntryRow : Adw.PreferencesRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryRow ();
		public void add_prefix (Gtk.Widget widget);
		public void add_suffix (Gtk.Widget widget);
		public bool get_activates_default ();
		public Pango.AttrList? get_attributes ();
		public bool get_enable_emoji_completion ();
		public Gtk.InputHints get_input_hints ();
		public Gtk.InputPurpose get_input_purpose ();
		public bool get_show_apply_button ();
		[Version (since = "1.3")]
		public bool grab_focus_without_selecting ();
		public void remove (Gtk.Widget widget);
		public void set_activates_default (bool activates);
		public void set_attributes (Pango.AttrList? attributes);
		public void set_enable_emoji_completion (bool enable_emoji_completion);
		public void set_input_hints (Gtk.InputHints hints);
		public void set_input_purpose (Gtk.InputPurpose purpose);
		public void set_show_apply_button (bool show_apply_button);
		public bool activates_default { get; set; }
		public Pango.AttrList attributes { owned get; set; }
		public bool enable_emoji_completion { get; set; }
		public Gtk.InputHints input_hints { get; set; }
		public Gtk.InputPurpose input_purpose { get; set; }
		public bool show_apply_button { get; set; }
		public signal void apply ();
		public signal void entry_activated ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_enum_list_item_get_type ()")]
	public sealed class EnumListItem : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EnumListItem ();
		public unowned string get_name ();
		public unowned string get_nick ();
		public int get_value ();
		public string name { get; }
		public string nick { get; }
		public int value { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_enum_list_model_get_type ()")]
	public sealed class EnumListModel : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public EnumListModel (GLib.Type enum_type);
		public uint find_position (int value);
		public GLib.Type get_enum_type ();
		public GLib.Type enum_type { get; construct; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_expander_row_get_type ()")]
	public class ExpanderRow : Adw.PreferencesRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ExpanderRow ();
		[Version (deprecated = true, deprecated_since = "1.4")]
		public void add_action (Gtk.Widget widget);
		public void add_prefix (Gtk.Widget widget);
		public void add_row (Gtk.Widget child);
		[Version (since = "1.4")]
		public void add_suffix (Gtk.Widget widget);
		public bool get_enable_expansion ();
		public bool get_expanded ();
		[Version (deprecated = true, deprecated_since = "1.3")]
		public unowned string? get_icon_name ();
		public bool get_show_enable_switch ();
		public unowned string get_subtitle ();
		[Version (since = "1.3")]
		public bool get_subtitle_lines ();
		[Version (since = "1.3")]
		public bool get_title_lines ();
		public void remove (Gtk.Widget child);
		public void set_enable_expansion (bool enable_expansion);
		public void set_expanded (bool expanded);
		[Version (deprecated = true, deprecated_since = "1.3")]
		public void set_icon_name (string? icon_name);
		public void set_show_enable_switch (bool show_enable_switch);
		public void set_subtitle (string subtitle);
		[Version (since = "1.3")]
		public void set_subtitle_lines (int subtitle_lines);
		[Version (since = "1.3")]
		public void set_title_lines (int title_lines);
		public bool enable_expansion { get; set; }
		public bool expanded { get; set; }
		[Version (deprecated = true, deprecated_since = "1.3")]
		public string icon_name { get; set; }
		public bool show_enable_switch { get; set; }
		public string subtitle { get; set; }
		[Version (since = "1.3")]
		public int subtitle_lines { get; set; }
		[Version (since = "1.3")]
		public int title_lines { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_flap_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class Flap : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Flap ();
		public unowned Gtk.Widget? get_content ();
		public unowned Gtk.Widget? get_flap ();
		public Gtk.PackType get_flap_position ();
		public uint get_fold_duration ();
		public Adw.FlapFoldPolicy get_fold_policy ();
		public Adw.FoldThresholdPolicy get_fold_threshold_policy ();
		public bool get_folded ();
		public bool get_locked ();
		public bool get_modal ();
		public bool get_reveal_flap ();
		public Adw.SpringParams get_reveal_params ();
		public double get_reveal_progress ();
		public unowned Gtk.Widget? get_separator ();
		public bool get_swipe_to_close ();
		public bool get_swipe_to_open ();
		public Adw.FlapTransitionType get_transition_type ();
		public void set_content (Gtk.Widget? content);
		public void set_flap (Gtk.Widget? flap);
		public void set_flap_position (Gtk.PackType position);
		public void set_fold_duration (uint duration);
		public void set_fold_policy (Adw.FlapFoldPolicy policy);
		public void set_fold_threshold_policy (Adw.FoldThresholdPolicy policy);
		public void set_locked (bool locked);
		public void set_modal (bool modal);
		public void set_reveal_flap (bool reveal_flap);
		public void set_reveal_params (Adw.SpringParams @params);
		public void set_separator (Gtk.Widget? separator);
		public void set_swipe_to_close (bool swipe_to_close);
		public void set_swipe_to_open (bool swipe_to_open);
		public void set_transition_type (Adw.FlapTransitionType transition_type);
		public Gtk.Widget content { get; set; }
		public Gtk.Widget flap { get; set; }
		public Gtk.PackType flap_position { get; set; }
		public uint fold_duration { get; set; }
		public Adw.FlapFoldPolicy fold_policy { get; set; }
		public Adw.FoldThresholdPolicy fold_threshold_policy { get; set; }
		public bool folded { get; }
		public bool locked { get; set; }
		public bool modal { get; set; }
		public bool reveal_flap { get; set; }
		public Adw.SpringParams reveal_params { owned get; set; }
		public double reveal_progress { get; }
		public Gtk.Widget separator { get; set; }
		public bool swipe_to_close { get; set; }
		public bool swipe_to_open { get; set; }
		public Adw.FlapTransitionType transition_type { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_header_bar_get_type ()")]
	public sealed class HeaderBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderBar ();
		public Adw.CenteringPolicy get_centering_policy ();
		public unowned string? get_decoration_layout ();
		[Version (since = "1.4")]
		public bool get_show_back_button ();
		public bool get_show_end_title_buttons ();
		public bool get_show_start_title_buttons ();
		[Version (since = "1.4")]
		public bool get_show_title ();
		public unowned Gtk.Widget? get_title_widget ();
		public void pack_end (Gtk.Widget child);
		public void pack_start (Gtk.Widget child);
		public void remove (Gtk.Widget child);
		public void set_centering_policy (Adw.CenteringPolicy centering_policy);
		public void set_decoration_layout (string? layout);
		[Version (since = "1.4")]
		public void set_show_back_button (bool show_back_button);
		public void set_show_end_title_buttons (bool setting);
		public void set_show_start_title_buttons (bool setting);
		[Version (since = "1.4")]
		public void set_show_title (bool show_title);
		public void set_title_widget (Gtk.Widget? title_widget);
		public Adw.CenteringPolicy centering_policy { get; set; }
		public string decoration_layout { get; set; }
		[Version (since = "1.4")]
		public bool show_back_button { get; set; }
		public bool show_end_title_buttons { get; set; }
		public bool show_start_title_buttons { get; set; }
		[Version (since = "1.4")]
		public bool show_title { get; set; }
		public Gtk.Widget title_widget { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_leaflet_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class Leaflet : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Leaflet ();
		public unowned Adw.LeafletPage append (Gtk.Widget child);
		public unowned Gtk.Widget? get_adjacent_child (Adw.NavigationDirection direction);
		public bool get_can_navigate_back ();
		public bool get_can_navigate_forward ();
		public bool get_can_unfold ();
		public unowned Gtk.Widget? get_child_by_name (string name);
		public Adw.SpringParams get_child_transition_params ();
		public bool get_child_transition_running ();
		public Adw.FoldThresholdPolicy get_fold_threshold_policy ();
		public bool get_folded ();
		public bool get_homogeneous ();
		public uint get_mode_transition_duration ();
		public unowned Adw.LeafletPage get_page (Gtk.Widget child);
		public Gtk.SelectionModel get_pages ();
		public Adw.LeafletTransitionType get_transition_type ();
		public unowned Gtk.Widget? get_visible_child ();
		public unowned string? get_visible_child_name ();
		public unowned Adw.LeafletPage insert_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		public bool navigate (Adw.NavigationDirection direction);
		public unowned Adw.LeafletPage prepend (Gtk.Widget child);
		public void remove (Gtk.Widget child);
		public void reorder_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		public void set_can_navigate_back (bool can_navigate_back);
		public void set_can_navigate_forward (bool can_navigate_forward);
		public void set_can_unfold (bool can_unfold);
		public void set_child_transition_params (Adw.SpringParams @params);
		public void set_fold_threshold_policy (Adw.FoldThresholdPolicy policy);
		public void set_homogeneous (bool homogeneous);
		public void set_mode_transition_duration (uint duration);
		public void set_transition_type (Adw.LeafletTransitionType transition);
		public void set_visible_child (Gtk.Widget visible_child);
		public void set_visible_child_name (string name);
		public bool can_navigate_back { get; set; }
		public bool can_navigate_forward { get; set; }
		public bool can_unfold { get; set; }
		public Adw.SpringParams child_transition_params { owned get; set; }
		public bool child_transition_running { get; }
		public Adw.FoldThresholdPolicy fold_threshold_policy { get; set; }
		public bool folded { get; }
		public bool homogeneous { get; set; }
		public uint mode_transition_duration { get; set; }
		public Gtk.SelectionModel pages { owned get; }
		public Adw.LeafletTransitionType transition_type { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_leaflet_page_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class LeafletPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected LeafletPage ();
		public unowned Gtk.Widget get_child ();
		public unowned string? get_name ();
		public bool get_navigatable ();
		public void set_name (string? name);
		public void set_navigatable (bool navigatable);
		public Gtk.Widget child { get; construct; }
		public string name { get; set; }
		public bool navigatable { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_message_dialog_get_type ()")]
	[Version (since = "1.2")]
	public class MessageDialog : Gtk.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MessageDialog (Gtk.Window? parent, string? heading, string? body);
		public void add_response (string id, string label);
		public void add_responses (...);
		[DestroysInstance]
		[Version (since = "1.3")]
		public async unowned string choose (GLib.Cancellable? cancellable);
		[PrintfFormat]
		public void format_body (string format, ...);
		[PrintfFormat]
		public void format_body_markup (string format, ...);
		[PrintfFormat]
		public void format_heading (string format, ...);
		[PrintfFormat]
		public void format_heading_markup (string format, ...);
		public unowned string get_body ();
		public bool get_body_use_markup ();
		public unowned string get_close_response ();
		public unowned string? get_default_response ();
		public unowned Gtk.Widget? get_extra_child ();
		public unowned string? get_heading ();
		public bool get_heading_use_markup ();
		public Adw.ResponseAppearance get_response_appearance (string response);
		public bool get_response_enabled (string response);
		public unowned string get_response_label (string response);
		public bool has_response (string response);
		public void set_body (string body);
		public void set_body_use_markup (bool use_markup);
		public void set_close_response (string response);
		public void set_default_response (string? response);
		public void set_extra_child (Gtk.Widget? child);
		public void set_heading (string? heading);
		public void set_heading_use_markup (bool use_markup);
		public void set_response_appearance (string response, Adw.ResponseAppearance appearance);
		public void set_response_enabled (string response, bool enabled);
		public void set_response_label (string response, string label);
		public string body { get; set; }
		public bool body_use_markup { get; set; }
		public string close_response { get; set; }
		public string default_response { get; set; }
		public Gtk.Widget extra_child { get; set; }
		public string heading { get; set; }
		public bool heading_use_markup { get; set; }
		[HasEmitter]
		public virtual signal void response (string response);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_navigation_page_get_type ()")]
	[Version (since = "1.4")]
	public class NavigationPage : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public NavigationPage (Gtk.Widget child, string title);
		public bool get_can_pop ();
		public unowned Gtk.Widget? get_child ();
		public unowned string? get_tag ();
		public unowned string get_title ();
		public void set_can_pop (bool can_pop);
		public void set_child (Gtk.Widget? child);
		public void set_tag (string? tag);
		public void set_title (string title);
		[CCode (has_construct_function = false)]
		public NavigationPage.with_tag (Gtk.Widget child, string title, string tag);
		public bool can_pop { get; set; }
		public Gtk.Widget child { get; set; }
		public string tag { get; set; }
		public string title { get; set; }
		public virtual signal void hidden ();
		public virtual signal void hiding ();
		public virtual signal void showing ();
		public virtual signal void shown ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_navigation_split_view_get_type ()")]
	[Version (since = "1.4")]
	public sealed class NavigationSplitView : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public NavigationSplitView ();
		public bool get_collapsed ();
		public unowned Adw.NavigationPage? get_content ();
		public double get_max_sidebar_width ();
		public double get_min_sidebar_width ();
		public bool get_show_content ();
		public unowned Adw.NavigationPage? get_sidebar ();
		public double get_sidebar_width_fraction ();
		public Adw.LengthUnit get_sidebar_width_unit ();
		public void set_collapsed (bool collapsed);
		public void set_content (Adw.NavigationPage? content);
		public void set_max_sidebar_width (double width);
		public void set_min_sidebar_width (double width);
		public void set_show_content (bool show_content);
		public void set_sidebar (Adw.NavigationPage? sidebar);
		public void set_sidebar_width_fraction (double fraction);
		public void set_sidebar_width_unit (Adw.LengthUnit unit);
		public bool collapsed { get; set; }
		public Adw.NavigationPage content { get; set; }
		public double max_sidebar_width { get; set; }
		public double min_sidebar_width { get; set; }
		public bool show_content { get; set; }
		public Adw.NavigationPage sidebar { get; set; }
		public double sidebar_width_fraction { get; set; }
		public Adw.LengthUnit sidebar_width_unit { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_navigation_view_get_type ()")]
	[Version (since = "1.4")]
	public sealed class NavigationView : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public NavigationView ();
		public void add (Adw.NavigationPage page);
		public unowned Adw.NavigationPage? find_page (string tag);
		public bool get_animate_transitions ();
		public GLib.ListModel get_navigation_stack ();
		public bool get_pop_on_escape ();
		public unowned Adw.NavigationPage? get_previous_page (Adw.NavigationPage page);
		public unowned Adw.NavigationPage? get_visible_page ();
		public bool pop ();
		public bool pop_to_page (Adw.NavigationPage page);
		public bool pop_to_tag (string tag);
		public void push (Adw.NavigationPage page);
		public void push_by_tag (string tag);
		public void remove (Adw.NavigationPage page);
		public void replace ([CCode (array_length_cname = "n_pages", array_length_pos = 1.1)] Adw.NavigationPage[] pages);
		public void replace_with_tags ([CCode (array_length_cname = "n_tags", array_length_pos = 1.1)] string[] tags);
		public void set_animate_transitions (bool animate_transitions);
		public void set_pop_on_escape (bool pop_on_escape);
		public bool animate_transitions { get; set; }
		public GLib.ListModel navigation_stack { owned get; }
		public bool pop_on_escape { get; set; }
		public Adw.NavigationPage visible_page { get; }
		public signal Adw.NavigationPage? get_next_page ();
		public signal void popped (Adw.NavigationPage page);
		public signal void pushed ();
		public signal void replaced ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_overlay_split_view_get_type ()")]
	[Version (since = "1.4")]
	public sealed class OverlaySplitView : Gtk.Widget, Adw.Swipeable, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public OverlaySplitView ();
		public bool get_collapsed ();
		public unowned Gtk.Widget? get_content ();
		public bool get_enable_hide_gesture ();
		public bool get_enable_show_gesture ();
		public double get_max_sidebar_width ();
		public double get_min_sidebar_width ();
		public bool get_pin_sidebar ();
		public bool get_show_sidebar ();
		public unowned Gtk.Widget? get_sidebar ();
		public Gtk.PackType get_sidebar_position ();
		public double get_sidebar_width_fraction ();
		public Adw.LengthUnit get_sidebar_width_unit ();
		public void set_collapsed (bool collapsed);
		public void set_content (Gtk.Widget? content);
		public void set_enable_hide_gesture (bool enable_hide_gesture);
		public void set_enable_show_gesture (bool enable_show_gesture);
		public void set_max_sidebar_width (double width);
		public void set_min_sidebar_width (double width);
		public void set_pin_sidebar (bool pin_sidebar);
		public void set_show_sidebar (bool show_sidebar);
		public void set_sidebar (Gtk.Widget? sidebar);
		public void set_sidebar_position (Gtk.PackType position);
		public void set_sidebar_width_fraction (double fraction);
		public void set_sidebar_width_unit (Adw.LengthUnit unit);
		public bool collapsed { get; set; }
		public Gtk.Widget content { get; set; }
		public bool enable_hide_gesture { get; set; }
		public bool enable_show_gesture { get; set; }
		public double max_sidebar_width { get; set; }
		public double min_sidebar_width { get; set; }
		public bool pin_sidebar { get; set; }
		public bool show_sidebar { get; set; }
		public Gtk.Widget sidebar { get; set; }
		public Gtk.PackType sidebar_position { get; set; }
		public double sidebar_width_fraction { get; set; }
		public Adw.LengthUnit sidebar_width_unit { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_password_entry_row_get_type ()")]
	[Version (since = "1.2")]
	public sealed class PasswordEntryRow : Adw.EntryRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PasswordEntryRow ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_group_get_type ()")]
	public class PreferencesGroup : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PreferencesGroup ();
		public void add (Gtk.Widget child);
		public unowned string? get_description ();
		[Version (since = "1.1")]
		public unowned Gtk.Widget? get_header_suffix ();
		public unowned string get_title ();
		public void remove (Gtk.Widget child);
		public void set_description (string? description);
		[Version (since = "1.1")]
		public void set_header_suffix (Gtk.Widget? suffix);
		public void set_title (string title);
		public string description { get; set; }
		[Version (since = "1.1")]
		public Gtk.Widget header_suffix { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_page_get_type ()")]
	public class PreferencesPage : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PreferencesPage ();
		public void add (Adw.PreferencesGroup group);
		[Version (since = "1.4")]
		public unowned string get_description ();
		public unowned string? get_icon_name ();
		public unowned string? get_name ();
		public unowned string get_title ();
		public bool get_use_underline ();
		public void remove (Adw.PreferencesGroup group);
		[Version (since = "1.3")]
		public void scroll_to_top ();
		[Version (since = "1.4")]
		public void set_description (string description);
		public void set_icon_name (string? icon_name);
		public void set_name (string? name);
		public void set_title (string title);
		public void set_use_underline (bool use_underline);
		[Version (since = "1.4")]
		public string description { get; set; }
		public string icon_name { get; set; }
		public string name { get; set; }
		public string title { get; set; }
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_row_get_type ()")]
	public class PreferencesRow : Gtk.ListBoxRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PreferencesRow ();
		public unowned string get_title ();
		[Version (since = "1.1")]
		public bool get_title_selectable ();
		[Version (since = "1.2")]
		public bool get_use_markup ();
		public bool get_use_underline ();
		public void set_title (string title);
		[Version (since = "1.1")]
		public void set_title_selectable (bool title_selectable);
		[Version (since = "1.2")]
		public void set_use_markup (bool use_markup);
		public void set_use_underline (bool use_underline);
		public string title { get; set; }
		[Version (since = "1.1")]
		public bool title_selectable { get; set; }
		[Version (since = "1.2")]
		public bool use_markup { get; set; }
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_preferences_window_get_type ()")]
	public class PreferencesWindow : Adw.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PreferencesWindow ();
		public void add (Adw.PreferencesPage page);
		public void add_toast (owned Adw.Toast toast);
		[Version (deprecated = true, deprecated_since = "1.4")]
		public void close_subpage ();
		[Version (deprecated = true, deprecated_since = "1.4")]
		public bool get_can_navigate_back ();
		public bool get_search_enabled ();
		public unowned Adw.PreferencesPage? get_visible_page ();
		public unowned string? get_visible_page_name ();
		[Version (since = "1.4")]
		public bool pop_subpage ();
		[Version (deprecated = true, deprecated_since = "1.4")]
		public void present_subpage (Gtk.Widget subpage);
		[Version (since = "1.4")]
		public void push_subpage (Adw.NavigationPage page);
		public void remove (Adw.PreferencesPage page);
		[Version (deprecated = true, deprecated_since = "1.4")]
		public void set_can_navigate_back (bool can_navigate_back);
		public void set_search_enabled (bool search_enabled);
		public void set_visible_page (Adw.PreferencesPage page);
		public void set_visible_page_name (string name);
		[Version (deprecated = true, deprecated_since = "1.4")]
		public bool can_navigate_back { get; set; }
		public bool search_enabled { get; set; }
		public Gtk.Widget visible_page { get; set; }
		public string visible_page_name { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_property_animation_target_get_type ()")]
	[Version (since = "1.2")]
	public sealed class PropertyAnimationTarget : Adw.AnimationTarget {
		[CCode (has_construct_function = false, type = "AdwAnimationTarget*")]
		public PropertyAnimationTarget (GLib.Object object, string property_name);
		[CCode (has_construct_function = false, type = "AdwAnimationTarget*")]
		public PropertyAnimationTarget.for_pspec (GLib.Object object, GLib.ParamSpec pspec);
		public unowned GLib.Object get_object ();
		public unowned GLib.ParamSpec get_pspec ();
		public GLib.Object object { get; construct; }
		public GLib.ParamSpec pspec { get; construct; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_spin_row_get_type ()")]
	[Version (since = "1.4")]
	public sealed class SpinRow : Adw.ActionRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinRow (Gtk.Adjustment? adjustment, double climb_rate, uint digits);
		public void configure (Gtk.Adjustment? adjustment, double climb_rate, uint digits);
		public unowned Gtk.Adjustment get_adjustment ();
		public double get_climb_rate ();
		public uint get_digits ();
		public bool get_numeric ();
		public bool get_snap_to_ticks ();
		public Gtk.SpinButtonUpdatePolicy get_update_policy ();
		public double get_value ();
		public bool get_wrap ();
		public void set_adjustment (Gtk.Adjustment? adjustment);
		public void set_climb_rate (double climb_rate);
		public void set_digits (uint digits);
		public void set_numeric (bool numeric);
		public void set_range (double min, double max);
		public void set_snap_to_ticks (bool snap_to_ticks);
		public void set_update_policy (Gtk.SpinButtonUpdatePolicy policy);
		public void set_value (double value);
		public void set_wrap (bool wrap);
		public void update ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinRow.with_range (double min, double max, double step);
		public Gtk.Adjustment adjustment { get; set; }
		public double climb_rate { get; set; }
		public uint digits { get; set; }
		public bool numeric { get; set; }
		public bool snap_to_ticks { get; set; }
		public Gtk.SpinButtonUpdatePolicy update_policy { get; set; }
		public double value { get; set; }
		public bool wrap { get; set; }
		public signal int input (out double new_value);
		public signal bool output ();
		public signal void wrapped ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_split_button_get_type ()")]
	public sealed class SplitButton : Gtk.Widget, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SplitButton ();
		[Version (since = "1.4")]
		public bool get_can_shrink ();
		public unowned Gtk.Widget? get_child ();
		public Gtk.ArrowType get_direction ();
		[Version (since = "1.2")]
		public unowned string get_dropdown_tooltip ();
		public unowned string? get_icon_name ();
		public unowned string? get_label ();
		public unowned GLib.MenuModel? get_menu_model ();
		public unowned Gtk.Popover? get_popover ();
		public bool get_use_underline ();
		public void popdown ();
		public void popup ();
		[Version (since = "1.4")]
		public void set_can_shrink (bool can_shrink);
		public void set_child (Gtk.Widget? child);
		public void set_direction (Gtk.ArrowType direction);
		[Version (since = "1.2")]
		public void set_dropdown_tooltip (string tooltip);
		public void set_icon_name (string icon_name);
		public void set_label (string label);
		public void set_menu_model (GLib.MenuModel? menu_model);
		public void set_popover (Gtk.Popover? popover);
		public void set_use_underline (bool use_underline);
		[Version (since = "1.4")]
		public bool can_shrink { get; set; }
		public Gtk.Widget child { get; set; }
		public Gtk.ArrowType direction { get; set; }
		[Version (since = "1.2")]
		public string dropdown_tooltip { get; set; }
		public string icon_name { get; set; }
		public string label { get; set; }
		public GLib.MenuModel menu_model { get; set; }
		public Gtk.Popover popover { get; set; }
		public bool use_underline { get; set; }
		public signal void activate ();
		public signal void clicked ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_spring_animation_get_type ()")]
	public sealed class SpringAnimation : Adw.Animation {
		[CCode (has_construct_function = false, type = "AdwAnimation*")]
		public SpringAnimation (Gtk.Widget widget, double from, double to, owned Adw.SpringParams spring_params, owned Adw.AnimationTarget target);
		[Version (since = "1.3")]
		public double calculate_value (uint time);
		[Version (since = "1.3")]
		public double calculate_velocity (uint time);
		public bool get_clamp ();
		public double get_epsilon ();
		public uint get_estimated_duration ();
		public double get_initial_velocity ();
		public unowned Adw.SpringParams get_spring_params ();
		public double get_value_from ();
		public double get_value_to ();
		public double get_velocity ();
		public void set_clamp (bool clamp);
		public void set_epsilon (double epsilon);
		public void set_initial_velocity (double velocity);
		public void set_spring_params (Adw.SpringParams spring_params);
		public void set_value_from (double value);
		public void set_value_to (double value);
		public bool clamp { get; set; }
		public double epsilon { get; set; }
		public uint estimated_duration { get; }
		public double initial_velocity { get; set; }
		public Adw.SpringParams spring_params { get; set construct; }
		public double value_from { get; set construct; }
		public double value_to { get; set construct; }
		public double velocity { get; }
	}
	[CCode (cheader_filename = "adwaita.h", ref_function = "adw_spring_params_ref", type_id = "adw_spring_params_get_type ()", unref_function = "adw_spring_params_unref")]
	public class SpringParams {
		[CCode (has_construct_function = false)]
		public SpringParams (double damping_ratio, double mass, double stiffness);
		[CCode (has_construct_function = false)]
		public SpringParams.full (double damping, double mass, double stiffness);
		public double get_damping ();
		public double get_damping_ratio ();
		public double get_mass ();
		public double get_stiffness ();
		public Adw.SpringParams @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_squeezer_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class Squeezer : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Squeezer ();
		public unowned Adw.SqueezerPage add (Gtk.Widget child);
		public bool get_allow_none ();
		public bool get_homogeneous ();
		public bool get_interpolate_size ();
		public unowned Adw.SqueezerPage get_page (Gtk.Widget child);
		public Gtk.SelectionModel get_pages ();
		public Adw.FoldThresholdPolicy get_switch_threshold_policy ();
		public uint get_transition_duration ();
		public bool get_transition_running ();
		public Adw.SqueezerTransitionType get_transition_type ();
		public unowned Gtk.Widget? get_visible_child ();
		public float get_xalign ();
		public float get_yalign ();
		public void remove (Gtk.Widget child);
		public void set_allow_none (bool allow_none);
		public void set_homogeneous (bool homogeneous);
		public void set_interpolate_size (bool interpolate_size);
		public void set_switch_threshold_policy (Adw.FoldThresholdPolicy policy);
		public void set_transition_duration (uint duration);
		public void set_transition_type (Adw.SqueezerTransitionType transition);
		public void set_xalign (float xalign);
		public void set_yalign (float yalign);
		public bool allow_none { get; set; }
		public bool homogeneous { get; set; }
		public bool interpolate_size { get; set; }
		public Gtk.SelectionModel pages { owned get; }
		public Adw.FoldThresholdPolicy switch_threshold_policy { get; set; }
		public uint transition_duration { get; set; }
		public bool transition_running { get; }
		public Adw.SqueezerTransitionType transition_type { get; set; }
		public Gtk.Widget visible_child { get; }
		public float xalign { get; set; }
		public float yalign { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_squeezer_page_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class SqueezerPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SqueezerPage ();
		public unowned Gtk.Widget get_child ();
		public bool get_enabled ();
		public void set_enabled (bool enabled);
		public Gtk.Widget child { get; construct; }
		public bool enabled { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_status_page_get_type ()")]
	public sealed class StatusPage : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public StatusPage ();
		public unowned Gtk.Widget? get_child ();
		public unowned string? get_description ();
		public unowned string? get_icon_name ();
		public unowned Gdk.Paintable? get_paintable ();
		public unowned string get_title ();
		public void set_child (Gtk.Widget? child);
		public void set_description (string? description);
		public void set_icon_name (string? icon_name);
		public void set_paintable (Gdk.Paintable? paintable);
		public void set_title (string title);
		public Gtk.Widget child { get; set; }
		public string description { get; set; }
		public string icon_name { get; set; }
		public Gdk.Paintable paintable { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_style_manager_get_type ()")]
	public sealed class StyleManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected StyleManager ();
		public Adw.ColorScheme get_color_scheme ();
		public bool get_dark ();
		public static unowned Adw.StyleManager get_default ();
		public unowned Gdk.Display? get_display ();
		public static unowned Adw.StyleManager get_for_display (Gdk.Display display);
		public bool get_high_contrast ();
		public bool get_system_supports_color_schemes ();
		public void set_color_scheme (Adw.ColorScheme color_scheme);
		public Adw.ColorScheme color_scheme { get; set; }
		public bool dark { get; }
		public Gdk.Display display { get; construct; }
		public bool high_contrast { get; }
		public bool system_supports_color_schemes { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_swipe_tracker_get_type ()")]
	public sealed class SwipeTracker : GLib.Object, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		public SwipeTracker (Adw.Swipeable swipeable);
		public bool get_allow_long_swipes ();
		public bool get_allow_mouse_drag ();
		public bool get_enabled ();
		[Version (since = "1.4")]
		public bool get_lower_overshoot ();
		public bool get_reversed ();
		public unowned Adw.Swipeable get_swipeable ();
		[Version (since = "1.4")]
		public bool get_upper_overshoot ();
		public void set_allow_long_swipes (bool allow_long_swipes);
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		public void set_enabled (bool enabled);
		[Version (since = "1.4")]
		public void set_lower_overshoot (bool overshoot);
		public void set_reversed (bool reversed);
		[Version (since = "1.4")]
		public void set_upper_overshoot (bool overshoot);
		public void shift_position (double delta);
		public bool allow_long_swipes { get; set; }
		public bool allow_mouse_drag { get; set; }
		public bool enabled { get; set; }
		[Version (since = "1.4")]
		public bool lower_overshoot { get; set; }
		public bool reversed { get; set; }
		public Adw.Swipeable swipeable { get; construct; }
		[Version (since = "1.4")]
		public bool upper_overshoot { get; set; }
		public signal void begin_swipe ();
		public signal void end_swipe (double velocity, double to);
		public signal void prepare (Adw.NavigationDirection direction);
		public signal void update_swipe (double progress);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_switch_row_get_type ()")]
	[Version (since = "1.4")]
	public sealed class SwitchRow : Adw.ActionRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SwitchRow ();
		public bool get_active ();
		public void set_active (bool is_active);
		public bool active { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_tab_bar_get_type ()")]
	public sealed class TabBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public TabBar ();
		public bool get_autohide ();
		public unowned Gtk.Widget? get_end_action_widget ();
		public bool get_expand_tabs ();
		[Version (since = "1.4")]
		public Gdk.DragAction get_extra_drag_preferred_action ();
		[Version (since = "1.3")]
		public bool get_extra_drag_preload ();
		public bool get_inverted ();
		public bool get_is_overflowing ();
		public unowned Gtk.Widget? get_start_action_widget ();
		public bool get_tabs_revealed ();
		public unowned Adw.TabView? get_view ();
		public void set_autohide (bool autohide);
		public void set_end_action_widget (Gtk.Widget? widget);
		public void set_expand_tabs (bool expand_tabs);
		[Version (since = "1.3")]
		public void set_extra_drag_preload (bool preload);
		public void set_inverted (bool inverted);
		public void set_start_action_widget (Gtk.Widget? widget);
		public void set_view (Adw.TabView? view);
		public void setup_extra_drop_target (Gdk.DragAction actions, [CCode (array_length_cname = "n_types", array_length_pos = 2.1, array_length_type = "gsize")] GLib.Type[]? types);
		public bool autohide { get; set; }
		public Gtk.Widget end_action_widget { get; set; }
		public bool expand_tabs { get; set; }
		[Version (since = "1.4")]
		public Gdk.DragAction extra_drag_preferred_action { get; }
		[Version (since = "1.3")]
		public bool extra_drag_preload { get; set; }
		public bool inverted { get; set; }
		public bool is_overflowing { get; }
		public Gtk.Widget start_action_widget { get; set; }
		public bool tabs_revealed { get; }
		public Adw.TabView view { get; set; }
		public signal bool extra_drag_drop (Adw.TabPage page, GLib.Value value);
		[Version (since = "1.3")]
		public signal Gdk.DragAction extra_drag_value (Adw.TabPage page, GLib.Value value);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_tab_button_get_type ()")]
	[Version (since = "1.3")]
	public sealed class TabButton : Gtk.Widget, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TabButton ();
		public unowned Adw.TabView? get_view ();
		public void set_view (Adw.TabView? view);
		public Adw.TabView view { get; set; }
		public signal void activate ();
		public signal void clicked ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_tab_overview_get_type ()")]
	[Version (since = "1.3")]
	public sealed class TabOverview : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TabOverview ();
		public unowned Gtk.Widget? get_child ();
		public bool get_enable_new_tab ();
		public bool get_enable_search ();
		[Version (since = "1.4")]
		public Gdk.DragAction get_extra_drag_preferred_action ();
		public bool get_extra_drag_preload ();
		public bool get_inverted ();
		public bool get_open ();
		public bool get_search_active ();
		public unowned GLib.MenuModel? get_secondary_menu ();
		public bool get_show_end_title_buttons ();
		public bool get_show_start_title_buttons ();
		public unowned Adw.TabView? get_view ();
		public void set_child (Gtk.Widget? child);
		public void set_enable_new_tab (bool enable_new_tab);
		public void set_enable_search (bool enable_search);
		public void set_extra_drag_preload (bool preload);
		public void set_inverted (bool inverted);
		public void set_open (bool open);
		public void set_secondary_menu (GLib.MenuModel? secondary_menu);
		public void set_show_end_title_buttons (bool show_end_title_buttons);
		public void set_show_start_title_buttons (bool show_start_title_buttons);
		public void set_view (Adw.TabView? view);
		public void setup_extra_drop_target (Gdk.DragAction actions, [CCode (array_length_cname = "n_types", array_length_pos = 2.1, array_length_type = "gsize")] GLib.Type[]? types);
		public Gtk.Widget child { get; set; }
		public bool enable_new_tab { get; set; }
		public bool enable_search { get; set; }
		[Version (since = "1.4")]
		public Gdk.DragAction extra_drag_preferred_action { get; }
		public bool extra_drag_preload { get; set; }
		public bool inverted { get; set; }
		public bool open { get; set; }
		public bool search_active { get; }
		public GLib.MenuModel secondary_menu { get; set; }
		public bool show_end_title_buttons { get; set; }
		public bool show_start_title_buttons { get; set; }
		public Adw.TabView view { get; set; }
		public signal unowned Adw.TabPage create_tab ();
		public signal bool extra_drag_drop (Adw.TabPage page, GLib.Value value);
		public signal Gdk.DragAction extra_drag_value (Adw.TabPage page, GLib.Value value);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_tab_page_get_type ()")]
	public sealed class TabPage : GLib.Object, Gtk.Accessible {
		[CCode (has_construct_function = false)]
		protected TabPage ();
		public unowned Gtk.Widget get_child ();
		public unowned GLib.Icon? get_icon ();
		public bool get_indicator_activatable ();
		public unowned GLib.Icon? get_indicator_icon ();
		[Version (since = "1.2")]
		public unowned string get_indicator_tooltip ();
		[Version (since = "1.3")]
		public unowned string? get_keyword ();
		[Version (since = "1.3")]
		public bool get_live_thumbnail ();
		public bool get_loading ();
		public bool get_needs_attention ();
		public unowned Adw.TabPage? get_parent ();
		public bool get_pinned ();
		public bool get_selected ();
		[Version (since = "1.3")]
		public float get_thumbnail_xalign ();
		[Version (since = "1.3")]
		public float get_thumbnail_yalign ();
		public unowned string get_title ();
		public unowned string? get_tooltip ();
		[Version (since = "1.3")]
		public void invalidate_thumbnail ();
		public void set_icon (GLib.Icon? icon);
		public void set_indicator_activatable (bool activatable);
		public void set_indicator_icon (GLib.Icon? indicator_icon);
		[Version (since = "1.2")]
		public void set_indicator_tooltip (string tooltip);
		[Version (since = "1.3")]
		public void set_keyword (string keyword);
		[Version (since = "1.3")]
		public void set_live_thumbnail (bool live_thumbnail);
		public void set_loading (bool loading);
		public void set_needs_attention (bool needs_attention);
		[Version (since = "1.3")]
		public void set_thumbnail_xalign (float xalign);
		[Version (since = "1.3")]
		public void set_thumbnail_yalign (float yalign);
		public void set_title (string title);
		public void set_tooltip (string tooltip);
		public Gtk.Widget child { get; construct; }
		public GLib.Icon icon { get; set; }
		public bool indicator_activatable { get; set; }
		public GLib.Icon indicator_icon { get; set; }
		[Version (since = "1.2")]
		public string indicator_tooltip { get; set; }
		[Version (since = "1.3")]
		public string keyword { get; set; }
		[Version (since = "1.3")]
		public bool live_thumbnail { get; set; }
		public bool loading { get; set; }
		public bool needs_attention { get; set; }
		public Adw.TabPage parent { get; construct; }
		public bool pinned { get; }
		public bool selected { get; }
		[Version (since = "1.3")]
		public float thumbnail_xalign { get; set; }
		[Version (since = "1.3")]
		public float thumbnail_yalign { get; set; }
		public string title { get; set; }
		public string tooltip { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_tab_view_get_type ()")]
	public sealed class TabView : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public TabView ();
		public unowned Adw.TabPage add_page (Gtk.Widget child, Adw.TabPage? parent);
		[Version (since = "1.2")]
		public void add_shortcuts (Adw.TabViewShortcuts shortcuts);
		public unowned Adw.TabPage append (Gtk.Widget child);
		public unowned Adw.TabPage append_pinned (Gtk.Widget child);
		public void close_other_pages (Adw.TabPage page);
		public void close_page_finish (Adw.TabPage page, bool confirm);
		public void close_pages_after (Adw.TabPage page);
		public void close_pages_before (Adw.TabPage page);
		public unowned GLib.Icon get_default_icon ();
		public bool get_is_transferring_page ();
		public unowned GLib.MenuModel? get_menu_model ();
		public int get_n_pages ();
		public int get_n_pinned_pages ();
		public unowned Adw.TabPage get_nth_page (int position);
		public unowned Adw.TabPage get_page (Gtk.Widget child);
		public int get_page_position (Adw.TabPage page);
		public Gtk.SelectionModel get_pages ();
		public unowned Adw.TabPage? get_selected_page ();
		[Version (since = "1.2")]
		public Adw.TabViewShortcuts get_shortcuts ();
		public unowned Adw.TabPage insert (Gtk.Widget child, int position);
		public unowned Adw.TabPage insert_pinned (Gtk.Widget child, int position);
		[Version (since = "1.3")]
		public void invalidate_thumbnails ();
		public unowned Adw.TabPage prepend (Gtk.Widget child);
		public unowned Adw.TabPage prepend_pinned (Gtk.Widget child);
		[Version (since = "1.2")]
		public void remove_shortcuts (Adw.TabViewShortcuts shortcuts);
		public bool reorder_backward (Adw.TabPage page);
		public bool reorder_first (Adw.TabPage page);
		public bool reorder_forward (Adw.TabPage page);
		public bool reorder_last (Adw.TabPage page);
		public bool reorder_page (Adw.TabPage page, int position);
		public bool select_next_page ();
		public bool select_previous_page ();
		public void set_default_icon (GLib.Icon default_icon);
		public void set_menu_model (GLib.MenuModel? menu_model);
		public void set_page_pinned (Adw.TabPage page, bool pinned);
		public void set_selected_page (Adw.TabPage selected_page);
		[Version (since = "1.2")]
		public void set_shortcuts (Adw.TabViewShortcuts shortcuts);
		public void transfer_page (Adw.TabPage page, Adw.TabView other_view, int position);
		public GLib.Icon default_icon { get; set; }
		public bool is_transferring_page { get; }
		public GLib.MenuModel menu_model { get; set; }
		public int n_pages { get; }
		public int n_pinned_pages { get; }
		public Gtk.SelectionModel pages { owned get; }
		public Adw.TabPage selected_page { get; set; }
		[Version (since = "1.2")]
		public Adw.TabViewShortcuts shortcuts { get; set; }
		[HasEmitter]
		public signal bool close_page (Adw.TabPage page);
		public signal unowned Adw.TabView? create_window ();
		public signal void indicator_activated (Adw.TabPage page);
		public signal void page_attached (Adw.TabPage page, int position);
		public signal void page_detached (Adw.TabPage page, int position);
		public signal void page_reordered (Adw.TabPage page, int position);
		public signal void setup_menu (Adw.TabPage? page);
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_timed_animation_get_type ()")]
	public sealed class TimedAnimation : Adw.Animation {
		[CCode (has_construct_function = false, type = "AdwAnimation*")]
		public TimedAnimation (Gtk.Widget widget, double from, double to, uint duration, owned Adw.AnimationTarget target);
		public bool get_alternate ();
		public uint get_duration ();
		public Adw.Easing get_easing ();
		public uint get_repeat_count ();
		public bool get_reverse ();
		public double get_value_from ();
		public double get_value_to ();
		public void set_alternate (bool alternate);
		public void set_duration (uint duration);
		public void set_easing (Adw.Easing easing);
		public void set_repeat_count (uint repeat_count);
		public void set_reverse (bool reverse);
		public void set_value_from (double value);
		public void set_value_to (double value);
		public bool alternate { get; set construct; }
		public uint duration { get; set construct; }
		public Adw.Easing easing { get; set construct; }
		public uint repeat_count { get; set construct; }
		public bool reverse { get; set construct; }
		public double value_from { get; set construct; }
		public double value_to { get; set construct; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_toast_get_type ()")]
	public sealed class Toast : GLib.Object {
		[CCode (has_construct_function = false)]
		public Toast (string title);
		public void dismiss ();
		[CCode (has_construct_function = false)]
		[PrintfFormat]
		[Version (since = "1.2")]
		public Toast.format (string format, ...);
		public unowned string? get_action_name ();
		public unowned GLib.Variant? get_action_target_value ();
		public unowned string? get_button_label ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_custom_title ();
		public Adw.ToastPriority get_priority ();
		public uint get_timeout ();
		public unowned string? get_title ();
		[Version (since = "1.4")]
		public bool get_use_markup ();
		public void set_action_name (string? action_name);
		public void set_action_target (string? format_string, ...);
		public void set_action_target_value (GLib.Variant? action_target);
		public void set_button_label (string? button_label);
		[Version (since = "1.2")]
		public void set_custom_title (Gtk.Widget? widget);
		public void set_detailed_action_name (string? detailed_action_name);
		public void set_priority (Adw.ToastPriority priority);
		public void set_timeout (uint timeout);
		public void set_title (string title);
		[Version (since = "1.4")]
		public void set_use_markup (bool use_markup);
		public string action_name { get; set; }
		[NoAccessorMethod]
		public GLib.Variant action_target { owned get; set; }
		public string button_label { get; set; }
		[Version (since = "1.2")]
		public Gtk.Widget custom_title { get; set; }
		public Adw.ToastPriority priority { get; set; }
		public uint timeout { get; set; }
		public string title { get; set; }
		[Version (since = "1.4")]
		public bool use_markup { get; set; }
		[Version (since = "1.2")]
		public signal void button_clicked ();
		public signal void dismissed ();
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_toast_overlay_get_type ()")]
	public sealed class ToastOverlay : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToastOverlay ();
		public void add_toast (owned Adw.Toast toast);
		public unowned Gtk.Widget? get_child ();
		public void set_child (Gtk.Widget? child);
		public Gtk.Widget child { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_toolbar_view_get_type ()")]
	[Version (since = "1.4")]
	public sealed class ToolbarView : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToolbarView ();
		public void add_bottom_bar (Gtk.Widget widget);
		public void add_top_bar (Gtk.Widget widget);
		public int get_bottom_bar_height ();
		public Adw.ToolbarStyle get_bottom_bar_style ();
		public unowned Gtk.Widget? get_content ();
		public bool get_extend_content_to_bottom_edge ();
		public bool get_extend_content_to_top_edge ();
		public bool get_reveal_bottom_bars ();
		public bool get_reveal_top_bars ();
		public int get_top_bar_height ();
		public Adw.ToolbarStyle get_top_bar_style ();
		public void remove (Gtk.Widget widget);
		public void set_bottom_bar_style (Adw.ToolbarStyle style);
		public void set_content (Gtk.Widget? content);
		public void set_extend_content_to_bottom_edge (bool extend);
		public void set_extend_content_to_top_edge (bool extend);
		public void set_reveal_bottom_bars (bool reveal);
		public void set_reveal_top_bars (bool reveal);
		public void set_top_bar_style (Adw.ToolbarStyle style);
		public int bottom_bar_height { get; }
		public Adw.ToolbarStyle bottom_bar_style { get; set; }
		public Gtk.Widget content { get; set; }
		public bool extend_content_to_bottom_edge { get; set; }
		public bool extend_content_to_top_edge { get; set; }
		public bool reveal_bottom_bars { get; set; }
		public bool reveal_top_bars { get; set; }
		public int top_bar_height { get; }
		public Adw.ToolbarStyle top_bar_style { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_stack_get_type ()")]
	public sealed class ViewStack : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewStack ();
		public unowned Adw.ViewStackPage add (Gtk.Widget child);
		public unowned Adw.ViewStackPage add_named (Gtk.Widget child, string? name);
		public unowned Adw.ViewStackPage add_titled (Gtk.Widget child, string? name, string title);
		[Version (since = "1.2")]
		public unowned Adw.ViewStackPage add_titled_with_icon (Gtk.Widget child, string? name, string title, string icon_name);
		public unowned Gtk.Widget? get_child_by_name (string name);
		public bool get_hhomogeneous ();
		public unowned Adw.ViewStackPage get_page (Gtk.Widget child);
		public Gtk.SelectionModel get_pages ();
		public bool get_vhomogeneous ();
		public unowned Gtk.Widget? get_visible_child ();
		public unowned string? get_visible_child_name ();
		public void remove (Gtk.Widget child);
		public void set_hhomogeneous (bool hhomogeneous);
		public void set_vhomogeneous (bool vhomogeneous);
		public void set_visible_child (Gtk.Widget child);
		public void set_visible_child_name (string name);
		public bool hhomogeneous { get; set; }
		public Gtk.SelectionModel pages { owned get; }
		public bool vhomogeneous { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_stack_page_get_type ()")]
	public sealed class ViewStackPage : GLib.Object, Gtk.Accessible {
		[CCode (has_construct_function = false)]
		protected ViewStackPage ();
		public uint get_badge_number ();
		public unowned Gtk.Widget get_child ();
		public unowned string? get_icon_name ();
		public unowned string? get_name ();
		public bool get_needs_attention ();
		public unowned string? get_title ();
		public bool get_use_underline ();
		public bool get_visible ();
		public void set_badge_number (uint badge_number);
		public void set_icon_name (string? icon_name);
		public void set_name (string? name);
		public void set_needs_attention (bool needs_attention);
		public void set_title (string? title);
		public void set_use_underline (bool use_underline);
		public void set_visible (bool visible);
		public uint badge_number { get; set; }
		public Gtk.Widget child { get; construct; }
		public string icon_name { get; set; }
		public string name { get; set; }
		public bool needs_attention { get; set; }
		public string title { get; set; }
		public bool use_underline { get; set; }
		public bool visible { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_stack_pages_get_type ()")]
	[Version (since = "1.4")]
	public sealed class ViewStackPages : GLib.Object, GLib.ListModel, Gtk.SelectionModel {
		[CCode (has_construct_function = false)]
		protected ViewStackPages ();
		public unowned Adw.ViewStackPage? get_selected_page ();
		public void set_selected_page (Adw.ViewStackPage page);
		public Adw.ViewStackPage selected_page { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_get_type ()")]
	public sealed class ViewSwitcher : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewSwitcher ();
		public Adw.ViewSwitcherPolicy get_policy ();
		public unowned Adw.ViewStack? get_stack ();
		public void set_policy (Adw.ViewSwitcherPolicy policy);
		public void set_stack (Adw.ViewStack? stack);
		public Adw.ViewSwitcherPolicy policy { get; set; }
		public Adw.ViewStack stack { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_bar_get_type ()")]
	public sealed class ViewSwitcherBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewSwitcherBar ();
		public bool get_reveal ();
		public unowned Adw.ViewStack? get_stack ();
		public void set_reveal (bool reveal);
		public void set_stack (Adw.ViewStack? stack);
		public bool reveal { get; set; }
		public Adw.ViewStack stack { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_view_switcher_title_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public sealed class ViewSwitcherTitle : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewSwitcherTitle ();
		public unowned Adw.ViewStack? get_stack ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public bool get_title_visible ();
		public bool get_view_switcher_enabled ();
		public void set_stack (Adw.ViewStack? stack);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public void set_view_switcher_enabled (bool enabled);
		public Adw.ViewStack stack { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
		public bool title_visible { get; }
		public bool view_switcher_enabled { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_window_get_type ()")]
	public class Window : Gtk.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Window ();
		[Version (since = "1.4")]
		public void add_breakpoint (owned Adw.Breakpoint breakpoint);
		public unowned Gtk.Widget? get_content ();
		[Version (since = "1.4")]
		public unowned Adw.Breakpoint? get_current_breakpoint ();
		public void set_content (Gtk.Widget? content);
		public Gtk.Widget content { get; set; }
		[Version (since = "1.4")]
		public Adw.Breakpoint current_breakpoint { get; }
	}
	[CCode (cheader_filename = "adwaita.h", type_id = "adw_window_title_get_type ()")]
	public sealed class WindowTitle : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WindowTitle (string title, string subtitle);
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "adwaita.h", type_cname = "AdwSwipeableInterface", type_id = "adw_swipeable_get_type ()")]
	public interface Swipeable : Gtk.Widget {
		public abstract double get_cancel_progress ();
		public abstract double get_distance ();
		public abstract double get_progress ();
		[CCode (array_length_pos = 0.1)]
		public abstract double[] get_snap_points ();
		public abstract Gdk.Rectangle get_swipe_area (Adw.NavigationDirection navigation_direction, bool is_drag);
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_ANIMATION_", type_id = "adw_animation_state_get_type ()")]
	public enum AnimationState {
		IDLE,
		PAUSED,
		PLAYING,
		FINISHED
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_BREAKPOINT_CONDITION_", type_id = "adw_breakpoint_condition_length_type_get_type ()")]
	[Version (since = "1.4")]
	public enum BreakpointConditionLengthType {
		MIN_WIDTH,
		MAX_WIDTH,
		MIN_HEIGHT,
		MAX_HEIGHT
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_BREAKPOINT_CONDITION_", type_id = "adw_breakpoint_condition_ratio_type_get_type ()")]
	[Version (since = "1.4")]
	public enum BreakpointConditionRatioType {
		MIN_ASPECT_RATIO,
		MAX_ASPECT_RATIO
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_CENTERING_POLICY_", type_id = "adw_centering_policy_get_type ()")]
	public enum CenteringPolicy {
		LOOSE,
		STRICT
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_COLOR_SCHEME_", type_id = "adw_color_scheme_get_type ()")]
	public enum ColorScheme {
		DEFAULT,
		FORCE_LIGHT,
		PREFER_LIGHT,
		PREFER_DARK,
		FORCE_DARK
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_", type_id = "adw_easing_get_type ()")]
	public enum Easing {
		LINEAR,
		EASE_IN_QUAD,
		EASE_OUT_QUAD,
		EASE_IN_OUT_QUAD,
		EASE_IN_CUBIC,
		EASE_OUT_CUBIC,
		EASE_IN_OUT_CUBIC,
		EASE_IN_QUART,
		EASE_OUT_QUART,
		EASE_IN_OUT_QUART,
		EASE_IN_QUINT,
		EASE_OUT_QUINT,
		EASE_IN_OUT_QUINT,
		EASE_IN_SINE,
		EASE_OUT_SINE,
		EASE_IN_OUT_SINE,
		EASE_IN_EXPO,
		EASE_OUT_EXPO,
		EASE_IN_OUT_EXPO,
		EASE_IN_CIRC,
		EASE_OUT_CIRC,
		EASE_IN_OUT_CIRC,
		EASE_IN_ELASTIC,
		EASE_OUT_ELASTIC,
		EASE_IN_OUT_ELASTIC,
		EASE_IN_BACK,
		EASE_OUT_BACK,
		EASE_IN_OUT_BACK,
		EASE_IN_BOUNCE,
		EASE_OUT_BOUNCE,
		EASE_IN_OUT_BOUNCE;
		public double ease (double value);
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_FLAP_FOLD_POLICY_", type_id = "adw_flap_fold_policy_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public enum FlapFoldPolicy {
		NEVER,
		ALWAYS,
		AUTO
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_FLAP_TRANSITION_TYPE_", type_id = "adw_flap_transition_type_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public enum FlapTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_FOLD_THRESHOLD_POLICY_", type_id = "adw_fold_threshold_policy_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public enum FoldThresholdPolicy {
		MINIMUM,
		NATURAL
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_LEAFLET_TRANSITION_TYPE_", type_id = "adw_leaflet_transition_type_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public enum LeafletTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_LENGTH_UNIT_", type_id = "adw_length_unit_get_type ()")]
	[Version (since = "1.4")]
	public enum LengthUnit {
		PX,
		PT,
		SP;
		public double from_px (double value, Gtk.Settings? settings);
		public double to_px (double value, Gtk.Settings? settings);
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_NAVIGATION_DIRECTION_", type_id = "adw_navigation_direction_get_type ()")]
	public enum NavigationDirection {
		BACK,
		FORWARD
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_RESPONSE_", type_id = "adw_response_appearance_get_type ()")]
	[Version (since = "1.2")]
	public enum ResponseAppearance {
		DEFAULT,
		SUGGESTED,
		DESTRUCTIVE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_SQUEEZER_TRANSITION_TYPE_", type_id = "adw_squeezer_transition_type_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.4")]
	public enum SqueezerTransitionType {
		NONE,
		CROSSFADE
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_TAB_VIEW_SHORTCUT_", type_id = "adw_tab_view_shortcuts_get_type ()")]
	[Flags]
	[Version (since = "1.2")]
	public enum TabViewShortcuts {
		NONE,
		CONTROL_TAB,
		CONTROL_SHIFT_TAB,
		CONTROL_PAGE_UP,
		CONTROL_PAGE_DOWN,
		CONTROL_HOME,
		CONTROL_END,
		CONTROL_SHIFT_PAGE_UP,
		CONTROL_SHIFT_PAGE_DOWN,
		CONTROL_SHIFT_HOME,
		CONTROL_SHIFT_END,
		ALT_DIGITS,
		ALT_ZERO,
		ALL_SHORTCUTS
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_TOAST_PRIORITY_", type_id = "adw_toast_priority_get_type ()")]
	public enum ToastPriority {
		NORMAL,
		HIGH
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_TOOLBAR_", type_id = "adw_toolbar_style_get_type ()")]
	[Version (since = "1.4")]
	public enum ToolbarStyle {
		FLAT,
		RAISED,
		RAISED_BORDER
	}
	[CCode (cheader_filename = "adwaita.h", cprefix = "ADW_VIEW_SWITCHER_POLICY_", type_id = "adw_view_switcher_policy_get_type ()")]
	public enum ViewSwitcherPolicy {
		NARROW,
		WIDE
	}
	[CCode (cheader_filename = "adwaita.h", instance_pos = 1.9)]
	public delegate void AnimationTargetFunc (double value);
	[CCode (cheader_filename = "adwaita.h", cname = "ADW_DURATION_INFINITE")]
	public const uint DURATION_INFINITE;
	[CCode (cheader_filename = "adwaita.h", cname = "ADW_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "adwaita.h", cname = "ADW_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "adwaita.h", cname = "ADW_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "adwaita.h", cname = "ADW_VERSION_S")]
	public const string VERSION_S;
	[CCode (cheader_filename = "adwaita.h")]
	[Version (replacement = "BreakpointCondition.parse", since = "1.4")]
	public static Adw.BreakpointCondition breakpoint_condition_parse (string str);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (replacement = "Easing.ease")]
	public static double easing_ease (Adw.Easing self, double value);
	[CCode (cheader_filename = "adwaita.h")]
	public static bool get_enable_animations (Gtk.Widget widget);
	[CCode (cheader_filename = "adwaita.h")]
	public static uint get_major_version ();
	[CCode (cheader_filename = "adwaita.h")]
	public static uint get_micro_version ();
	[CCode (cheader_filename = "adwaita.h")]
	public static uint get_minor_version ();
	[CCode (cheader_filename = "adwaita.h")]
	public static void init ();
	[CCode (cheader_filename = "adwaita.h")]
	public static bool is_initialized ();
	[CCode (cheader_filename = "adwaita.h")]
	[Version (replacement = "LengthUnit.from_px", since = "1.4")]
	public static double length_unit_from_px (Adw.LengthUnit unit, double value, Gtk.Settings? settings);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (replacement = "LengthUnit.to_px", since = "1.4")]
	public static double length_unit_to_px (Adw.LengthUnit unit, double value, Gtk.Settings? settings);
	[CCode (cheader_filename = "adwaita.h")]
	public static double lerp (double a, double b, double t);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (since = "1.2")]
	public static void show_about_window (Gtk.Window? parent, ...);
	[CCode (cheader_filename = "adwaita.h")]
	[Version (since = "1.4")]
	public static void show_about_window_from_appdata (Gtk.Window? parent, string resource_path, string? release_notes_version, ...);
}

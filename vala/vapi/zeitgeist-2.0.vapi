/* zeitgeist-2.0.vapi generated by valac 0.56.2.69-6dec23, do not modify. */

namespace Zeitgeist {
	[CCode (cheader_filename = "zeitgeist.h")]
	public class DataSourceRegistry : Zeitgeist.QueuedProxyWrapper {
		public DataSourceRegistry ();
		public async Zeitgeist.DataSource get_data_source_from_id (string unique_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GLib.GenericArray<Zeitgeist.DataSource> get_data_sources (GLib.Cancellable? cancellable = null) throws GLib.Error;
		protected override void on_connection_established ();
		protected override void on_connection_lost ();
		public async bool register_data_source (Zeitgeist.DataSource data_source, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async void set_data_source_enabled (string unique_id, bool enabled, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public signal void source_disconnected (Zeitgeist.DataSource data_source);
		public signal void source_enabled (string unique_id, bool enabled);
		public signal void source_registered (Zeitgeist.DataSource data_source);
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	public class Index : Zeitgeist.QueuedProxyWrapper {
		public Index ();
		protected override void on_connection_established ();
		protected override void on_connection_lost ();
		public async Zeitgeist.ResultSet search (string query, Zeitgeist.TimeRange time_range, GLib.GenericArray<Zeitgeist.Event> event_templates, uint32 offset, uint32 num_events, Zeitgeist.ResultType result_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async Zeitgeist.ResultSet search_with_relevancies (string query, Zeitgeist.TimeRange time_range, GLib.GenericArray<Zeitgeist.Event> event_templates, Zeitgeist.StorageState storage_state, uint32 offset, uint32 num_events, Zeitgeist.ResultType result_type, GLib.Cancellable? cancellable = null, out double[] relevancies) throws GLib.Error;
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	public class Log : Zeitgeist.QueuedProxyWrapper {
		public Log ();
		public string datapath ();
		public async Zeitgeist.TimeRange delete_events (GLib.Array<uint32> event_ids, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async uint32[] find_event_ids (Zeitgeist.TimeRange time_range, GLib.GenericArray<Zeitgeist.Event> event_templates, Zeitgeist.StorageState storage_state, uint32 num_events, Zeitgeist.ResultType result_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async Zeitgeist.ResultSet find_events (Zeitgeist.TimeRange time_range, GLib.GenericArray<Zeitgeist.Event> event_templates, Zeitgeist.StorageState storage_state, uint32 num_events, Zeitgeist.ResultType result_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async string[] find_related_uris (Zeitgeist.TimeRange time_range, GLib.GenericArray<Zeitgeist.Event> event_templates, GLib.GenericArray<Zeitgeist.Event> result_event_templates, Zeitgeist.StorageState storage_state, uint32 num_events, Zeitgeist.RelevantResultType result_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static Zeitgeist.Log get_default ();
		public async Zeitgeist.ResultSet get_events (GLib.Array<uint32> event_ids, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string[] get_extensions ();
		public void get_version (out int major, out int minor, out int micro);
		public async GLib.Array<uint32> insert_event (Zeitgeist.Event event, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void insert_event_no_reply (Zeitgeist.Event event) throws GLib.Error;
		public async GLib.Array<uint32> insert_events (GLib.GenericArray<Zeitgeist.Event> events, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void insert_events_no_reply (GLib.GenericArray<Zeitgeist.Event> events) throws GLib.Error;
		public void install_monitor (Zeitgeist.Monitor monitor) throws GLib.Error;
		protected override void on_connection_established ();
		protected override void on_connection_lost ();
		public async void quit (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void remove_monitor (owned Zeitgeist.Monitor monitor) throws GLib.Error;
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	public class Monitor : GLib.Object, Zeitgeist.RemoteMonitor {
		public Monitor (Zeitgeist.TimeRange time_range, owned GLib.GenericArray<Zeitgeist.Event> event_templates);
		public GLib.ObjectPath get_path ();
		public GLib.GenericArray<Zeitgeist.Event> get_templates ();
		public GLib.GenericArray<Zeitgeist.Event> event_templates { get; set construct; }
		public Zeitgeist.TimeRange time_range { get; set construct; }
		public signal void events_deleted (Zeitgeist.TimeRange time_range, uint32[] event_ids);
		public signal void events_inserted (Zeitgeist.TimeRange time_range, Zeitgeist.ResultSet events);
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	protected abstract class QueuedProxyWrapper : GLib.Object {
		protected class QueuedMethod {
			public QueuedMethod (owned GLib.SourceFunc callback);
			public GLib.SourceFunc queued_method { get; private owned set; }
		}
		protected QueuedProxyWrapper ();
		protected void name_owner_changed (GLib.ParamSpec pspec);
		protected abstract void on_connection_established ();
		protected abstract void on_connection_lost ();
		protected void process_queued_methods ();
		protected void proxy_acquired (GLib.Object proxy);
		protected void proxy_unavailable (GLib.IOError err);
		protected async void wait_for_proxy () throws GLib.Error;
		public bool is_connected { get; private set; }
		public bool proxy_created { get; private set; }
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "net.connman.Manager")]
	protected interface ConnmanManagerDBus : GLib.Object {
		public abstract string get_state () throws GLib.Error;
		public signal void state_changed (string state);
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "org.freedesktop.NetworkManager")]
	protected interface NetworkManagerDBus : GLib.Object {
		[DBus (name = "state")]
		public abstract uint32 state () throws GLib.Error;
		public signal void state_changed (uint32 state);
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "org.gnome.zeitgeist.Log")]
	protected interface RemoteLog : GLib.Object {
		[DBus (signature = "(xx)")]
		public abstract async GLib.Variant delete_events (uint32[] event_ids, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		public abstract async uint32[] find_event_ids ([DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant event_templates, uint storage_state, uint num_events, uint result_type, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		[DBus (signature = "a(asaasay)")]
		public abstract async GLib.Variant find_events ([DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant event_templates, uint storage_state, uint num_events, uint result_type, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		public abstract async string[] find_related_uris ([DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant event_templates, [DBus (signature = "a(asaasay)")] GLib.Variant result_event_templates, uint storage_state, uint num_events, uint result_type, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		[DBus (signature = "a(asaasay)")]
		public abstract async GLib.Variant get_events (uint32[] event_ids, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		public abstract async uint32[] insert_events ([DBus (signature = "a(asaasay)")] GLib.Variant events, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		public abstract async void install_monitor (GLib.ObjectPath monitor_path, [DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant event_templates, GLib.BusName? owner = null) throws GLib.Error;
		public abstract async void quit (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public abstract async void remove_monitor (GLib.ObjectPath monitor_path, GLib.BusName? owner = null) throws GLib.Error;
		[DBus (name = "datapath")]
		public abstract string datapath { owned get; }
		[DBus (name = "extensions")]
		public abstract string[] extensions { owned get; }
		[DBus (name = "version")]
		public abstract Zeitgeist.VersionStruct version { owned get; }
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "org.gnome.zeitgeist.Monitor")]
	protected interface RemoteMonitor : GLib.Object {
		public abstract async void notify_delete ([DBus (signature = "(xx)")] GLib.Variant time_range, uint32[] event_ids) throws GLib.Error;
		public abstract async void notify_insert ([DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant events) throws GLib.Error;
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "org.gnome.zeitgeist.DataSourceRegistry")]
	protected interface RemoteRegistry : GLib.Object {
		[DBus (signature = "(sssa(asaasay)bxb)")]
		public abstract async GLib.Variant get_data_source_from_id (string unique_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[DBus (signature = "a(sssa(asaasay)bxb)")]
		public abstract async GLib.Variant get_data_sources (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public abstract async bool register_data_source (string unique_id, string name, string description, [DBus (signature = "a(asaasay)")] GLib.Variant event_templates, GLib.Cancellable? cancellable = null, GLib.BusName? sender = null) throws GLib.Error;
		public abstract async void set_data_source_enabled (string unique_id, bool enabled, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public signal void data_source_disconnected ([DBus (signature = "(sssa(asaasay)bxb)")] GLib.Variant data_source);
		public signal void data_source_enabled (string unique_id, bool enabled);
		public signal void data_source_registered ([DBus (signature = "(sssa(asaasay)bxb)")] GLib.Variant data_source);
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	[DBus (name = "org.gnome.zeitgeist.Index")]
	protected interface RemoteSimpleIndexer : GLib.Object {
		public abstract async void search (string query_string, [DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant filter_templates, uint offset, uint count, uint result_type, GLib.Cancellable? cancellable, [DBus (signature = "a(asaasay)")] out GLib.Variant events, out uint matches) throws GLib.Error;
		public abstract async void search_with_relevancies (string query_string, [DBus (signature = "(xx)")] GLib.Variant time_range, [DBus (signature = "a(asaasay)")] GLib.Variant filter_templates, uint storage_state, uint offset, uint count, uint result_type, GLib.Cancellable? cancellable, [DBus (signature = "a(asaasay)")] out GLib.Variant events, out double[] relevancies, out uint matches) throws GLib.Error;
	}
	[CCode (cheader_filename = "zeitgeist.h")]
	public struct VersionStruct {
		public int major;
		public int minor;
		public int micro;
	}
}

/* granite-7.vapi generated by valac 0.57.0.187-a2b72, do not modify. */

[CCode (gir_namespace = "Granite", gir_version = "7.0")]
namespace Granite {
	/**
	 * The DateTime namespace contains useful functions for
	 * getting the default translated format for either date and time.
	 */
	namespace DateTime {
		/**
		 * Gets the default translated date format.
		 * The function constructs a new string interpreting the //with_weekday//, //with_day// and //with_year// parameters
		 * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
		 *
		 * As the {@link Granite.DateTime.get_default_time_format}, the returned string is formatted, translated and is also mostly used to display
		 * the date in various user interfaces like the date displayed in the top panel.
		 *
		 * @param with_weekday if the returned string should contain the abbreviated weekday name
		 * @param with_day if the returned string should contain contain the day of the month as a decimal number (range 1 to 31)
		 * @param with_year if the returned string should contain the year as a decimal number including the century
		 *
		 * @return returns the formatted and located date string. If for some reason, the function could not determine the format to use,
		 *         an empty string will be returned.
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public static string get_default_date_format (bool with_weekday = false, bool with_day = true, bool with_year = false);
		/**
		 * Gets a default translated time format.
		 * The function constructs a new string interpreting the //is_12h// and //with_second// parameters
		 * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
		 *
		 * The returned string is formatted and translated. This function is mostly used to display
		 * the time in various user interfaces like the time displayed in the top panel.
		 *
		 * @param is_12h if the returned string should be formatted in 12h format
		 * @param with_second if the returned string should include seconds
		 *
		 * @return the formatted and located time string.
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public static string get_default_time_format (bool is_12h = false, bool with_second = false);
		/**
		 * Compares a {@link GLib.DateTime} to {@link GLib.DateTime.now_local} and returns a location, relative date and
		 * time string. Results appear as natural-language strings like "Now", "5m ago", "Yesterday"
		 *
		 * @param date_time a {@link GLib.DateTime} to compare against {@link GLib.DateTime.now_local}
		 *
		 * @return a localized, relative date and time string
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public static string get_relative_datetime (GLib.DateTime date_time);
		/**
		 * Compare two {@link GLib.DateTime} and return true if they occur on the same day of the same year
		 *
		 * @param day1 a {@link GLib.DateTime} to compare against day2
		 * @param day2 a {@link GLib.DateTime} to compare against day1
		 *
		 * @return true if day1 and day2 occur on the same day of the same year. False otherwise
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public static bool is_same_day (GLib.DateTime day1, GLib.DateTime day2);
		/**
		 * Converts seconds into the ISO 8601 standard date format for minutes (e.g. 100s to 01:40).
		 * Output of negative seconds is prepended with minus character.
		 *
		 * @param seconds the number of seconds to convert into ISO 8601
		 *
		 * @return returns an ISO 8601 formatted string
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public static string seconds_to_time (int seconds);
	}
	namespace FDO {
	}
	namespace Pantheon {
	}
	namespace Portal {
	}
	[CCode (gir_namespace = "GraniteServices", gir_version = "1.0")]
	namespace Services {
		/**
		 * Utilities for Applications
		 */
		namespace Application {
			/**
			 * Set the badge count, usually visible with the dock in the desktop. There is no guarantee
			 * that the target environment supports it in any way.
			 * For it to be visible, one has to make sure to call set_badge_visible().
			 */
			[CCode (cheader_filename = "granite-7.h")]
			public static async bool set_badge (int64 count) throws GLib.Error;
			/**
			 * Set the badge visibility.
			 */
			[CCode (cheader_filename = "granite-7.h")]
			public static async bool set_badge_visible (bool visible) throws GLib.Error;
			/**
			 * Set the progress of the application, usually visible with the dock in the desktop.
			 * There is no guarantee that the target environment supports it in any way.
			 * For it to be visible, one has to make sure to call set_progress_visible().
			 */
			[CCode (cheader_filename = "granite-7.h")]
			public static async bool set_progress (double progress) throws GLib.Error;
			/**
			 * Set the progress visibility.
			 */
			[CCode (cheader_filename = "granite-7.h")]
			public static async bool set_progress_visible (bool visible) throws GLib.Error;
		}
		/**
		 * Provides a convenient GObject wrapper around Contractor's D-bus API
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public class ContractorProxy : GLib.Object {
			/**
			 * Provides all the contracts.
			 *
			 * @return {@link Gee.List} containing all the contracts available in the system.
			 */
			public static Gee.List<Granite.Services.Contract> get_all_contracts () throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given mimetypes.
			 *
			 * @param mime_type Mimetype of file.
			 * @return {@link Gee.List} of contracts that support the given mimetype.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mime (string mime_type) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given mimetypes.
			 *
			 * Only the contracts that support all of the mimetypes are returned.
			 *
			 * @param mime_types Array of mimetypes.
			 * @return {@link Gee.List} of contracts that support the given mimetypes.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mimelist (string[] mime_types) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given file.
			 *
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.
			 *
			 * @param file An existing file.
			 * @return {@link Gee.List} of contracts applicable to the given file.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_file (GLib.File file) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given files.
			 *
			 * Only the contracts that support all of the files are returned.<<BR>>
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.<<BR>>
			 *
			 * @param files Array of existing files.
			 * @return {@link Gee.List} of contracts applicable to any of the given files.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_files (GLib.File[] files) throws GLib.Error;
			public static Granite.Services.ContractorProxy get_instance () throws GLib.Error;
			/**
			 * Emitted when the list of actions available to Contractor changes.
			 * Application should generally request the updated list of actions upon receiving this signal.
			 *
			 * This is not obligatory for frequently updated lists (e.g. in context menus), 
			 * but essential for applications that display action lists without re-requesting them.
			 */
			public signal void contracts_changed ();
		}
		/**
		 * Utility class for frequently-used system-related functions, such as opening files, launching
		 * applications, or executing terminal commands.
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public class System : GLib.Object {
			public System ();
			/**
			 * Returns whether history is enabled within the Security and Privacy system settings or not. A value of true
			 * means that you should store information such as the last opened file or a history within the app.
			 *
			 * Checks the "remember_recent_files" key in "org.gnome.desktop.privacy", returning true if the schema does not exist.
			 */
			public static bool history_is_enabled ();
		}
		/**
		 * Interface for executing and accessing properties of Contractor actions
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public interface Contract : GLib.Object {
			/**
			 * Executes the action on the given file
			 */
			public abstract void execute_with_file (GLib.File file) throws GLib.Error;
			/**
			 * Executes the action on the given list of files
			 */
			public abstract void execute_with_files (GLib.File[] files) throws GLib.Error;
			/**
			 * Returns the description of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Description' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_description ();
			/**
			 * Returns the display name of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Name' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_display_name ();
			/**
			 * Returns an icon for this contract
			 *
			 * @return {@link GLib.Icon} based on the 'Icon' key in the .contract file.
			 */
			public abstract GLib.Icon get_icon ();
		}
		/**
		 * This interface is used by objects that need to be serialized in a Settings.
		 * The object must have a string representation and provide these methods to
		 * translate between the string and object representations.
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public interface SettingsSerializable : GLib.Object {
			/**
			 * Un-serializes the object from a string representation.
			 *
			 * @param s the string representation of the object
			 */
			public abstract void settings_deserialize (string s);
			/**
			 * Serializes the object into a string representation.
			 *
			 * @return the string representation of the object
			 */
			public abstract string settings_serialize ();
		}
		/**
		 * thrown by {@link Granite.Services.ContractorProxy}
		 */
		[CCode (cheader_filename = "granite-7.h")]
		public errordomain ContractorError {
			/**
			 * Usually means that Contractor is not installed or not configured properly
			 *
			 * Contractor is not a compile-time dependency, so it is possible to
			 * install an application that uses it without installing Contractor.
			 *
			 * Upon receiving this error the application should disable its Contractor-related
			 * functionality, which typically means hiding the relevant UI elements.
			 */
			SERVICE_NOT_AVAILABLE
		}
	}
	/**
	 * Deep links to specific Settings pages.
	 */
	namespace SettingsUri {
		/**
		 * Link to open Security & Privacy → Location Services settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string LOCATION;
		/**
		 * Link to Network settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string NETWORK;
		/**
		 * Link to open Notifications settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string NOTIFICATIONS;
		/**
		 * Link to open Online Accounts settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string ONLINE_ACCOUNTS;
		/**
		 * Link to open Applications → Permissions settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string PERMISSIONS;
		/**
		 * Link to open Keyboard → Shortcuts → Custom settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string SHORTCUTS;
		/**
		 * Link to open Sound → Input settings page
		 */
		[CCode (cheader_filename = "granite-7.h")]
		[Version (since = "7.3.0")]
		public const string SOUND_INPUT;
	}
	namespace Widgets {
		/**
		 * This namespace contains functions to apply CSS stylesheets to widgets.
		 */
		namespace Utils {
			/**
			 * Applies colorPrimary property to the window. The colorPrimary property currently changes
			 * the color of the {@link Gtk.HeaderBar} and it's children so that the application window
			 * can have a so-called "brand color".
			 *
			 * Note that this currently only works with the default stylesheet that elementary OS uses.
			 *
			 * @param window the widget to apply the color, for most cases the widget will be actually the {@link Gtk.Window} itself
			 * @param color the color to apply
			 * @param priority priorty of change, by default {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
			 *
			 * @return the added {@link Gtk.CssProvider}, or null in case the parsing of
			 *         stylesheet failed.
			 */
			[CCode (cheader_filename = "granite-7.h")]
			public static Gtk.CssProvider? set_color_primary (Gtk.Widget window, Gdk.RGBA color, int priority = Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
		}
	}
	/**
	 * AccelLabel is meant to be used as a {@link Gtk.MenuItem} child for displaying
	 * a {@link GLib.Action}'s accelerator alongside the Menu Item label.
	 *
	 * The class itself is similar to it's Gtk equivalent {@link Gtk.AccelLabel}
	 * but follows elementary OS design conventions. Specifically, this class uses
	 * {@link Granite.accel_to_string} for accelerator string parsing.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var copy_menuitem = new Gtk.MenuItem ();
	 *   copy_menuitem.set_action_name (ACTION_PREFIX + ACTION_COPY);
	 *   copy_menuitem.add (new Granite.AccelLabel.from_action_name (_("Copy"), copy_menuitem.action_name));
	 * }}}
	 *
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class AccelLabel : Gtk.Box {
		/**
		 * Creates a new AccelLabel from a label and an accelerator string
		 *
		 * @param label displayed to the user as the menu item name
		 * @param accel an accelerator label like “<Control>a” or “<Super>Right”
		 */
		public AccelLabel (string label, string? accel_string = null);
		/**
		 * Creates a new AccelLabel from a label and an action name
		 *
		 * @param label displayed to the user as the menu item name
		 * @param action_name name of the {@link GLib.Action} used to retrieve action accelerators
		 */
		public AccelLabel.from_action_name (string label, string action_name);
		/**
		 * A {@link Gtk.accelerator_parse} style accel string like “<Control>a” or “<Super>Right”
		 */
		public string? accel_string { get; set construct; }
		/**
		 * The name of the {@link GLib.Action} used to retrieve action accelerators
		 */
		public string action_name { get; set construct; }
		/**
		 * The user-facing menu item label
		 */
		public string label { get; set construct; }
	}
	/**
	 * This class allows users to pick dates from a calendar.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class DatePicker : Gtk.Entry, Gtk.Buildable {
		public DatePicker ();
		/**
		 * Makes a new DatePicker
		 *
		 * @param format desired format of new DatePicker
		 */
		public DatePicker.with_format (string format);
		/**
		 * Current Date
		 */
		public GLib.DateTime date { get; set; }
		/**
		 * Desired format of DatePicker
		 */
		public string format { get; construct; }
	}
	/**
	 * Granite.Dialog is a styled {@link Gtk.Dialog} that uses an empty title area and
	 * action widgets in the bottom/end position.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var header = new Granite.HeaderLabel ("Header");
	 *   var entry = new Gtk.Entry ();
	 *   var gtk_switch = new Gtk.Switch () {
	 *       halign = Gtk.Align.START
	 *   };
	 *
	 *   var layout = new Gtk.Grid () {
	 *       row_spacing = 12
	 *   };
	 *   layout.attach (header, 0, 1);
	 *   layout.attach (entry, 0, 2);
	 *   layout.attach (gtk_switch, 0, 3);
	 *
	 *   var dialog = new Granite.Dialog () {
	 *       transient_for = window
	 *   };
	 *   dialog.content_area.add (layout);
	 *   dialog.add_button ("Cancel", Gtk.ResponseType.CANCEL);
	 *
	 *   var suggested_button = dialog.add_button ("Suggested Action", Gtk.ResponseType.ACCEPT);
	 *   suggested_button.get_style_context ().add_class (Gtk.STYLE_CLASS_SUGGESTED_ACTION);
	 *
	 *   dialog.show_all ();
	 *   dialog.response.connect ((response_id) => {
	 *       if (response_id == Gtk.ResponseType.ACCEPT) {
	 *           // Do Something
	 *       }
	 *
	 *       dialog.destroy ();
	 *   });
	 * }}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class Dialog : Gtk.Dialog {
		/**
		 * Constructs a new {@link Granite.Dialog}.
		 */
		public Dialog ();
		public override void constructed ();
	}
	/**
	 * HeaderLabel is a start-aligned {@link Gtk.Label} with the Granite H4 style class
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class HeaderLabel : Gtk.Widget {
		/**
		 * Create a new HeaderLabel
		 */
		public HeaderLabel (string label);
		/**
		 * The primary header label string
		 */
		public string label { get; set construct; }
		/**
		 * Optional secondary label string displayed below the header
		 */
		[Version (since = "7.1.0")]
		public string? secondary_text { get; set; }
	}
	/**
	 * This class enables navigatable URLs in Gtk.TextView
	 * @since 6.1.3
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class HyperTextView : Gtk.TextView {
		public HyperTextView ();
	}
	/**
	 * MessageDialog is an elementary OS styled dialog used to display a message to the user.
	 *
	 * The class itself is similar to it's Gtk equivalent {@link Gtk.MessageDialog}
	 * but follows elementary OS design conventions.
	 *
	 * See [[https://elementary.io/docs/human-interface-guidelines#dialogs|The Human Interface Guidelines for dialogs]]
	 * for more detailed disscussion on the dialog wording and design.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var message_dialog = new Granite.MessageDialog.with_image_from_icon_name (
	 *      "This is a primary text",
	 *      "This is a secondary, multiline, long text. This text usually extends the primary text and prints e.g: the details of an error.",
	 *      "applications-development",
	 *      Gtk.ButtonsType.CLOSE
	 *   );
	 *
	 *   var custom_widget = new Gtk.CheckButton.with_label ("Custom widget");
	 *   custom_widget.show ();
	 *
	 *   message_dialog.custom_bin.add (custom_widget);
	 *   message_dialog.run ();
	 *   message_dialog.destroy ();
	 * }}}
	 *
	 * {{../doc/images/MessageDialog.png}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class MessageDialog : Granite.Dialog {
		/**
		 * Constructs a new {@link Granite.MessageDialog}.
		 * See {@link Granite.Dialog} for more details.
		 *
		 * @param primary_text the title of the dialog
		 * @param secondary_text the body of the dialog
		 * @param image_icon the {@link GLib.Icon} that is displayed on the left side of the dialog
		 * @param buttons the {@link Gtk.ButtonsType} value that decides what buttons to use, defaults to {@link Gtk.ButtonsType.CLOSE},
		 *        see {@link Granite.MessageDialog.buttons} on details and what values are accepted
		 */
		public MessageDialog (string primary_text, string secondary_text, GLib.Icon image_icon, Gtk.ButtonsType buttons = Gtk.ButtonsType.CLOSE);
		/**
		 * Shows a terminal-like widget for error details that can be expanded by the user.
		 *
		 * This method can be useful to provide the user extended error details in a
		 * terminal-like text view. Calling this method will not add any widgets to the
		 * {@link Granite.MessageDialog.custom_bin}.
		 *
		 * Subsequent calls to this method will change the error message to a new one.
		 *
		 * @param error_message the detailed error message to display
		 */
		public void show_error_details (string error_message);
		/**
		 * Constructs a new {@link Granite.MessageDialog} with an icon name as it's icon displayed in the image.
		 * This constructor is same as the main one but with a difference that
		 * you can pass an icon name string instead of manually creating the {@link GLib.Icon}.
		 *
		 * The {@link Granite.MessageDialog.image_icon} will store the created icon
		 * so you can retrieve it later with {@link GLib.Icon.to_string}.
		 *
		 * See {@link Gtk.Dialog} for more details.
		 *
		 * @param primary_text the title of the dialog
		 * @param secondary_text the body of the dialog
		 * @param image_icon_name the icon name to create the dialog image with
		 * @param buttons the {@link Gtk.ButtonsType} value that decides what buttons to use, defaults to {@link Gtk.ButtonsType.CLOSE},
		 *        see {@link Granite.MessageDialog.buttons} on details and what values are accepted
		 */
		public MessageDialog.with_image_from_icon_name (string primary_text, string secondary_text, string image_icon_name = "dialog-information", Gtk.ButtonsType buttons = Gtk.ButtonsType.CLOSE);
		/**
		 * The {@link GLib.Icon} that is used to display a badge, bottom-end aligned,
		 * over the image on the left side of the dialog.
		 */
		public GLib.Icon badge_icon { owned get; set; }
		/**
		 * The {@link Gtk.ButtonsType} value to display a set of buttons
		 * in the dialog.
		 *
		 * By design, some actions are not acceptable and such action values will not be added to the dialog, these include:
		 *
		 *  * {@link Gtk.ButtonsType.OK}
		 *  * {@link Gtk.ButtonsType.YES_NO}
		 *  * {@link Gtk.ButtonsType.OK_CANCEL}
		 *
		 * If you wish to provide more specific actions for your dialog
		 * pass a {@link Gtk.ButtonsType.NONE} to {@link Granite.MessageDialog.MessageDialog} and manually
		 * add those actions with {@link Gtk.Dialog.add_buttons} or {@link Gtk.Dialog.add_action_widget}.
		 */
		public Gtk.ButtonsType buttons { construct; }
		/**
		 * The custom area to add custom widgets.
		 *
		 * This bin can be used to add any custom widget to the message area such as a {@link Gtk.ComboBox} or {@link Gtk.CheckButton}.
		 *
		 * When adding a custom widget to the custom bin, the {@link Granite.MessageDialog.secondary_label}'s bottom margin will be expanded automatically
		 * to compensate for the additional widget in the dialog.
		 * Removing the previously added widget will remove the bottom margin.
		 *
		 * If you don't want to have any margin between your custom widget and the {@link Granite.MessageDialog.secondary_label}, simply add your custom widget
		 * and then set the {@link Gtk.Label.margin_bottom} of {@link Granite.MessageDialog.secondary_label} to 0.
		 */
		public Gtk.Box custom_bin { get; construct; }
		/**
		 * The {@link GLib.Icon} that is used to display the image
		 * on the left side of the dialog.
		 */
		public GLib.Icon image_icon { owned get; set; }
		/**
		 * The {@link Gtk.Label} that displays the {@link Granite.MessageDialog.primary_text}.
		 *
		 * Most of the times, you will only want to modify the {@link Granite.MessageDialog.primary_text} string,
		 * this is available to set additional properites like {@link Gtk.Label.use_markup} if you wish to do so.
		 */
		public Gtk.Label primary_label { get; construct; }
		/**
		 * The primary text, title of the dialog.
		 */
		public string primary_text { get; set; }
		/**
		 * The {@link Gtk.Label} that displays the {@link Granite.MessageDialog.secondary_text}.
		 *
		 * Most of the times, you will only want to modify the {@link Granite.MessageDialog.secondary_text} string,
		 * this is available to set additional properites like {@link Gtk.Label.use_markup} if you wish to do so.
		 */
		public Gtk.Label secondary_label { get; construct; }
		/**
		 * The secondary text, body of the dialog.
		 */
		public string secondary_text { get; set; }
	}
	/**
	 * ModeSwitch is a selection control for choosing between two options that can be described with an icon.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var gtk_settings = Gtk.Settings.get_default ();
	 *
	 *   var mode_switch = new ModeSwitch.from_icon_name ("display-brightness-symbolic", "weather-clear-night-symbolic");
	 *   mode_switch.primary_icon_tooltip_text = _("Light background");
	 *   mode_switch.secondary_icon_tooltip_text = _("Dark background");
	 *   mode_switch.bind_property ("active", gtk_settings, "gtk_application_prefer_dark_theme");
	 * }}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class ModeSwitch : Gtk.Box {
		/**
		 * Constructs a new {@link Granite.ModeSwitch} using {@link GLib.Icon}s.
		 *
		 * @param primary_icon_gicon The {@link GLib.Icon} to use for the primary icon for the switch.
		 * @param secondary_icon_gicon The {@link GLib.Icon} to use for the secondary icon for the switch.
		 */
		public ModeSwitch (GLib.Icon primary_icon_gicon, GLib.Icon secondary_icon_gicon);
		/**
		 * Constructs a new {@link Granite.ModeSwitch} from icon names.
		 *
		 * @param primary_icon_name The icon name to use for the primary icon for the switch.
		 * @param secondary_icon_name The icon name to use for the secondary icon for the switch.
		 */
		public ModeSwitch.from_icon_name (string primary_icon_name, string secondary_icon_name);
		/**
		 * Whether the {@link Gtk.Switch} widget is pointing to the secondary icon or not.
		 */
		public bool active { get; set; }
		/**
		 * The {@link GLib.Icon} to use for the primary icon for the switch.
		 */
		public GLib.Icon primary_icon_gicon { get; set construct; }
		/**
		 * The icon name to use for the primary icon for the switch.
		 */
		public string primary_icon_name { get; set construct; }
		/**
		 * The contents of the tooltip on the primary icon.
		 */
		public string primary_icon_tooltip_text { get; set; }
		/**
		 * The {@link GLib.Icon} to use for the secondary icon for the switch.
		 */
		public GLib.Icon secondary_icon_gicon { get; set construct; }
		/**
		 * The icon name to use for the secondary icon for the switch.
		 */
		public string secondary_icon_name { get; set construct; }
		/**
		 * The contents of the tooltip on the secondary icon.
		 */
		public string secondary_icon_tooltip_text { get; set; }
	}
	/**
	 * A floating status bar that displays a single line of text.
	 *
	 * This widget is intended to be used as an overlay for a {@link Gtk.Overlay} and is placed in the
	 * bottom-right corner by default. You can change its position like you would do for any overlay
	 * widget used in a {@link Gtk.Overlay}.
	 *
	 * The Overlay Bar displays a single line of text that can be changed using the "status" property.
	 *
	 * {{../doc/images/OverlayBar.png}}
	 *
	 * This widget tries to avoid getting in front of the content being displayed inside the {@link Gtk.Overlay}
	 * by moving itself horizontally to the opposite side from the current one when the mouse pointer enters
	 * the widget.
	 *
	 * For this widget to function correctly, the event {@link Gdk.EventMask.ENTER_NOTIFY_MASK} must be set
	 * for the parent {@link Gtk.Overlay}. Overlay Bar's constructor takes care of this automatically, if
	 * the parent is supplied as a parameter, but you have to be careful not to unset the event for
	 * the {@link Gtk.Overlay} at a later stage.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 * public class OverlayBarView : Gtk.Overlay {
	 *     construct {
	 *         var button = new Gtk.ToggleButton.with_label ("Show Spinner");
	 *
	 *         var box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 6) {
	 *             halign = Gtk.Align.CENTER,
	 *             valign = Gtk.Align.CENTER
	 *         };
	 *         grid.append (button);
	 *
	 *         var overlaybar = new Granite.OverlayBar (this) {
	 *             label = "Hover the OverlayBar to change its position"
	 *         };
	 *
	 *         child = box;
	 *
	 *         button.toggled.connect (() => {
	 *             overlaybar.active = button.active;
	 *         });
	 *     }
	 * }
	 * }}}
	 *
	 * @see Gtk.Overlay
	 *
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class OverlayBar : Gtk.Widget {
		/**
		 * Create a new Overlay Bar, and add it to the {@link Gtk.Overlay}.
		 */
		public OverlayBar (Gtk.Overlay? overlay = null);
		/**
		 * Whether to display a {@link Gtk.Spinner} inside the Overlay Bar.
		 */
		public bool active { get; set; }
		/**
		 * Text displayed inside the Overlay Bar.
		 */
		public string label { get; set; }
		/**
		 * {@link Gtk.Overlay} to add #this to
		 */
		public Gtk.Overlay? overlay { get; construct; }
	}
	/**
	 * Placeholder is used to provide further information in an empty view such as a {@link Gtk.ListBox} or when onboarding.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var alert = new Granite.Placeholder ("Panic! At the Button") {
	 *       description = "Maybe you can <b>do something</b> to hide it but <i>otherwise</i> it will stay here",
	 *       icon = new ThemedIcon ("dialog-warning")
	 *   };
	 *
	 *   var alert_action = alert.append_button (
	 *       new ThemedIcon ("edit-delete"),
	 *       "Hide This Button",
	 *       "Click here to hide this"
	 *   );
	 * }}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class Placeholder : Gtk.Widget {
		/**
		 * Constructs a new {@link Granite.Placeholder} with title text only.
		 *
		 * @param title The {@link string} to use for the primary text
		 */
		public Placeholder (string title);
		/**
		 * Appends new {@link Gtk.Button} to the placeholder's action area
		 *
		 * @param icon the {@link GLib.Icon} that describes this action
		 * @param label a {@link string} to use as the title for this action. It should use Title Case.
		 * @param description a {@link string} to use as a description for this action. It should use sentence case.
		 * @return a {@link Gtk.Button} representing this action
		 */
		public Gtk.Button append_button (GLib.Icon icon, string label, string description);
		/**
		 * The {@link string} to use for description text
		 */
		public string description { get; set; }
		/**
		 * The {@link GLib.Icon} to use as the primary icon
		 */
		public GLib.Icon icon { get; set; }
		/**
		 * The {@link string} to use for the primary text
		 */
		public string title { get; set construct; }
	}
	/**
	 * Granite.Settings provides a way to share Pantheon desktop settings with applications.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class Settings : GLib.Object {
		/**
		 * Possible color scheme preferences expressed by the user
		 */
		public enum ColorScheme {
			/**
			 * The user has not expressed a color scheme preference. Apps should decide on a color scheme on their own.
			 */
			NO_PREFERENCE,
			/**
			 * The user prefers apps to use a dark color scheme.
			 */
			DARK,
			/**
			 * The user prefers a light color scheme.
			 */
			LIGHT
		}
		public static unowned Granite.Settings get_default ();
		/**
		 * Whether the user would prefer if apps use a dark or light color scheme or if the user has expressed no preference.
		 *
		 * To access this from a Flatpak application, add an entry with the value `'--system-talk-name=org.freedesktop.Accounts'`
		 * in the `finish-args` array of your Flatpak manifest.
		 */
		public Granite.Settings.ColorScheme prefers_color_scheme { get; private set; }
	}
	/**
	 * AbstractSettingsPage is a {@link Gtk.ScrolledWindow} subclass with properties used
	 * by other Granite settings widgets.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public abstract class SettingsPage : Gtk.Box {
		/**
		 * Used to display a status icon overlayed on the display_widget in a Granite.SettingsSidebar
		 */
		public enum StatusType {
			ERROR,
			OFFLINE,
			SUCCESS,
			WARNING,
			NONE
		}
		protected string _icon_name;
		protected string _title;
		protected SettingsPage ();
		public new Gtk.Widget child { get; set; }
		/**
		 * A widget to display in place of an icon in a Granite.SettingsSidebar
		 */
		public Gtk.Widget? display_widget { get; construct; }
		/**
		 * A header to be sorted under in a Granite.SettingsSidebar
		 */
		public string? header { get; construct; }
		/**
		 * An icon name to be displayed in a Granite.SettingsSidebar
		 */
		public string? icon_name { get; set construct; }
		/**
		 * A status string to be displayed underneath the title in a Granite.SettingsSidebar
		 */
		public string status { get; set construct; }
		/**
		 * Selects a colored icon to be displayed in a Granite.SettingsSidebar
		 */
		public Granite.SettingsPage.StatusType status_type { get; set; }
		/**
		 * A title to be displayed in a Granite.SettingsSidebar
		 */
		public string title { get; set construct; }
	}
	/**
	 * SettingsSidebar acts as a controller for a Gtk.Stack; it shows a row of buttons
	 * to switch between the various pages of the associated stack widget.
	 *
	 * All the content for the rows comes from the child properties of a Granite.SettingsPage
	 * inside of the Gtk.Stack
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class SettingsSidebar : Gtk.Widget {
		/**
		 * Create a new SettingsSidebar
		 */
		public SettingsSidebar (Gtk.Stack stack);
		/**
		 * The Gtk.Stack to control
		 */
		public Gtk.Stack stack { get; construct; }
		/**
		 * The name of the currently visible Granite.SettingsPage
		 */
		public string? visible_child_name { get; set; }
	}
	/**
	 * SimpleSettingsPage is a widget divided into three sections: a predefined header,
	 * a content area, and an action area.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public abstract class SimpleSettingsPage : Granite.SettingsPage {
		/**
		 * Creates a new SimpleSettingsPage
		 * Deprecated: Subclass this instead.
		 */
		protected SimpleSettingsPage ();
		/**
		 * A {@link Gtk.Box} used as the action area for #this
		 */
		public Gtk.Box action_area { get; construct; }
		/**
		 * Creates a {@link Gtk.Switch} #status_switch in the header of #this
		 */
		public bool activatable { get; construct; }
		/**
		 * A {@link Gtk.Grid} used as the content area for #this
		 */
		public Gtk.Grid content_area { get; construct; }
		/**
		 * Creates a {@link Gtk.Label} with a page description in the header of #this
		 */
		public string description { get; set construct; }
		/**
		 * A {@link Gtk.Switch} that appears in the header area when #this.activatable is #true. #status_switch will be #null when #this.activatable is #false
		 */
		public Gtk.Switch? status_switch { get; construct; }
	}
	/**
	 * SwitchModelButton is a {@link Gtk.ToggleButton} containing a {@link Gtk.Label}
	 * and a {@link Gtk.Switch} and using the menuitem css name. It can optionally
	 * show description text when activated.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var switchmodelbutton = new Granite.SwitchModelButton ("With Description") {
	 *       active = true,
	 *       description = "A description of additional affects related to the activation state of this switch"
	 *   };
	 * }}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class SwitchModelButton : Gtk.ToggleButton {
		public SwitchModelButton (string text);
		/**
		 * Small, dim description text shown when active.
		 */
		public string? description { get; set; }
		/**
		 * The label for the button.
		 */
		public string text { get; set construct; }
	}
	/**
	 * This widget allows users to easily pick a time.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class TimePicker : Gtk.Entry {
		public TimePicker ();
		/**
		 * Creates a new TimePicker.
		 *
		 * @param format_12 The desired custom 12h format. For example "%l:%M %p".
		 * @param format_24 The desired custom 24h format. For example "%H:%M".
		 */
		public TimePicker.with_format (string format_12, string format_24);
		/**
		 * Format used in 12h mode
		 */
		public string format_12 { get; construct; }
		/**
		 * Format used in 24h mode
		 */
		public string format_24 { get; construct; }
		/**
		 * Current time
		 */
		public GLib.DateTime time { get; set; }
		/**
		 * Sent when the time got changed
		 */
		public signal void time_changed ();
	}
	/**
	 * Toasts are small in-app notifications that provide feedback about an operation
	 * in a small popup. They only fill the space required to show the message and do
	 * not block the UI.
	 *
	 * Granite.Widgets.Toast will get the style class .app-notification
	 *
	 * {{../doc/images/Toast.png}}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class Toast : Gtk.Widget {
		/**
		 * Creates a new Toast with #title as its title
		 */
		public Toast (string title);
		/**
		 * Sends the Toast on behalf of #this
		 */
		public void send_notification ();
		/**
		 * Sets the default action button label of #this to #label and hides the
		 * button if #label is #null.
		 */
		public void set_default_action (string? label);
		/**
		 * The notification text label to be displayed inside of #this
		 */
		public string title { get; set construct; }
		/**
		 * Emitted when the Toast is closed by activating the close button
		 */
		public signal void closed ();
		/**
		 * Emitted when the default action button is activated
		 */
		public signal void default_action ();
	}
	/**
	 * ValidatedEntry is a {@link Gtk.Entry} subclass that is meant to be used in
	 * forms where input must be validated before the form can be submitted. It
	 * provides feedback to users about the state of input validation and keeps
	 * track of its own validation state. By default, input is considered invalid.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var validated_entry = new Granite.ValidatedEntry ();
	 *   username_entry.changed.connect (() => {
	 *       username_entry.is_valid = username_entry.text == "valid input";
	 *   });
	 * }}}
	 *
	 * If the ValidatedEntry.from_regex () constructor is used then the entry automatically
	 * sets its validity status. A valid regex must be passed to this constructor.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   Regex? regex = null;
	 *   ValidatedEntry only_lower_case_letters_entry;
	 *   try {
	 *       regex = new Regex ("^[a-z]*$");
	 *       only_lower_case_letters_entry = new ValidatedEntry.from_regex (regex);
	 *   } catch (Error e) {
	 *       critical (e.message);
	 *       // Provide a fallback entry
	 *   }
	 * }}}
	 
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public class ValidatedEntry : Gtk.Entry {
		public ValidatedEntry ();
		public ValidatedEntry.from_regex (GLib.Regex regex_arg);
		/**
		 * Whether or not text is considered valid input
		 */
		public bool is_valid { get; set; }
		public int min_length { get; set; }
		public GLib.Regex regex { get; set construct; }
	}
	/**
	 * Style class to give accent color to a {@link Gtk.Label} or symbolic icon
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_ACCENT;
	/**
	 * Style class to match the window background
	 */
	[CCode (cheader_filename = "granite-7.h")]
	[Version (since = "7.1.0")]
	public const string STYLE_CLASS_BACKGROUND;
	/**
	 * Style class for shaping a {@link Gtk.Button}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_BACK_BUTTON;
	/**
	 * Style class for numbered badges
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_BADGE;
	/**
	 * Style class for adding a small shadow to a container such as for image thumbnails
	 *
	 * Can be combined with the style class ".collapsed" to further reduce the size of the shadow
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_CARD;
	/**
	 * Style class for checkered backgrounds to represent transparency in images
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_CHECKERBOARD;
	/**
	 * Style class for a circular {@link Gtk.Button}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_CIRCULAR;
	/**
	 * Style class for color chooser buttons to be applied to {@link Gtk.CheckButton} or {@link Gtk.RadioButton}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_COLOR_BUTTON;
	/**
	 * Style class for slim headerbars, like in Terminal
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_DEFAULT_DECORATION;
	/**
	 * Style class for {@link Gtk.Button} with a destructive action
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_DESTRUCTIVE_ACTION;
	/**
	 * Style class for the content area in dialogs.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_DIALOG_CONTENT_AREA;
	/**
	 * Style class for dimmed labels.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_DIM_LABEL;
	/**
	 * Style class for widgets in error state.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_ERROR;
	/**
	 * Style class for flattened widgets, such as buttons,
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_FLAT;
	/**
	 * Style class for adding a border to {@link Gtk.ListBox}, {@link Gtk.InfoBar}, and others
	 */
	[CCode (cheader_filename = "granite-7.h")]
	[Version (since = "7.1.0")]
	public const string STYLE_CLASS_FRAME;
	/**
	 * Style class for large primary text as seen in {@link Granite.Widgets.Welcome}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_H1_LABEL;
	/**
	 * Style class for large seondary text as seen in {@link Granite.Widgets.Welcome}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_H2_LABEL;
	/**
	 * Style class for small primary text
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_H3_LABEL;
	/**
	 * Style class for a {@link Granite.HeaderLabel}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_H4_LABEL;
	/**
	 * Style class for a {@link Gtk.Label} to be displayed as a keyboard key cap
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_KEYCAP;
	/**
	 * Style class for a {@link Gtk.Image} used to set a context-aware large icon size. By default this is 32px,
	 * but in certain contexts it could be larger or smaller depending on the default assumed icon size.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_LARGE_ICONS;
	/**
	 * Style class for linked widgets, such as a box containing buttons belonging to the same control.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_LINKED;
	/**
	 * Style class for {@link Gtk.Popover} which is used as a menu.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_MENU;
	/**
	 * Style class for {@link Gtk.Popover} children which are used as menu items.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_MENUITEM;
	/**
	 * Style class for message dialogs.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_MESSAGE_DIALOG;
	/**
	 * Style class for a {@link Gtk.Switch} used to change between two modes rather than active and inactive states
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_MODE_SWITCH;
	/**
	 * Style class for "on-screen display" widgets such as {@link Granite.Toast} and {@link Granite.OverlayBar}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_OSD;
	/**
	 * Style class for setting standard row padding and row height in a {@link Gtk.ListBox}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	[Version (since = "7.1.0")]
	public const string STYLE_CLASS_RICH_LIST;
	/**
	 * Style class for rounded corners, i.e. on a {@link Gtk.Window} or {@link Granite.STYLE_CLASS_CARD}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_ROUNDED;
	/**
	 * Style class defining a sidebar, such as the left side in a file chooser
	 */
	[CCode (cheader_filename = "granite-7.h")]
	[Version (since = "7.1.0")]
	public const string STYLE_CLASS_SIDEBAR;
	/**
	 * Style class for a {@link Gtk.Label} to emulate Pango's "<small>" and "size='smaller'"
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_SMALL_LABEL;
	/**
	 * Style class for when an action (usually a button) is the primary suggested action in a specific context.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_SUGGESTED_ACTION;
	/**
	 * Style class for a temperature scale, a {@link Gtk.Scale} with a "cold" to "hot" color gradient
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_TEMPERATURE;
	/**
	 * Style class for {@link Gtk.Label} or {@link Gtk.TextView} to emulate the appearance of Terminal. This includes
	 * text color, background color, selection highlighting, and selecting the system monospace font.
	 *
	 * When used with {@link Gtk.Label} this style includes internal padding. When used with {@link Gtk.TextView}
	 * interal padding will need to be set with {@link Gtk.Container.border_width}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_TERMINAL;
	/**
	 * Style class for title label text in a {@link Granite.MessageDialog}
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_TITLE_LABEL;
	/**
	 * Style class for widgets which should use base color as their background
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_VIEW;
	/**
	 * Style class for a warmth scale, a {@link Gtk.Scale} with a "less warm" to "more warm" color gradient
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_WARMTH;
	/**
	 * Style class for widgets in warning state.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string STYLE_CLASS_WARNING;
	/**
	 * Pango markup to use for secondary text in a {@link Gtk.Tooltip}, such as for accelerators, extended descriptions, etc.
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const string TOOLTIP_SECONDARY_TEXT_MARKUP;
	/**
	 * Transition duration when a widget closes, hides a portion of its content, or exits the screen
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const int TRANSITION_DURATION_CLOSE;
	/**
	 * Transition duration when a widget transforms in-place, like when filtering content with a view switcher
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const int TRANSITION_DURATION_IN_PLACE;
	/**
	 * Transition duration when a widget opens, reveals more content, or enters the screen
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public const int TRANSITION_DURATION_OPEN;
	/**
	 * Converts a {@link Gtk.accelerator_parse} style accel string to a human-readable string.
	 *
	 * @param accel an accelerator label like “<Control>a” or “<Super>Right”
	 *
	 * @return a human-readable string like "Ctrl + A" or "⌘ + →"
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public static string accel_to_string (string? accel);
	/**
	 * Takes a {@link Gdk.RGBA} background color and returns a suitably-contrasting foreground color, i.e. for determining text color on a colored background. There is a slight bias toward returning white, as white generally looks better on a wider range of colored backgrounds than black.
	 *
	 * @param bg_color any {@link Gdk.RGBA} background color
	 *
	 * @return a contrasting {@link Gdk.RGBA} foreground color, i.e. white ({ 1.0, 1.0, 1.0, 1.0}) or black ({ 0.0, 0.0, 0.0, 1.0}).
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public static Gdk.RGBA contrasting_foreground_color (Gdk.RGBA bg_color);
	[CCode (cheader_filename = "granite-7.h")]
	[Version (since = "7.2.0")]
	public static void init ();
	/**
	 * Takes a description and an array of accels and returns {@link Pango} markup for use in a {@link Gtk.Tooltip}. This method uses {@link Granite.accel_to_string}.
	 *
	 * Example:
	 *
	 * Description
	 * Shortcut 1, Shortcut 2
	 *
	 * @param a string array of accelerator labels like {"<Control>a", "<Super>Right"}
	 *
	 * @param description a standard tooltip text string
	 *
	 * @return {@link Pango} markup with the description label on one line and a list of human-readable accels on a new line
	 */
	[CCode (cheader_filename = "granite-7.h")]
	public static string markup_accel_tooltip (string[]? accels, string? description = null);
}

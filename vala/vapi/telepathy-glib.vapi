/* telepathy-glib.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Tp", gir_namespace = "TelepathyGLib", gir_version = "0.12", lower_case_cprefix = "tp_")]
namespace TelepathyGLib {
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_account_get_type ()")]
	[Version (since = "0.7.32")]
	public class Account : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true)]
		public Account (TelepathyGLib.DBusDaemon bus_daemon, string object_path) throws GLib.Error;
		[Version (since = "0.13.8")]
		public bool associated_with_uri_scheme (string scheme);
		[Version (since = "0.13.16")]
		public unowned GLib.Binding bind_connection_status_to_property (void* target, string target_property, bool invert);
		[Version (since = "0.17.6")]
		public string? dup_detailed_error_vardict (out GLib.Variant details);
		[Version (since = "0.17.6")]
		public GLib.Variant dup_parameters_vardict ();
		[Version (since = "0.13.2")]
		public GLib.Variant dup_storage_identifier_variant ();
		[Version (since = "0.17.6")]
		public async GLib.Variant dup_storage_specific_information_vardict_async () throws GLib.Error;
		[Version (deprecated = true, since = "0.9.0")]
		public unowned TelepathyGLib.Connection ensure_connection (string path);
		[Version (since = "0.13.8")]
		public TelepathyGLib.ConnectionPresenceType get_automatic_presence (out unowned string status, out string status_message);
		[Version (since = "0.9.0")]
		public async unowned GLib.Array<uint8> get_avatar_async () throws GLib.Error;
		[Version (since = "0.11.6")]
		public bool get_changing_presence ();
		[Version (since = "0.19.3")]
		public unowned string get_cm_name ();
		[Version (since = "0.9.0")]
		public bool get_connect_automatically ();
		[Version (since = "0.9.0")]
		public unowned TelepathyGLib.Connection get_connection ();
		[Version (deprecated = true, since = "0.9.0")]
		public unowned string get_connection_manager ();
		[Version (since = "0.9.0")]
		public TelepathyGLib.ConnectionStatus get_connection_status (out TelepathyGLib.ConnectionStatusReason reason);
		[Version (since = "0.9.0")]
		public TelepathyGLib.ConnectionPresenceType get_current_presence (out string status, out string status_message);
		[Version (since = "0.9.0")]
		public unowned string get_display_name ();
		public static GLib.Quark get_feature_quark_addressing ();
		[Version (since = "0.15.5")]
		public static GLib.Quark get_feature_quark_connection ();
		[Version (since = "0.9.0")]
		public static GLib.Quark get_feature_quark_core ();
		[Version (since = "0.13.2")]
		public static GLib.Quark get_feature_quark_storage ();
		[Version (since = "0.9.0")]
		public bool get_has_been_online ();
		[Version (since = "0.9.0")]
		public unowned string get_icon_name ();
		[Version (since = "0.9.0")]
		public unowned string get_nickname ();
		[Version (since = "0.13.8")]
		public unowned string get_normalized_name ();
		[Version (since = "0.9.0")]
		public unowned GLib.HashTable<string,GLib.Value?> get_parameters ();
		[Version (since = "0.13.9")]
		public unowned string get_path_suffix ();
		[Version (deprecated = true, since = "0.9.0")]
		public unowned string get_protocol ();
		[Version (since = "0.19.3")]
		public unowned string get_protocol_name ();
		[Version (since = "0.9.0")]
		public TelepathyGLib.ConnectionPresenceType get_requested_presence (out unowned string status, out string status_message);
		[Version (since = "0.11.9")]
		public unowned string get_service ();
		[Version (since = "0.13.2")]
		public unowned GLib.Value? get_storage_identifier ();
		[Version (since = "0.13.2")]
		public unowned string get_storage_provider ();
		[Version (since = "0.13.2")]
		public TelepathyGLib.StorageRestrictionFlags get_storage_restrictions ();
		[Version (since = "0.13.2")]
		public async unowned GLib.HashTable<string,GLib.Value?> get_storage_specific_information_async () throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.17.5")]
		public unowned string[] get_supersedes ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.8")]
		public unowned string[] get_uri_schemes ();
		public static void init_known_interfaces ();
		[Version (since = "0.9.0")]
		public bool is_enabled ();
		[Version (since = "0.9.0")]
		public bool is_valid ();
		[Version (deprecated = true, since = "0.9.0")]
		public static bool parse_object_path (string object_path, out string cm, out string protocol, out string account_id) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool reconnect_async () throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool remove_async () throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool request_presence_async (TelepathyGLib.ConnectionPresenceType type, string status, string message) throws GLib.Error;
		[Version (since = "0.13.8")]
		public async bool set_automatic_presence_async (TelepathyGLib.ConnectionPresenceType type, string status, string message) throws GLib.Error;
		[Version (since = "0.11.1")]
		public async bool set_avatar_async ([CCode (array_length_cname = "len", array_length_pos = 1.5, array_length_type = "gsize")] uint8[]? avatar, string? mime_type) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool set_connect_automatically_async (bool connect_automatically) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool set_display_name_async (string display_name) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool set_enabled_async (bool enabled) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool set_icon_name_async (string icon_name) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool set_nickname_async (string nickname) throws GLib.Error;
		[Version (since = "0.11.9")]
		public async bool set_service_async (string service) throws GLib.Error;
		[Version (since = "0.13.8")]
		public async bool set_uri_scheme_association_async (string scheme, bool associate) throws GLib.Error;
		[Version (since = "0.9.0")]
		public async bool update_parameters_async (GLib.HashTable<string,GLib.Value?> parameters, string unset_parameters, [CCode (array_length = false, array_null_terminated = true)] out string[] reconnect_required) throws GLib.Error;
		[Version (since = "0.17.6")]
		public async bool update_parameters_vardict_async (GLib.Variant parameters, [CCode (array_length = false, array_null_terminated = true)] string[] unset_parameters, [CCode (array_length = false, array_null_terminated = true)] out string[] reconnect_required) throws GLib.Error;
		[NoAccessorMethod]
		[Version (since = "0.13.8")]
		public uint automatic_presence_type { get; }
		[NoAccessorMethod]
		[Version (since = "0.13.8")]
		public string automatic_status { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.13.8")]
		public string automatic_status_message { owned get; }
		[Version (since = "0.11.6")]
		public bool changing_presence { get; }
		[Version (since = "0.19.3")]
		public string cm_name { get; }
		[Version (since = "0.9.0")]
		public bool connect_automatically { get; }
		[Version (since = "0.9.0")]
		public TelepathyGLib.Connection connection { get; }
		[NoAccessorMethod]
		[Version (since = "0.11.7")]
		public string connection_error { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.11.7")]
		public GLib.HashTable<void*,void*> connection_error_details { owned get; }
		[Version (deprecated = true, since = "0.9.0")]
		public string connection_manager { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public uint connection_status { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public uint connection_status_reason { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public uint current_presence_type { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public string current_status { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public string current_status_message { owned get; }
		[Version (since = "0.9.0")]
		public string display_name { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public bool enabled { get; }
		[Version (since = "0.9.0")]
		public bool has_been_online { get; }
		[Version (since = "0.9.0")]
		public string icon_name { get; }
		[Version (since = "0.9.0")]
		public string nickname { get; }
		[Version (since = "0.13.8")]
		public string normalized_name { get; }
		[Version (deprecated = true, since = "0.9.0")]
		public string protocol { get; }
		[Version (since = "0.19.3")]
		public string protocol_name { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public uint requested_presence_type { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public string requested_status { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public string requested_status_message { owned get; }
		[Version (since = "0.11.9")]
		public string service { get; }
		[Version (since = "0.13.2")]
		public GLib.Value storage_identifier { get; }
		[NoAccessorMethod]
		[Version (since = "0.13.2")]
		public GLib.Variant storage_identifier_variant { owned get; }
		[Version (since = "0.13.2")]
		public string storage_provider { get; }
		[Version (since = "0.13.2")]
		public uint storage_restrictions { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.17.5")]
		public string[] supersedes { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.21.0")]
		public string[] uri_schemes { get; }
		[NoAccessorMethod]
		[Version (since = "0.9.0")]
		public bool valid { get; }
		[Version (since = "0.23.0")]
		public signal void avatar_changed ();
		[Version (since = "0.9.0")]
		public signal void presence_changed (uint presence, string status, string status_message);
		[Version (since = "0.9.0")]
		public signal void status_changed (uint old_status, uint new_status, uint reason, string? dbus_error_name, GLib.HashTable<string,GLib.Value?> details);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_account_channel_request_get_type ()")]
	[Version (since = "0.11.12")]
	public sealed class AccountChannelRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public AccountChannelRequest (TelepathyGLib.Account account, GLib.HashTable<string,GLib.Value?> request, int64 user_action_time);
		[CCode (has_construct_function = false)]
		[Version (since = "0.19.0")]
		public AccountChannelRequest.audio_call (TelepathyGLib.Account account, int64 user_action_time);
		[CCode (has_construct_function = false)]
		[Version (since = "0.19.0")]
		public AccountChannelRequest.audio_video_call (TelepathyGLib.Account account, int64 user_action_time);
		public async TelepathyGLib.Channel? create_and_handle_channel_async (GLib.Cancellable? cancellable, out TelepathyGLib.HandleChannelsContext context) throws GLib.Error;
		[Version (since = "0.13.14")]
		public async TelepathyGLib.Channel create_and_observe_channel_async (string preferred_handler, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool create_channel_async (string preferred_handler, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "0.23.2")]
		public AccountChannelRequest.dbus_tube (TelepathyGLib.Account account, string service_name, int64 user_action_time);
		[Version (since = "0.19.10")]
		public GLib.Variant dup_request ();
		public async TelepathyGLib.Channel? ensure_and_handle_channel_async (GLib.Cancellable? cancellable, out TelepathyGLib.HandleChannelsContext context) throws GLib.Error;
		[Version (since = "0.13.14")]
		public async TelepathyGLib.Channel ensure_and_observe_channel_async (string preferred_handler, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool ensure_channel_async (string preferred_handler, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "0.19.0")]
		public AccountChannelRequest.file_transfer (TelepathyGLib.Account account, string filename, string? mime_type, uint64 size, int64 user_action_time);
		public unowned TelepathyGLib.Account get_account ();
		[Version (since = "0.13.13")]
		public unowned TelepathyGLib.ChannelRequest get_channel_request ();
		public unowned GLib.HashTable<void*,void*> get_request ();
		public int64 get_user_action_time ();
		[Version (deprecated = true, since = "0.13.2")]
		public void set_channel_factory (TelepathyGLib.ClientChannelFactory factory);
		[Version (since = "0.23.2")]
		public void set_conference_initial_channels (string channels);
		[Version (since = "0.15.3")]
		public void set_delegate_to_preferred_handler (bool @delegate);
		[Version (since = "0.15.3")]
		public void set_delegated_channel_callback (owned TelepathyGLib.AccountChannelRequestDelegatedChannelCb callback);
		[Version (since = "0.19.0")]
		public void set_file_transfer_description (string description);
		[Version (since = "0.23.2")]
		public void set_file_transfer_hash (TelepathyGLib.FileHashType hash_type, string hash);
		[Version (since = "0.19.0")]
		public void set_file_transfer_initial_offset (uint64 offset);
		[Version (since = "0.19.0")]
		public void set_file_transfer_timestamp (uint64 timestamp);
		[Version (since = "0.19.0")]
		public void set_file_transfer_uri (string uri);
		[Version (since = "0.19.8")]
		public void set_hint (string key, GLib.Variant value);
		[Version (since = "0.13.14")]
		public void set_hints (GLib.HashTable<void*,void*> hints);
		[Version (since = "0.23.2")]
		public void set_initial_invitee_ids (string ids);
		[Version (since = "0.23.2")]
		public void set_initial_invitees (GLib.GenericArray<TelepathyGLib.Contact> contacts);
		[Version (since = "0.19.0")]
		public void set_request_property (string name, GLib.Variant value);
		[Version (since = "0.23.2")]
		public void set_sms_channel (bool is_sms_channel);
		[Version (since = "0.19.0")]
		public void set_target_contact (TelepathyGLib.Contact contact);
		[Version (since = "0.19.0")]
		public void set_target_id (TelepathyGLib.HandleType handle_type, string identifier);
		[CCode (has_construct_function = false)]
		[Version (since = "0.23.2")]
		public AccountChannelRequest.stream_tube (TelepathyGLib.Account account, string service, int64 user_action_time);
		[CCode (has_construct_function = false)]
		[Version (since = "0.19.0")]
		public AccountChannelRequest.text (TelepathyGLib.Account account, int64 user_action_time);
		[CCode (has_construct_function = false)]
		[Version (since = "0.19.10")]
		public AccountChannelRequest.vardict (TelepathyGLib.Account account, GLib.Variant request, int64 user_action_time);
		public TelepathyGLib.Account account { get; construct; }
		public TelepathyGLib.ChannelRequest channel_request { get; }
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant request_vardict { owned get; construct; }
		public int64 user_action_time { get; construct; }
		public signal void re_handled (TelepathyGLib.Channel channel, int64 user_action_time, TelepathyGLib.HandleChannelsContext context);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_account_manager_get_type ()")]
	[Version (since = "0.7.32")]
	public class AccountManager : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public AccountManager (TelepathyGLib.DBusDaemon bus_daemon);
		[Version (since = "0.19.6")]
		public static bool can_set_default ();
		[Version (since = "0.9.0")]
		public async unowned TelepathyGLib.Account create_account_async (string connection_manager, string protocol, string display_name, GLib.HashTable<string,GLib.Value?> parameters, GLib.HashTable<string,GLib.Value?> properties) throws GLib.Error;
		[Version (since = "0.9.0")]
		public static TelepathyGLib.AccountManager dup ();
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.Account> dup_valid_accounts ();
		public void enable_restart ();
		[Version (deprecated = true, since = "0.9.0")]
		public unowned TelepathyGLib.Account ensure_account (string path);
		[Version (since = "0.9.0")]
		public static GLib.Quark get_feature_quark_core ();
		[Version (since = "0.9.0")]
		public TelepathyGLib.ConnectionPresenceType get_most_available_presence (out string status, out string message);
		[Version (deprecated = true, since = "0.9.0")]
		public GLib.List<weak TelepathyGLib.Account> get_valid_accounts ();
		public static void init_known_interfaces ();
		[Version (since = "0.9.0")]
		public void set_all_requested_presences (TelepathyGLib.ConnectionPresenceType type, string status, string message);
		[Version (since = "0.15.5")]
		public void set_default ();
		[CCode (has_construct_function = false)]
		public AccountManager.with_factory (TelepathyGLib.SimpleClientFactory factory);
		[Version (since = "0.9.0")]
		public signal void account_disabled (TelepathyGLib.Account account);
		[Version (since = "0.9.0")]
		public signal void account_enabled (TelepathyGLib.Account account);
		[Version (since = "0.9.0")]
		public signal void account_removed (TelepathyGLib.Account account);
		[Version (since = "0.9.0")]
		public signal void account_validity_changed (TelepathyGLib.Account account, bool valid);
		[Version (since = "0.9.0")]
		public signal void most_available_presence_changed (uint presence, string status, string message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_account_request_get_type ()")]
	[Version (since = "0.19.1")]
	public class AccountRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public AccountRequest (TelepathyGLib.AccountManager account_manager, string manager, string protocol, string display_name);
		public void add_supersedes (string superseded_path);
		public async TelepathyGLib.Account create_account_async () throws GLib.Error;
		[CCode (has_construct_function = false)]
		public AccountRequest.from_protocol (TelepathyGLib.AccountManager account_manager, TelepathyGLib.Protocol protocol, string display_name);
		public void set_automatic_presence (TelepathyGLib.ConnectionPresenceType presence, string status, string message);
		public void set_avatar ([CCode (array_length_cname = "len", array_length_pos = 1.5, array_length_type = "gsize")] uint8[]? avatar, string? mime_type);
		public void set_connect_automatically (bool connect_automatically);
		public void set_display_name (string name);
		public void set_enabled (bool enabled);
		public void set_icon_name (string icon);
		public void set_nickname (string nickname);
		public void set_parameter (string key, GLib.Variant value);
		public void set_requested_presence (TelepathyGLib.ConnectionPresenceType presence, string status, string message);
		public void set_service (string service);
		[Version (since = "0.19.4")]
		public void set_storage_provider (string provider);
		public void unset_parameter (string key);
		[NoAccessorMethod]
		public TelepathyGLib.AccountManager account_manager { owned get; construct; }
		[NoAccessorMethod]
		public uint automatic_presence_type { get; }
		[NoAccessorMethod]
		public string automatic_status { owned get; }
		[NoAccessorMethod]
		public string automatic_status_message { owned get; }
		[NoAccessorMethod]
		public GLib.Array<void*> avatar { owned get; }
		[NoAccessorMethod]
		public string avatar_mime_type { owned get; }
		[NoAccessorMethod]
		public bool connect_automatically { get; }
		[NoAccessorMethod]
		public string connection_manager { owned get; construct; }
		[NoAccessorMethod]
		public string display_name { owned get; construct; }
		[NoAccessorMethod]
		public bool enabled { get; }
		[NoAccessorMethod]
		public string icon_name { owned get; }
		[NoAccessorMethod]
		public string nickname { owned get; }
		[NoAccessorMethod]
		public GLib.Variant parameters { owned get; }
		[NoAccessorMethod]
		public GLib.Variant properties { owned get; }
		[NoAccessorMethod]
		public string protocol { owned get; construct; }
		[NoAccessorMethod]
		public uint requested_presence_type { get; }
		[NoAccessorMethod]
		public string requested_status { owned get; }
		[NoAccessorMethod]
		public string requested_status_message { owned get; }
		[NoAccessorMethod]
		public string service { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.19.4")]
		public string storage_provider { owned get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] supersedes { owned get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_add_dispatch_operation_context_get_type ()")]
	[Version (since = "0.11.5")]
	public sealed class AddDispatchOperationContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AddDispatchOperationContext ();
		public void accept ();
		public void delay ();
		public void fail (GLib.Error error);
		[NoAccessorMethod]
		public TelepathyGLib.Account account { owned get; construct; }
		[NoAccessorMethod]
		public GLib.GenericArray<void*> channels { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.Connection connection { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.ChannelDispatchOperation dispatch_operation { owned get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_automatic_client_factory_get_type ()")]
	[Version (since = "0.15.5")]
	public class AutomaticClientFactory : TelepathyGLib.SimpleClientFactory {
		[CCode (has_construct_function = false)]
		public AutomaticClientFactory (TelepathyGLib.DBusDaemon? dbus);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_automatic_proxy_factory_get_type ()")]
	[Version (since = "0.13.2")]
	public class AutomaticProxyFactory : GLib.Object, TelepathyGLib.ClientChannelFactory {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.13.2")]
		public AutomaticProxyFactory ();
		[Version (deprecated = true, since = "0.13.2")]
		public static TelepathyGLib.AutomaticProxyFactory dup ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_avatar_requirements_get_type ()")]
	[Compact]
	[Version (since = "0.11.4")]
	public class AvatarRequirements {
		public uint maximum_bytes;
		public uint maximum_height;
		public uint maximum_width;
		public uint minimum_height;
		public uint minimum_width;
		public uint recommended_height;
		public uint recommended_width;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] supported_mime_types;
		[CCode (has_construct_function = false)]
		public AvatarRequirements ([CCode (array_length = false, array_null_terminated = true)] string[] supported_mime_types, uint minimum_width, uint minimum_height, uint recommended_width, uint recommended_height, uint maximum_width, uint maximum_height, uint maximum_bytes);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_base_client_get_type ()")]
	[Version (since = "0.11.5")]
	public abstract class BaseClient : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BaseClient ();
		[Version (deprecated = true, since = "0.11.14")]
		public void add_account_features ([CCode (array_length_cname = "n", array_length_pos = 1.1, array_length_type = "gssize")] GLib.Quark[] features);
		public void add_approver_filter (GLib.HashTable<string,GLib.Value?> filter);
		[Version (since = "0.19.10")]
		public void add_approver_filter_vardict (GLib.Variant filter);
		[Version (deprecated = true, since = "0.11.14")]
		public void add_channel_features ([CCode (array_length_cname = "n", array_length_pos = 1.1, array_length_type = "gssize")] GLib.Quark[] features);
		[Version (deprecated = true, since = "0.11.14")]
		public void add_connection_features ([CCode (array_length_cname = "n", array_length_pos = 1.1, array_length_type = "gssize")] GLib.Quark[] features);
		[NoWrapper]
		public virtual void add_dispatch_operation (TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation dispatch_operation, TelepathyGLib.AddDispatchOperationContext context);
		[Version (since = "0.11.6")]
		public void add_handler_capabilities ([CCode (array_length = false, array_null_terminated = true)] string[] tokens);
		[Version (since = "0.11.6")]
		public void add_handler_capability (string token);
		[Version (since = "0.11.6")]
		public void add_handler_filter (GLib.HashTable<string,GLib.Value?> filter);
		[Version (since = "0.19.10")]
		public void add_handler_filter_vardict (GLib.Variant filter);
		public void add_observer_filter (GLib.HashTable<string,GLib.Value?> filter);
		[Version (since = "0.19.10")]
		public void add_observer_filter_vardict (GLib.Variant filter);
		[Version (since = "0.11.6")]
		public void be_a_handler ();
		[Version (since = "0.15.0")]
		public async bool delegate_channels_async (GLib.List<TelepathyGLib.Channel> channels, int64 user_action_time, string preferred_handler, out GLib.GenericArray<weak TelepathyGLib.Channel> delegated, out GLib.HashTable<weak TelepathyGLib.Channel,weak GLib.Error> not_delegated) throws GLib.Error;
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.Channel> dup_handled_channels ();
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.ChannelRequest> dup_pending_requests ();
		public unowned string get_bus_name ();
		[Version (since = "0.11.11")]
		public unowned TelepathyGLib.DBusDaemon get_dbus_daemon ();
		[Version (deprecated = true, since = "0.11.6")]
		public GLib.List<weak TelepathyGLib.Channel> get_handled_channels ();
		[Version (since = "0.11.11")]
		public unowned string get_name ();
		public unowned string get_object_path ();
		[Version (deprecated = true, since = "0.11.6")]
		public GLib.List<weak TelepathyGLib.ChannelRequest> get_pending_requests ();
		[Version (since = "0.11.11")]
		public bool get_uniquify_name ();
		[NoWrapper]
		public virtual void handle_channels (TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, GLib.List<TelepathyGLib.ChannelRequest> requests_satisfied, int64 user_action_time, TelepathyGLib.HandleChannelsContext context);
		[Version (since = "0.14.5")]
		public bool is_handling_channel (TelepathyGLib.Channel channel);
		[NoWrapper]
		public virtual void observe_channels (TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation? dispatch_operation, GLib.List<TelepathyGLib.ChannelRequest> requests, TelepathyGLib.ObserveChannelsContext context);
		public bool register () throws GLib.Error;
		[Version (deprecated = true, since = "0.13.2")]
		public void set_channel_factory (TelepathyGLib.ClientChannelFactory factory);
		[Version (since = "0.15.3")]
		public void set_delegated_channels_callback (owned TelepathyGLib.BaseClientDelegatedChannelsCb callback);
		[Version (since = "0.11.6")]
		public void set_handler_bypass_approval (bool bypass_approval);
		[Version (since = "0.11.6")]
		public void set_handler_request_notification ();
		[Version (since = "0.13.16")]
		public void set_observer_delay_approvers (bool delay);
		public void set_observer_recover (bool recover);
		[Version (since = "0.11.6")]
		public void unregister ();
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.11.14")]
		public TelepathyGLib.AccountManager account_manager { owned get; construct; }
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.13.2")]
		public GLib.Object channel_factory { owned get; construct; }
		public TelepathyGLib.DBusDaemon dbus_daemon { get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.15.5")]
		public TelepathyGLib.SimpleClientFactory factory { owned get; construct; }
		public string name { get; construct; }
		public bool uniquify_name { get; construct; }
		[Version (since = "0.11.6")]
		public signal void request_added (TelepathyGLib.Account account, TelepathyGLib.ChannelRequest request);
		[Version (since = "0.11.6")]
		public signal void request_removed (TelepathyGLib.ChannelRequest request, string error, string message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_base_connection_get_type ()")]
	public abstract class BaseConnection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BaseConnection ();
		public void add_client_interest (string unique_name, string token, bool only_if_uninterested);
		public void add_possible_client_interest (GLib.Quark token);
		public void change_status (TelepathyGLib.ConnectionStatus status, TelepathyGLib.ConnectionStatusReason reason);
		[Version (since = "0.19.1")]
		public bool check_connected () throws GLib.Error;
		[NoWrapper]
		public virtual void connected ();
		[NoWrapper]
		public virtual void connecting ();
		[NoWrapper]
		public virtual void disconnected ();
		[Version (since = "0.23.2")]
		public unowned string get_account_path_suffix ();
		[Version (since = "0.19.1")]
		public unowned string? get_bus_name ();
		public unowned TelepathyGLib.HandleRepoIface get_handles (TelepathyGLib.HandleType handle_type);
		[Version (since = "0.19.1")]
		public unowned string? get_object_path ();
		[Version (since = "0.19.1")]
		public TelepathyGLib.ConnectionStatus get_status ();
		[NoWrapper]
		public virtual string get_unique_connection_name ();
		[Version (since = "0.19.1")]
		public bool is_destroyed ();
		public bool register (string cm_name, out string bus_name, out string object_path) throws GLib.Error;
		[Version (since = "0.7.15")]
		public void set_self_handle (TelepathyGLib.Handle self_handle);
		[NoWrapper]
		public virtual void shut_down ();
		[NoWrapper]
		public virtual bool start_connecting () throws GLib.Error;
		[Version (since = "0.23.2")]
		public string account_path_suffix { get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.13.8")]
		public bool has_immortal_handles { get; }
		public signal void clients_interested (string token);
		public signal void clients_uninterested (string token);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_basic_proxy_factory_get_type ()")]
	[Version (since = "0.13.2")]
	public class BasicProxyFactory : GLib.Object, TelepathyGLib.ClientChannelFactory {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.13.2")]
		public BasicProxyFactory ();
		[Version (deprecated = true, since = "0.13.2")]
		public static TelepathyGLib.BasicProxyFactory dup ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_call_channel_get_type ()")]
	[Version (since = "0.17.5")]
	public class CallChannel : TelepathyGLib.Channel {
		[CCode (has_construct_function = false)]
		protected CallChannel ();
		public async bool accept_async () throws GLib.Error;
		public async TelepathyGLib.CallContent add_content_async (string name, TelepathyGLib.MediaStreamType type, TelepathyGLib.MediaStreamDirection initial_direction) throws GLib.Error;
		public unowned GLib.GenericArray<TelepathyGLib.CallContent> get_contents ();
		public static GLib.Quark get_feature_quark_core ();
		public unowned GLib.HashTable<TelepathyGLib.Contact,uint> get_members ();
		public TelepathyGLib.CallState get_state (out TelepathyGLib.CallFlags flags, out unowned GLib.HashTable<void*,void*> details, out unowned TelepathyGLib.CallStateReason reason);
		public async bool hangup_async (TelepathyGLib.CallStateChangeReason reason, string detailed_reason, string message) throws GLib.Error;
		public bool has_dtmf ();
		public bool has_hardware_streaming ();
		[Version (since = "0.17.6")]
		public bool has_hold ();
		public bool has_initial_audio (out unowned string initial_audio_name);
		public bool has_initial_video (out unowned string initial_video_name);
		public bool has_mutable_contents ();
		[Version (since = "0.17.6")]
		public async bool request_hold_async (bool hold) throws GLib.Error;
		public async bool send_tones_async (string tones, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool set_queued_async () throws GLib.Error;
		public async bool set_ringing_async () throws GLib.Error;
		public GLib.GenericArray<void*> contents { get; }
		[NoAccessorMethod]
		public uint flags { get; }
		[NoAccessorMethod]
		public bool hardware_streaming { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.6")]
		public uint hold_state { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.6")]
		public uint hold_state_reason { get; }
		[NoAccessorMethod]
		public bool initial_audio { get; }
		[NoAccessorMethod]
		public string initial_audio_name { owned get; }
		[NoAccessorMethod]
		public bool initial_video { get; }
		[NoAccessorMethod]
		public string initial_video_name { owned get; }
		[NoAccessorMethod]
		public bool mutable_contents { get; }
		[NoAccessorMethod]
		public uint state { get; }
		[NoAccessorMethod]
		public GLib.HashTable<void*,void*> state_details { owned get; }
		[NoAccessorMethod]
		public TelepathyGLib.CallStateReason state_reason { owned get; }
		public signal void content_added (GLib.Object content);
		public signal void content_removed (GLib.Object content, TelepathyGLib.CallStateReason reason);
		public signal void members_changed (GLib.HashTable<TelepathyGLib.Contact,uint> updates, GLib.GenericArray<TelepathyGLib.Contact> removed, TelepathyGLib.CallStateReason reason);
		public signal void state_changed (uint state, uint flags, TelepathyGLib.CallStateReason reason, GLib.HashTable<string,GLib.Value?> details);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_call_content_get_type ()")]
	[Version (since = "0.17.5")]
	public class CallContent : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		protected CallContent ();
		public TelepathyGLib.CallContentDisposition get_disposition ();
		public static GLib.Quark get_feature_quark_core ();
		public TelepathyGLib.MediaStreamType get_media_type ();
		public unowned string get_name ();
		public unowned GLib.GenericArray<TelepathyGLib.CallStream> get_streams ();
		public static void init_known_interfaces ();
		public async bool remove_async () throws GLib.Error;
		public async bool send_tones_async (string tones, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		[Version (since = "0.17.6")]
		public TelepathyGLib.CallChannel channel { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.Connection connection { owned get; construct; }
		public uint disposition { get; }
		public uint media_type { get; }
		public string name { get; }
		public GLib.GenericArray<void*> streams { get; }
		public signal void removed ();
		public signal void streams_added (GLib.GenericArray<TelepathyGLib.CallStream> streams);
		public signal void streams_removed (GLib.GenericArray<TelepathyGLib.CallStream> streams, TelepathyGLib.CallStateReason reason);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_call_state_reason_get_type ()")]
	[Compact]
	[Version (since = "0.17.5")]
	public class CallStateReason {
		public TelepathyGLib.Handle actor;
		public weak string dbus_reason;
		public weak string message;
		public TelepathyGLib.CallStateChangeReason reason;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_call_stream_get_type ()")]
	[Version (since = "0.17.5")]
	public class CallStream : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		protected CallStream ();
		public static GLib.Quark get_feature_quark_core ();
		public TelepathyGLib.SendingState get_local_sending_state ();
		public unowned GLib.HashTable<TelepathyGLib.Contact,uint> get_remote_members ();
		public static void init_known_interfaces ();
		public async bool request_receiving_async (TelepathyGLib.Contact contact, bool receive) throws GLib.Error;
		public async bool set_sending_async (bool send) throws GLib.Error;
		[NoAccessorMethod]
		public bool can_request_receiving { get; }
		[NoAccessorMethod]
		public TelepathyGLib.Connection connection { owned get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.17.6")]
		public TelepathyGLib.CallContent content { owned get; construct; }
		public uint local_sending_state { get; }
		public signal void local_sending_state_changed (uint state, TelepathyGLib.CallStateReason reason);
		public signal void remote_members_changed (GLib.HashTable<TelepathyGLib.Contact,uint> updates, GLib.GenericArray<TelepathyGLib.Contact> removed, TelepathyGLib.CallStateReason reason);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_capabilities_get_type ()")]
	[Version (since = "0.11.3")]
	public sealed class Capabilities : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Capabilities ();
		[Version (since = "0.19.0")]
		public GLib.Variant dup_channel_classes_variant ();
		public unowned GLib.GenericArray<GLib.HashTable<void*,void*>> get_channel_classes ();
		public bool is_specific_to_contact ();
		[Version (since = "0.17.6")]
		public bool supports_audio_call (TelepathyGLib.HandleType handle_type);
		[Version (since = "0.17.6")]
		public bool supports_audio_video_call (TelepathyGLib.HandleType handle_type);
		[Version (since = "0.13.11")]
		public bool supports_contact_search (out bool with_limit, out bool with_server);
		[Version (since = "0.13.0")]
		public bool supports_dbus_tubes (TelepathyGLib.HandleType handle_type, string service_name);
		[Version (since = "0.17.6")]
		public bool supports_file_transfer ();
		[Version (since = "0.19.0")]
		public bool supports_file_transfer_description ();
		[Version (since = "0.19.0")]
		public bool supports_file_transfer_initial_offset ();
		[Version (since = "0.19.0")]
		public bool supports_file_transfer_timestamp ();
		[Version (since = "0.19.0")]
		public bool supports_file_transfer_uri ();
		[Version (since = "0.13.14")]
		public bool supports_room_list (out bool with_server);
		[Version (since = "0.19.0")]
		public bool supports_sms ();
		[Version (since = "0.13.0")]
		public bool supports_stream_tubes (TelepathyGLib.HandleType handle_type, string service);
		public bool supports_text_chatrooms ();
		public bool supports_text_chats ();
		[NoAccessorMethod]
		[Version (since = "0.19.0")]
		public GLib.Variant channel_classes_variant { owned get; }
		[NoAccessorMethod]
		public bool contact_specific { get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_channel_get_type ()")]
	[Version (since = "0.7.1")]
	public class Channel : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.7.1")]
		public Channel (TelepathyGLib.Connection conn, string object_path, string optional_channel_type, TelepathyGLib.HandleType optional_handle_type, TelepathyGLib.Handle optional_handle) throws GLib.Error;
		[Version (deprecated = true, since = "0.7.12")]
		public unowned TelepathyGLib.Connection borrow_connection ();
		[Version (deprecated = true)]
		public unowned GLib.HashTable<string,GLib.Value?> borrow_immutable_properties ();
		[Version (since = "0.13.10")]
		public async bool close_async () throws GLib.Error;
		[Version (since = "0.15.2")]
		public async bool destroy_async () throws GLib.Error;
		[Version (since = "0.19.9")]
		public GLib.Variant dup_immutable_properties ();
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.7.19")]
		public Channel.from_properties (TelepathyGLib.Connection conn, string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		[Version (since = "0.7.12")]
		public unowned string get_channel_type ();
		[Version (since = "0.7.12")]
		public GLib.Quark get_channel_type_id ();
		[Version (deprecated = true, since = "0.11.3")]
		public TelepathyGLib.ChannelChatState get_chat_state (TelepathyGLib.Handle contact);
		[Version (since = "0.19.9")]
		public unowned TelepathyGLib.Connection get_connection ();
		public static GLib.Quark get_feature_quark_chat_states ();
		public static GLib.Quark get_feature_quark_contacts ();
		public static GLib.Quark get_feature_quark_core ();
		public static GLib.Quark get_feature_quark_group ();
		public static GLib.Quark get_feature_quark_password ();
		[Version (since = "0.7.12")]
		public TelepathyGLib.Handle get_handle (out TelepathyGLib.HandleType handle_type);
		[Version (since = "0.7.21")]
		public unowned string get_identifier ();
		[Version (since = "0.15.6")]
		public unowned TelepathyGLib.Contact get_initiator_contact ();
		[Version (since = "0.11.15")]
		public bool get_requested ();
		[Version (since = "0.15.6")]
		public unowned TelepathyGLib.Contact get_target_contact ();
		[Version (since = "0.15.6")]
		public GLib.GenericArray<weak TelepathyGLib.Contact> group_dup_local_pending_contacts ();
		[Version (since = "0.15.6")]
		public GLib.GenericArray<weak TelepathyGLib.Contact> group_dup_members_contacts ();
		[Version (since = "0.15.6")]
		public GLib.GenericArray<weak TelepathyGLib.Contact> group_dup_remote_pending_contacts ();
		[Version (since = "0.15.6")]
		public unowned TelepathyGLib.Contact group_get_contact_owner (TelepathyGLib.Contact contact);
		[Version (since = "0.7.12")]
		public TelepathyGLib.ChannelGroupFlags group_get_flags ();
		[Version (deprecated = true, since = "0.7.12")]
		public TelepathyGLib.Handle group_get_handle_owner (TelepathyGLib.Handle handle);
		[Version (deprecated = true, since = "0.7.12")]
		public unowned TelepathyGLib.Intset group_get_local_pending ();
		[Version (since = "0.15.6")]
		public bool group_get_local_pending_contact_info (TelepathyGLib.Contact local_pending, out unowned TelepathyGLib.Contact actor, out TelepathyGLib.ChannelGroupChangeReason reason, out unowned string message);
		[Version (deprecated = true, since = "0.7.12")]
		public bool group_get_local_pending_info (TelepathyGLib.Handle local_pending, out TelepathyGLib.Handle actor, out TelepathyGLib.ChannelGroupChangeReason reason, out unowned string message);
		[Version (deprecated = true, since = "0.7.12")]
		public unowned TelepathyGLib.Intset group_get_members ();
		[Version (deprecated = true, since = "0.7.12")]
		public unowned TelepathyGLib.Intset group_get_remote_pending ();
		[Version (since = "0.15.6")]
		public unowned TelepathyGLib.Contact group_get_self_contact ();
		[Version (deprecated = true, since = "0.7.12")]
		public TelepathyGLib.Handle group_get_self_handle ();
		[Version (since = "0.7.6")]
		public static void init_known_interfaces ();
		[Version (since = "0.15.5")]
		public async bool join_async (string message) throws GLib.Error;
		[Version (since = "0.13.10")]
		public async bool leave_async (TelepathyGLib.ChannelGroupChangeReason reason, string message) throws GLib.Error;
		[Version (since = "0.15.2")]
		public async bool provide_password_async (string password) throws GLib.Error;
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "0.17.6")]
		public bool channel_ready { get; }
		public TelepathyGLib.Connection connection { get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.7.12")]
		public uint group_flags { get; }
		[NoAccessorMethod]
		[Version (since = "0.15.6")]
		public TelepathyGLib.Contact group_self_contact { owned get; }
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.7.12")]
		public uint group_self_handle { get; }
		public string identifier { get; }
		[Version (since = "0.15.6")]
		public TelepathyGLib.Contact initiator_contact { get; }
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.11.15")]
		public uint initiator_handle { get; }
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.11.15")]
		public string initiator_identifier { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.15.2")]
		public bool password_needed { get; }
		[Version (since = "0.11.15")]
		public bool requested { get; }
		[Version (since = "0.15.6")]
		public TelepathyGLib.Contact target_contact { get; }
		[Version (deprecated = true, since = "0.11.3")]
		public signal void chat_state_changed (uint contact, uint state);
		[Version (since = "0.15.6")]
		public signal void group_contacts_changed (GLib.GenericArray<TelepathyGLib.Contact> added, GLib.GenericArray<TelepathyGLib.Contact> removed, GLib.GenericArray<TelepathyGLib.Contact> local_pending, GLib.GenericArray<TelepathyGLib.Contact> remote_pending, TelepathyGLib.Contact actor, GLib.HashTable<string,GLib.Value?> details);
		[Version (since = "0.7.12")]
		public signal void group_flags_changed (uint added, uint removed);
		[Version (deprecated = true, since = "0.7.21")]
		public signal void group_members_changed_detailed (GLib.Array<uint> added, GLib.Array<uint> removed, GLib.Array<uint> local_pending, GLib.Array<uint> remote_pending, GLib.HashTable<string,GLib.Value?> details);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_channel_dispatch_operation_get_type ()")]
	[Version (since = "0.7.32")]
	public class ChannelDispatchOperation : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true)]
		public ChannelDispatchOperation (TelepathyGLib.DBusDaemon bus_daemon, string object_path, GLib.HashTable<void*,void*> immutable_properties) throws GLib.Error;
		[Version (deprecated = true, since = "0.11.5")]
		public async bool claim_async () throws GLib.Error;
		[Version (since = "0.15.0")]
		public async bool claim_with_async (TelepathyGLib.BaseClient client) throws GLib.Error;
		[Version (since = "0.15.1")]
		public async bool close_channels_async () throws GLib.Error;
		[Version (since = "0.15.2")]
		public async bool destroy_channels_async () throws GLib.Error;
		[Version (since = "0.19.9")]
		public unowned GLib.GenericArray<TelepathyGLib.Channel> get_channels ();
		public static GLib.Quark get_feature_quark_core ();
		[Version (since = "0.11.5")]
		public async bool handle_with_async (string? handler) throws GLib.Error;
		[Version (since = "0.11.7")]
		public async bool handle_with_time_async (string? handler, int64 user_action_time) throws GLib.Error;
		public static void init_known_interfaces ();
		[Version (since = "0.15.2")]
		public async bool leave_channels_async (TelepathyGLib.ChannelGroupChangeReason reason, string message) throws GLib.Error;
		[NoAccessorMethod]
		[Version (since = "0.11.5")]
		public TelepathyGLib.Account account { owned get; construct; }
		[Version (since = "0.11.5")]
		public GLib.GenericArray<void*> channels { get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.11.5")]
		public TelepathyGLib.Connection connection { owned get; construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		[Version (since = "0.11.5")]
		public string[] possible_handlers { owned get; }
		[Version (since = "0.11.5")]
		public signal void channel_lost (TelepathyGLib.Channel channel, uint domain, int code, string message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_channel_dispatcher_get_type ()")]
	[Version (since = "0.7.32")]
	public class ChannelDispatcher : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public ChannelDispatcher (TelepathyGLib.DBusDaemon bus_daemon);
		public static void init_known_interfaces ();
		[Version (since = "0.15.0")]
		public async bool present_channel_async (TelepathyGLib.Channel channel, int64 user_action_time) throws GLib.Error;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_channel_request_get_type ()")]
	[Version (since = "0.7.32")]
	public class ChannelRequest : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true)]
		public ChannelRequest (TelepathyGLib.DBusDaemon bus_daemon, string object_path, GLib.HashTable<void*,void*> immutable_properties) throws GLib.Error;
		[Version (since = "0.19.10")]
		public GLib.Variant dup_hints ();
		[Version (since = "0.19.10")]
		public GLib.Variant dup_immutable_properties ();
		[Version (since = "0.15.3")]
		public unowned TelepathyGLib.Account get_account ();
		[Version (since = "0.13.14")]
		public unowned GLib.HashTable<void*,void*> get_hints ();
		[Version (since = "0.13.14")]
		public unowned GLib.HashTable<void*,void*> get_immutable_properties ();
		[Version (since = "0.15.3")]
		public unowned string get_preferred_handler ();
		[Version (since = "0.15.3")]
		public int64 get_user_action_time ();
		public static void init_known_interfaces ();
		[Version (deprecated = true, since = "0.13.14")]
		public void set_channel_factory (TelepathyGLib.ClientChannelFactory factory);
		[Version (since = "0.15.3")]
		public TelepathyGLib.Account account { get; }
		[NoAccessorMethod]
		[Version (deprecated = true, since = "0.13.14")]
		public GLib.Object channel_factory { owned get; set construct; }
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant hints_vardict { owned get; }
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant immutable_properties_vardict { owned get; }
		[Version (since = "0.15.3")]
		public string preferred_handler { get; }
		[Version (since = "0.15.3")]
		public int64 user_action_time { get; }
		[Version (deprecated = true)]
		public signal void succeeded ();
		[Version (since = "0.13.14")]
		public signal void succeeded_with_channel (TelepathyGLib.Connection connection, TelepathyGLib.Channel channel);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_client_message_get_type ()")]
	[Version (since = "0.13.9")]
	public sealed class ClientMessage : TelepathyGLib.Message {
		[CCode (has_construct_function = false, type = "TpMessage*")]
		public ClientMessage ();
		[CCode (has_construct_function = false, type = "TpMessage*")]
		public ClientMessage.text (TelepathyGLib.ChannelTextMessageType type, string text);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_connection_get_type ()")]
	[Version (since = "0.7.1")]
	public class Connection : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.7.1")]
		public Connection (TelepathyGLib.DBusDaemon dbus, string? bus_name, string? object_path) throws GLib.Error;
		[Version (since = "0.11.3")]
		public void add_client_interest (string interested_in);
		[Version (since = "0.15.5")]
		public async bool add_to_group_async (string group, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool authorize_publication_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.13.16")]
		public unowned GLib.Binding bind_connection_status_to_property (void* target, string target_property, bool invert);
		[Version (since = "0.17.0")]
		public async bool block_contacts_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, bool report_abusive) throws GLib.Error;
		public bool can_set_contact_alias ();
		[Version (since = "0.17.5")]
		public async bool disconnect_async () throws GLib.Error;
		[Version (since = "0.19.0")]
		public async TelepathyGLib.Contact dup_contact_by_id_async (string id, [CCode (array_length_cname = "n_features", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.ContactFeature[]? features) throws GLib.Error;
		[Version (since = "0.13.9")]
		public TelepathyGLib.Contact dup_contact_if_possible (TelepathyGLib.Handle handle, string identifier);
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.ContactInfoFieldSpec> dup_contact_info_supported_fields ();
		[Version (since = "0.15.5")]
		public GLib.GenericArray<weak TelepathyGLib.Contact> dup_contact_list ();
		[Version (since = "0.19.0")]
		public string? dup_detailed_error_vardict (out GLib.Variant details);
		[Version (since = "0.15.5")]
		public unowned TelepathyGLib.Account get_account ();
		[Version (since = "0.11.4")]
		public unowned TelepathyGLib.AvatarRequirements get_avatar_requirements ();
		[Version (since = "0.15.1")]
		public bool get_balance (out int balance, out uint scale, out unowned string currency);
		[Version (since = "0.15.1")]
		public unowned string get_balance_uri ();
		[Version (since = "0.17.0")]
		public unowned GLib.GenericArray<TelepathyGLib.Contact> get_blocked_contacts ();
		[Version (since = "0.15.5")]
		public bool get_can_change_contact_list ();
		[Version (since = "0.11.3")]
		public unowned TelepathyGLib.Capabilities get_capabilities ();
		[Version (since = "0.19.3")]
		public unowned string get_cm_name ();
		[Version (deprecated = true, since = "0.13.16")]
		public unowned string get_connection_manager_name ();
		[Version (deprecated = true)]
		public void get_contact_attributes (int timeout_ms, [CCode (array_length_cname = "n_handles", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Handle[] handles, string interfaces, bool hold, [CCode (delegate_target_pos = 5.33333, destroy_notify_pos = 5.66667)] owned GLib.Callback callback, GLib.Object weak_object);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.15.5")]
		public unowned string[] get_contact_groups ();
		[Version (since = "0.11.7")]
		public TelepathyGLib.ContactInfoFlags get_contact_info_flags ();
		[Version (deprecated = true, since = "0.11.7")]
		public GLib.List<weak TelepathyGLib.ContactInfoFieldSpec> get_contact_info_supported_fields ();
		[Version (deprecated = true)]
		public void get_contact_list_attributes (int timeout_ms, string interfaces, bool hold, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned GLib.Callback callback, GLib.Object weak_object);
		[Version (since = "0.15.5")]
		public bool get_contact_list_persists ();
		[Version (since = "0.15.5")]
		public TelepathyGLib.ContactListState get_contact_list_state ();
		[Version (deprecated = true, since = "0.7.18")]
		public void get_contacts_by_handle ([CCode (array_length_cname = "n_handles", array_length_pos = 0.5, array_length_type = "guint")] uint[] handles, [CCode (array_length_cname = "n_features", array_length_pos = 1.5, array_length_type = "guint")] uint[]? features, [CCode (delegate_target_pos = 3.33333, destroy_notify_pos = 3.66667)] owned TelepathyGLib.ConnectionContactsByHandleCb callback, GLib.Object? weak_object);
		[Version (deprecated = true, since = "0.7.18")]
		public void get_contacts_by_id ([CCode (array_length_cname = "n_ids", array_length_pos = 0.5, array_length_type = "guint")] string[] ids, [CCode (array_length_cname = "n_features", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.ContactFeature[]? features, [CCode (delegate_target_pos = 3.33333, destroy_notify_pos = 3.66667)] owned TelepathyGLib.ConnectionContactsByIdCb callback, GLib.Object? weak_object);
		[Version (since = "0.11.4")]
		public unowned string? get_detailed_error (out unowned GLib.HashTable<string,GLib.Value?> details);
		[Version (since = "0.15.5")]
		public bool get_disjoint_groups ();
		public static GLib.Quark get_feature_quark_aliasing ();
		public static GLib.Quark get_feature_quark_avatar_requirements ();
		public static GLib.Quark get_feature_quark_balance ();
		public static GLib.Quark get_feature_quark_capabilities ();
		public static GLib.Quark get_feature_quark_connected ();
		public static GLib.Quark get_feature_quark_contact_blocking ();
		public static GLib.Quark get_feature_quark_contact_groups ();
		public static GLib.Quark get_feature_quark_contact_info ();
		public static GLib.Quark get_feature_quark_contact_list ();
		public static GLib.Quark get_feature_quark_contact_list_properties ();
		public static GLib.Quark get_feature_quark_core ();
		[Version (since = "0.15.5")]
		public TelepathyGLib.ContactMetadataStorageType get_group_storage ();
		[Version (since = "0.13.16")]
		public unowned string get_protocol_name ();
		[Version (since = "0.15.5")]
		public bool get_request_uses_message ();
		[Version (since = "0.13.9")]
		public unowned TelepathyGLib.Contact get_self_contact ();
		[Version (deprecated = true, since = "0.7.26")]
		public TelepathyGLib.Handle get_self_handle ();
		[Version (since = "0.7.14")]
		public TelepathyGLib.ConnectionStatus get_status (out TelepathyGLib.ConnectionStatusReason reason);
		public bool has_immortal_handles ();
		[Version (deprecated = true)]
		public void hold_handles (int timeout_ms, TelepathyGLib.HandleType handle_type, [CCode (array_length_cname = "n_handles", array_length_pos = 2.5, array_length_type = "guint")] TelepathyGLib.Handle[] handles, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned TelepathyGLib.ConnectionHoldHandlesCb callback, GLib.Object weak_object);
		[Version (since = "0.7.6")]
		public static void init_known_interfaces ();
		[Version (deprecated = true, since = "0.7.27")]
		public bool parse_object_path (out string protocol, out string cm_name);
		[Version (since = "0.7.16")]
		public static int presence_type_cmp_availability (TelepathyGLib.ConnectionPresenceType p1, TelepathyGLib.ConnectionPresenceType p2);
		[Version (since = "0.11.7")]
		public void refresh_contact_info ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts);
		[Version (since = "0.15.5")]
		public async bool remove_contacts_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool remove_from_group_async (string group, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool remove_group_async (string group) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool rename_group_async (string old_name, string new_name) throws GLib.Error;
		[Version (deprecated = true)]
		public void request_handles (int timeout_ms, TelepathyGLib.HandleType handle_type, [CCode (array_length = false, array_null_terminated = true)] string[] ids, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned TelepathyGLib.ConnectionRequestHandlesCb callback, GLib.Object weak_object);
		[Version (since = "0.15.5")]
		public async bool request_subscription_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, string message) throws GLib.Error;
		[Version (since = "0.11.7")]
		public async bool set_contact_info_async (GLib.List<TelepathyGLib.ContactInfoField> info) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool set_group_members_async (string group, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.17.0")]
		public async bool unblock_contacts_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool unpublish_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (deprecated = true)]
		public void unref_handles (TelepathyGLib.HandleType handle_type, [CCode (array_length_cname = "n_handles", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Handle[] handles);
		[Version (since = "0.15.5")]
		public async bool unsubscribe_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts) throws GLib.Error;
		[Version (deprecated = true, since = "0.7.18")]
		public void upgrade_contacts ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, [CCode (array_length_cname = "n_features", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.ContactFeature[] features, [CCode (delegate_target_pos = 3.33333, destroy_notify_pos = 3.66667)] owned TelepathyGLib.ConnectionUpgradeContactsCb callback, GLib.Object? weak_object);
		[Version (since = "0.19.0")]
		public async bool upgrade_contacts_async ([CCode (array_length_cname = "n_contacts", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, [CCode (array_length_cname = "n_features", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.ContactFeature[] features, out GLib.GenericArray<weak TelepathyGLib.Contact> contacts_out) throws GLib.Error;
		[NoAccessorMethod]
		public int balance { get; }
		[NoAccessorMethod]
		public string balance_currency { owned get; }
		[NoAccessorMethod]
		public uint balance_scale { get; }
		public string balance_uri { get; }
		[Version (since = "0.17.0")]
		public GLib.GenericArray<void*> blocked_contacts { get; }
		[Version (since = "0.15.5")]
		public bool can_change_contact_list { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.0")]
		public bool can_report_abusive { get; }
		public TelepathyGLib.Capabilities capabilities { get; }
		[Version (since = "0.19.3")]
		public string cm_name { get; }
		[Version (deprecated = true, since = "0.13.16")]
		public string connection_manager_name { get; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "0.17.6")]
		public bool connection_ready { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.15.5")]
		public string[] contact_groups { get; }
		[Version (since = "0.15.5")]
		public bool contact_list_persists { get; }
		[Version (since = "0.15.5")]
		public uint contact_list_state { get; }
		[Version (since = "0.15.5")]
		public bool disjoint_groups { get; }
		[Version (since = "0.15.5")]
		public uint group_storage { get; }
		[Version (since = "0.13.16")]
		public string protocol_name { get; }
		[Version (since = "0.15.5")]
		public bool request_uses_message { get; }
		[Version (since = "0.13.9")]
		public TelepathyGLib.Contact self_contact { get; }
		[Version (deprecated = true)]
		public uint self_handle { get; }
		[NoAccessorMethod]
		public uint status { get; }
		[NoAccessorMethod]
		public uint status_reason { get; }
		[Version (since = "0.15.1")]
		public signal void balance_changed (int balance, uint balance_scale, string balance_currency);
		[Version (since = "0.17.0")]
		public signal void blocked_contacts_changed (GLib.GenericArray<TelepathyGLib.Contact> added, GLib.GenericArray<TelepathyGLib.Contact> removed);
		[Version (since = "0.15.5")]
		public signal void contact_list_changed (GLib.GenericArray<TelepathyGLib.Contact> added, GLib.GenericArray<TelepathyGLib.Contact> removed);
		[Version (since = "0.15.5")]
		public signal void group_renamed (string old_name, string new_name);
		[Version (since = "0.15.5")]
		public signal void groups_created ([CCode (array_length = false, array_null_terminated = true)] string[] added);
		[Version (since = "0.15.5")]
		public signal void groups_removed ([CCode (array_length = false, array_null_terminated = true)] string[] added);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_connection_manager_get_type ()")]
	[Version (since = "0.7.1")]
	public class ConnectionManager : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public ConnectionManager (TelepathyGLib.DBusDaemon dbus, string name, string? manager_filename) throws GLib.Error;
		public static bool check_valid_name (string name) throws GLib.Error;
		public static bool check_valid_protocol_name (string name) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.7.26")]
		public string[] dup_protocol_names ();
		[Version (since = "0.17.6")]
		public GLib.List<TelepathyGLib.Protocol> dup_protocols ();
		public static GLib.Quark get_feature_quark_core ();
		[Version (since = "0.7.26")]
		public TelepathyGLib.CMInfoSource get_info_source ();
		[Version (since = "0.7.26")]
		public unowned string get_name ();
		[Version (deprecated = true, deprecated_since = "0.19.1", since = "0.7.26")]
		public unowned TelepathyGLib.ConnectionManagerProtocol get_protocol (string protocol);
		[Version (since = "0.11.11")]
		public unowned TelepathyGLib.Protocol get_protocol_object (string protocol);
		[Version (since = "0.7.26")]
		public bool has_protocol (string protocol);
		[Version (since = "0.7.32")]
		public static void init_known_interfaces ();
		[Version (since = "0.7.26")]
		public bool is_running ();
		[NoAccessorMethod]
		public bool always_introspect { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.19.3")]
		public string cm_name { owned get; }
		[NoAccessorMethod]
		[Version (deprecated = true)]
		public string connection_manager { owned get; }
		public uint info_source { get; }
		[NoAccessorMethod]
		public string manager_file { owned get; set construct; }
		public signal void activated ();
		public signal void exited ();
		public signal void got_info (uint source);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_connection_manager_param_get_type ()")]
	[Compact]
	[Version (since = "0.7.1")]
	public class ConnectionManagerParam {
		[Version (since = "0.11.3")]
		public TelepathyGLib.ConnectionManagerParam copy ();
		[Version (since = "0.19.0")]
		public GLib.Variant dup_default_variant ();
		[Version (since = "0.23.1")]
		public GLib.VariantType dup_variant_type ();
		[Version (since = "0.11.3")]
		public void free ();
		[Version (since = "0.7.26")]
		public unowned string get_dbus_signature ();
		[Version (since = "0.7.26")]
		public bool get_default (GLib.Value value);
		[Version (since = "0.7.26")]
		public unowned string get_name ();
		[Version (since = "0.7.26")]
		public bool is_dbus_property ();
		[Version (since = "0.7.26")]
		public bool is_required ();
		[Version (since = "0.7.26")]
		public bool is_required_for_registration ();
		[Version (since = "0.7.26")]
		public bool is_secret ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_connection_manager_protocol_get_type ()")]
	[Compact]
	[Version (deprecated = true, deprecated_since = "0.19.1", since = "0.7.1")]
	public class ConnectionManagerProtocol {
		public weak string name;
		public weak TelepathyGLib.ConnectionManagerParam @params;
		[Version (since = "0.7.26")]
		public bool can_register ();
		[Version (since = "0.11.3")]
		public TelepathyGLib.ConnectionManagerProtocol copy ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.7.26")]
		public string[] dup_param_names ();
		[Version (since = "0.11.3")]
		public void free ();
		[Version (since = "0.7.26")]
		public unowned TelepathyGLib.ConnectionManagerParam get_param (string param);
		[Version (since = "0.7.26")]
		public bool has_param (string param);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_contact_get_type ()")]
	[Version (since = "0.7.18")]
	public sealed class Contact : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Contact ();
		[Version (since = "0.15.5")]
		public async bool add_to_group_async (string group) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool authorize_publication_async () throws GLib.Error;
		[Version (since = "0.17.0")]
		public async bool block_async (bool report_abusive) throws GLib.Error;
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.ContactInfoField> dup_contact_info ();
		[Version (since = "0.19.10")]
		public GLib.Variant dup_location ();
		[Version (since = "0.19.0")]
		public unowned TelepathyGLib.Account get_account ();
		public unowned string get_alias ();
		[Version (since = "0.11.6")]
		public unowned GLib.File get_avatar_file ();
		[Version (since = "0.11.6")]
		public unowned string get_avatar_mime_type ();
		public unowned string get_avatar_token ();
		[Version (since = "0.11.3")]
		public unowned TelepathyGLib.Capabilities get_capabilities ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.1")]
		public unowned string[] get_client_types ();
		public unowned TelepathyGLib.Connection get_connection ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.14")]
		public unowned string[] get_contact_groups ();
		[Version (deprecated = true, since = "0.11.7")]
		public GLib.List<weak TelepathyGLib.ContactInfoField> get_contact_info ();
		public TelepathyGLib.Handle get_handle ();
		public unowned string get_identifier ();
		[Version (since = "0.11.1")]
		public unowned GLib.HashTable<string,GLib.Value?> get_location ();
		public unowned string get_presence_message ();
		public unowned string get_presence_status ();
		public TelepathyGLib.ConnectionPresenceType get_presence_type ();
		[Version (since = "0.13.12")]
		public unowned string get_publish_request ();
		[Version (since = "0.13.12")]
		public TelepathyGLib.SubscriptionState get_publish_state ();
		[Version (since = "0.13.12")]
		public TelepathyGLib.SubscriptionState get_subscribe_state ();
		public bool has_feature (TelepathyGLib.ContactFeature feature);
		[Version (since = "0.15.5")]
		public async bool remove_async () throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool remove_from_group_async (string group) throws GLib.Error;
		[Version (since = "0.11.7")]
		public async bool request_contact_info_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool request_subscription_async (string message) throws GLib.Error;
		[Version (since = "0.13.14")]
		public async bool set_contact_groups_async ([CCode (array_length_cname = "n_groups", array_length_pos = 0.5)] string[]? groups) throws GLib.Error;
		[Version (since = "0.17.0")]
		public async bool unblock_async () throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool unpublish_async () throws GLib.Error;
		[Version (since = "0.15.5")]
		public async bool unsubscribe_async () throws GLib.Error;
		public string alias { get; }
		[Version (since = "0.11.6")]
		public GLib.File avatar_file { get; }
		[Version (since = "0.11.6")]
		public string avatar_mime_type { get; }
		public string avatar_token { get; }
		[Version (since = "0.11.3")]
		public TelepathyGLib.Capabilities capabilities { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.1")]
		public string[] client_types { get; }
		public TelepathyGLib.Connection connection { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.14")]
		public string[] contact_groups { get; }
		[Version (since = "0.11.7")]
		public TelepathyGLib.ContactInfoList contact_info { owned get; }
		public uint handle { get; }
		public string identifier { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.0")]
		public bool is_blocked { get; }
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant location_vardict { owned get; }
		public string presence_message { get; }
		public string presence_status { get; }
		public uint presence_type { get; }
		[Version (since = "0.13.12")]
		public string publish_request { get; }
		[Version (since = "0.13.12")]
		public uint publish_state { get; }
		[Version (since = "0.13.12")]
		public uint subscribe_state { get; }
		[Version (since = "0.13.14")]
		public signal void contact_groups_changed ([CCode (array_length = false, array_null_terminated = true)] string[] added, [CCode (array_length = false, array_null_terminated = true)] string[] removed);
		[Version (since = "0.11.7")]
		public signal void presence_changed (uint type, string status, string message);
		[Version (since = "0.13.12")]
		public signal void subscription_states_changed (uint subscribe, uint publish, string publish_request);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_contact_info_field_get_type ()")]
	[Compact]
	[Version (since = "0.11.7")]
	public class ContactInfoField {
		public weak string field_name;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] field_value;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] parameters;
		[CCode (has_construct_function = false)]
		public ContactInfoField (string field_name, [CCode (array_length = false, array_null_terminated = true)] string[] parameters, [CCode (array_length = false, array_null_terminated = true)] string[] field_value);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_contact_info_field_spec_get_type ()")]
	[Compact]
	[Version (since = "0.11.7")]
	public class ContactInfoFieldSpec {
		public TelepathyGLib.ContactInfoFieldFlags flags;
		public uint max;
		public weak string name;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] parameters;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_contact_info_list_get_type ()")]
	[Compact]
	public class ContactInfoList {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_contact_info_spec_list_get_type ()")]
	[Compact]
	public class ContactInfoSpecList {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_contact_search_get_type ()")]
	[Version (since = "0.13.11")]
	public class ContactSearch : GLib.Object, GLib.AsyncInitable {
		[CCode (cname = "tp_contact_search_new_async", has_construct_function = false)]
		public async ContactSearch (TelepathyGLib.Account account, string server, uint limit) throws GLib.Error;
		public unowned TelepathyGLib.Account get_account ();
		public uint get_limit ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_search_keys ();
		public unowned string get_server ();
		[CCode (array_length = false, array_null_terminated = true)]
		public async unowned string[] reset_async (string server, uint limit) throws GLib.Error;
		public void start (GLib.HashTable<string,string> criteria);
		public TelepathyGLib.Account account { get; construct; }
		[NoAccessorMethod]
		public uint limit { get; set; }
		public string server { get; construct; }
		[NoAccessorMethod]
		public uint state { get; }
		public signal void search_results_received (GLib.List<TelepathyGLib.ContactSearchResult> results);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_contact_search_result_get_type ()")]
	[Version (since = "0.13.11")]
	public class ContactSearchResult : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ContactSearchResult ();
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.ContactInfoField> dup_fields ();
		public unowned TelepathyGLib.ContactInfoField get_field (string field);
		[Version (deprecated = true)]
		public GLib.List<weak TelepathyGLib.ContactInfoField> get_fields ();
		public unowned string get_identifier ();
		public string identifier { get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_dbus_daemon_get_type ()")]
	[Version (since = "0.7.1")]
	public sealed class DBusDaemon : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		protected DBusDaemon ();
		[Version (since = "0.7.26")]
		public static TelepathyGLib.DBusDaemon dup () throws GLib.Error;
		[Version (since = "0.7.35")]
		public unowned string get_unique_name ();
		[Version (since = "0.7.32")]
		public static void init_known_interfaces ();
		[Version (since = "0.7.35")]
		public void list_activatable_names (int timeout_ms, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned TelepathyGLib.DBusDaemonListNamesCb callback, GLib.Object weak_object);
		[Version (since = "0.7.35")]
		public void list_names (int timeout_ms, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned TelepathyGLib.DBusDaemonListNamesCb callback, GLib.Object weak_object);
		[Version (since = "0.11.3")]
		public void register_object (string object_path, GLib.Object object);
		[Version (since = "0.7.30")]
		public bool release_name (string well_known_name) throws GLib.Error;
		[Version (since = "0.7.30")]
		public bool request_name (string well_known_name, bool idempotent) throws GLib.Error;
		[Version (since = "0.11.3")]
		public void unregister_object (GLib.Object object);
		public void watch_name_owner (string name, owned TelepathyGLib.DBusDaemonNameOwnerChangedCb callback);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_dbus_tube_channel_get_type ()")]
	[Version (since = "0.18.0")]
	public class DBusTubeChannel : TelepathyGLib.Channel {
		[CCode (has_construct_function = false)]
		protected DBusTubeChannel ();
		public async GLib.DBusConnection accept_async () throws GLib.Error;
		[Version (since = "0.19.10")]
		public GLib.Variant dup_parameters_vardict ();
		public static GLib.Quark feature_quark_core ();
		public unowned string get_service_name ();
		public async GLib.DBusConnection offer_async (GLib.HashTable<void*,void*>? @params) throws GLib.Error;
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant parameters_vardict { owned get; }
		public string service_name { get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_debug_client_get_type ()")]
	[Version (since = "0.19.0")]
	public sealed class DebugClient : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public DebugClient (TelepathyGLib.DBusDaemon dbus, string unique_name) throws GLib.Error;
		public static GLib.Quark get_feature_quark_core ();
		public async GLib.GenericArray<weak TelepathyGLib.DebugMessage> get_messages_async () throws GLib.Error;
		public static void init_known_interfaces ();
		public bool is_enabled ();
		public async bool set_enabled_async (bool enabled) throws GLib.Error;
		[NoAccessorMethod]
		public bool enabled { get; }
		public signal void new_debug_message (TelepathyGLib.DebugMessage message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_debug_message_get_type ()")]
	[Version (since = "0.19.0")]
	public class DebugMessage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DebugMessage ();
		public unowned string get_category ();
		public unowned string get_domain ();
		public GLib.LogLevelFlags get_level ();
		public unowned string get_message ();
		public unowned GLib.DateTime get_time ();
		public string category { get; }
		public string domain { get; }
		public uint level { get; }
		public string message { get; }
		public GLib.DateTime time { get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class DebugMessagePriv {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_file_transfer_channel_get_type ()")]
	[Version (since = "0.15.5")]
	public class FileTransferChannel : TelepathyGLib.Channel {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.15.5")]
		public FileTransferChannel (TelepathyGLib.Connection conn, string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		[Version (since = "0.17.1")]
		public async bool accept_file_async (GLib.File file, uint64 offset) throws GLib.Error;
		public unowned GLib.DateTime get_date ();
		public unowned string get_description ();
		public static GLib.Quark get_feature_quark_core ();
		public unowned string get_filename ();
		[Version (since = "0.17.1")]
		public unowned GLib.HashTable<string,string[]> get_metadata ();
		public unowned string get_mime_type ();
		[Version (since = "0.17.1")]
		public unowned string get_service_name ();
		public uint64 get_size ();
		[Version (since = "0.17.1")]
		public TelepathyGLib.FileTransferState get_state (out TelepathyGLib.FileTransferStateChangeReason reason);
		public uint64 get_transferred_bytes ();
		[Version (since = "0.17.1")]
		public async bool provide_file_async (GLib.File file) throws GLib.Error;
		public GLib.DateTime date { get; }
		public string description { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.1")]
		public GLib.File file { owned get; }
		public string filename { get; }
		[NoAccessorMethod]
		[Version (since = "0.17.1")]
		public uint64 initial_offset { get; }
		public string mime_type { get; }
		[Version (since = "0.17.1")]
		public string service_name { get; }
		public uint64 size { get; }
		[NoAccessorMethod]
		public uint state { get; }
		public uint64 transferred_bytes { get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_handle_channels_context_get_type ()")]
	[Version (since = "0.11.6")]
	public sealed class HandleChannelsContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HandleChannelsContext ();
		public void accept ();
		public void delay ();
		public void fail (GLib.Error error);
		[Version (since = "0.11.14")]
		public unowned GLib.HashTable<string,GLib.Value?> get_handler_info ();
		[Version (since = "0.13.14")]
		public GLib.List<TelepathyGLib.ChannelRequest> get_requests ();
		[NoAccessorMethod]
		public TelepathyGLib.Account account { owned get; construct; }
		[NoAccessorMethod]
		public GLib.GenericArray<void*> channels { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.Connection connection { owned get; construct; }
		[NoAccessorMethod]
		public GLib.GenericArray<void*> requests_satisfied { owned get; construct; }
		[NoAccessorMethod]
		public int64 user_action_time { get; construct; }
		public signal void done ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class HandleRepoIfaceClass {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_handle_set_get_type ()")]
	[Compact]
	public class HandleSet {
		public string dump ();
		public GLib.HashTable<TelepathyGLib.Handle,string> to_identifier_map ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_intset_get_type ()")]
	[Compact]
	public class Intset {
		[CCode (has_construct_function = false)]
		public Intset ();
		public void add (uint element);
		public void clear ();
		[CCode (has_construct_function = false)]
		[Version (since = "0.7.26")]
		public Intset.containing (uint element);
		public TelepathyGLib.Intset copy ();
		public void destroy ();
		public TelepathyGLib.Intset difference (TelepathyGLib.Intset right);
		[Version (since = "0.13.10")]
		public void difference_update (TelepathyGLib.Intset other);
		public string dump ();
		public void @foreach (TelepathyGLib.IntFunc func);
		public static TelepathyGLib.Intset from_array (GLib.Array<uint> array);
		public TelepathyGLib.Intset intersection (TelepathyGLib.Intset right);
		[Version (since = "0.11.6")]
		public bool is_empty ();
		public bool is_equal (TelepathyGLib.Intset right);
		public bool is_member (uint element);
		public bool remove (uint element);
		public uint size ();
		[CCode (cname = "tp_intset_sized_new", has_construct_function = false)]
		public Intset.sized_new (uint size);
		public TelepathyGLib.Intset symmetric_difference (TelepathyGLib.Intset right);
		public GLib.Array<uint> to_array ();
		public TelepathyGLib.Intset union (TelepathyGLib.Intset right);
		[Version (since = "0.13.10")]
		public void union_update (TelepathyGLib.Intset other);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_message_get_type ()")]
	public sealed class Message : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Message ();
		[Version (since = "0.7.21")]
		public uint append_part ();
		[Version (since = "0.7.21")]
		public uint count_parts ();
		[Version (since = "0.7.21")]
		public bool delete_key (uint part, string key);
		[Version (since = "0.7.21")]
		public void delete_part (uint part);
		[Version (since = "0.7.21")]
		public void destroy ();
		[Version (since = "0.19.10")]
		public GLib.Variant dup_part (uint part);
		[Version (since = "0.13.10")]
		public TelepathyGLib.ChannelTextMessageType get_message_type ();
		[Version (since = "0.15.3")]
		public uint32 get_pending_message_id (out bool valid);
		[Version (since = "0.13.9")]
		public int64 get_received_timestamp ();
		[Version (since = "0.13.9")]
		public int64 get_sent_timestamp ();
		[Version (since = "0.13.9")]
		public unowned string get_specific_to_interface ();
		[Version (since = "0.13.9")]
		public unowned string get_supersedes ();
		[Version (since = "0.13.9")]
		public unowned string get_token ();
		[Version (since = "0.13.9")]
		public bool is_delivery_report ();
		[Version (since = "0.13.9")]
		public bool is_mutable ();
		[Version (since = "0.13.9")]
		public bool is_rescued ();
		[Version (since = "0.13.9")]
		public bool is_scrollback ();
		[Version (since = "0.7.21")]
		public unowned GLib.HashTable<string,GLib.Value?> peek (uint part);
		[Version (deprecated = true, since = "0.7.21")]
		public void ref_handle (TelepathyGLib.HandleType handle_type, TelepathyGLib.Handle handle);
		[Version (since = "0.7.21")]
		public void @set (uint part, string key, GLib.Value source);
		[Version (since = "0.7.21")]
		public void set_boolean (uint part, string key, bool b);
		[Version (since = "0.7.21")]
		public void set_bytes (uint part, string key, uint len, void* bytes);
		[Version (deprecated = true, since = "0.7.21")]
		public void set_handle (uint part, string key, TelepathyGLib.HandleType handle_type, TelepathyGLib.Handle handle_or_0);
		[Version (since = "0.7.21")]
		public void set_int32 (uint part, string key, int32 i);
		[Version (since = "0.7.21")]
		public void set_int64 (uint part, string key, int64 i);
		[Version (since = "0.7.21")]
		public void set_string (uint part, string key, string s);
		[Version (since = "0.7.21")]
		public void set_uint32 (uint part, string key, uint32 u);
		[Version (since = "0.7.21")]
		public void set_uint64 (uint part, string key, uint64 u);
		[Version (since = "0.19.10")]
		public void set_variant (uint part, string key, GLib.Variant value);
		[Version (deprecated = true, since = "0.7.21")]
		public void take_message (uint part, string key, TelepathyGLib.Message message);
		[Version (since = "0.13.9")]
		public string to_text (out TelepathyGLib.ChannelTextMessageFlags out_flags);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_observe_channels_context_get_type ()")]
	[Version (since = "0.11.5")]
	public sealed class ObserveChannelsContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ObserveChannelsContext ();
		public void accept ();
		public void delay ();
		public void fail (GLib.Error error);
		[Version (since = "0.13.14")]
		public GLib.List<TelepathyGLib.ChannelRequest> get_requests ();
		public bool is_recovering ();
		[NoAccessorMethod]
		public TelepathyGLib.Account account { owned get; construct; }
		[NoAccessorMethod]
		public GLib.GenericArray<void*> channels { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.Connection connection { owned get; construct; }
		[NoAccessorMethod]
		public TelepathyGLib.ChannelDispatchOperation dispatch_operation { owned get; construct; }
		public GLib.GenericArray<void*> requests { owned get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "tp_presence_status_spec_get_type ()")]
	[Compact]
	public class PresenceStatusSpec {
		public weak string name;
		public TelepathyGLib.PresenceStatusOptionalArgumentSpec optional_arguments;
		public TelepathyGLib.ConnectionPresenceType presence_type;
		public bool self;
		[CCode (has_construct_function = false)]
		[Version (since = "0.23.1")]
		public PresenceStatusSpec (string name, TelepathyGLib.ConnectionPresenceType type, bool can_set_on_self, bool has_message);
		[Version (since = "0.23.1")]
		public bool can_set_on_self ();
		[Version (since = "0.23.1")]
		public TelepathyGLib.PresenceStatusSpec copy ();
		[DestroysInstance]
		[Version (since = "0.23.1")]
		public void free ();
		[Version (since = "0.23.1")]
		public unowned string get_name ();
		[Version (since = "0.23.1")]
		public TelepathyGLib.ConnectionPresenceType get_presence_type ();
		[Version (since = "0.23.1")]
		public bool has_message ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_protocol_get_type ()")]
	[Version (since = "0.11.11")]
	public class Protocol : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public Protocol (TelepathyGLib.DBusDaemon dbus, string cm_name, string protocol_name, GLib.HashTable<void*,void*> immutable_properties) throws GLib.Error;
		public bool can_register ();
		[Version (since = "0.23.3")]
		public GLib.Variant dup_immutable_properties ();
		[Version (since = "0.17.6")]
		public TelepathyGLib.ConnectionManagerParam dup_param (string param);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] dup_param_names ();
		[Version (since = "0.17.6")]
		public GLib.List<TelepathyGLib.ConnectionManagerParam> dup_params ();
		public GLib.List<TelepathyGLib.PresenceStatusSpec> dup_presence_statuses ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.23.1")]
		public unowned string[] get_addressable_uri_schemes ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.23.1")]
		public unowned string[] get_addressable_vcard_fields ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.9")]
		public unowned string[] get_authentication_types ();
		[Version (since = "0.15.6")]
		public unowned TelepathyGLib.AvatarRequirements get_avatar_requirements ();
		public unowned TelepathyGLib.Capabilities get_capabilities ();
		[Version (since = "0.19.1")]
		public unowned string get_cm_name ();
		public unowned string get_english_name ();
		public static GLib.Quark get_feature_quark_core ();
		public static GLib.Quark get_feature_quark_parameters ();
		public unowned string get_icon_name ();
		public unowned string get_name ();
		public unowned TelepathyGLib.ConnectionManagerParam get_param (string param);
		public unowned string get_vcard_field ();
		public bool has_param (string param);
		[Version (since = "0.23.1")]
		public async string identify_account_async (GLib.Variant vardict, GLib.Cancellable? cancellable) throws GLib.Error;
		public static void init_known_interfaces ();
		[Version (since = "0.23.1")]
		public async string normalize_contact_async (string contact, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "0.23.1")]
		public async string normalize_contact_uri_async (string uri, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "0.23.1")]
		public async string normalize_vcard_address_async (string field, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "0.23.3")]
		public Protocol.vardict (TelepathyGLib.DBusDaemon dbus, string cm_name, string protocol_name, GLib.Variant immutable_properties) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.23.1")]
		public string[] addressable_uri_schemes { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.23.1")]
		public string[] addressable_vcard_fields { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.13.9")]
		public string[] authentication_types { get; }
		[Version (since = "0.15.6")]
		public void* avatar_requirements { get; }
		public TelepathyGLib.Capabilities capabilities { get; }
		[Version (since = "0.19.1")]
		public string cm_name { get; construct; }
		public string english_name { get; }
		public string icon_name { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] param_names { owned get; }
		[NoAccessorMethod]
		public string protocol_name { owned get; construct; }
		[NoAccessorMethod]
		[Version (since = "0.23.3")]
		public GLib.Variant protocol_properties_vardict { owned get; }
		public string vcard_field { get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_proxy_get_type ()")]
	[Version (since = "0.7.1")]
	public class Proxy : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Proxy ();
		[Version (since = "0.7.24")]
		public void dbus_error_to_gerror (string dbus_error, string debug_message) throws GLib.Error;
		[Version (since = "0.7.17")]
		public unowned string get_bus_name ();
		[Version (since = "0.7.17")]
		public unowned TelepathyGLib.DBusDaemon get_dbus_daemon ();
		[Version (since = "0.15.5")]
		public unowned TelepathyGLib.SimpleClientFactory get_factory ();
		[Version (since = "0.7.17")]
		public unowned GLib.Error get_invalidated ();
		[Version (since = "0.7.17")]
		public unowned string get_object_path ();
		public bool has_interface (string iface);
		public bool has_interface_by_id (GLib.Quark iface);
		[Version (since = "0.11.3")]
		public bool is_prepared (GLib.Quark feature);
		[Version (since = "0.11.3")]
		public async bool prepare_async ([CCode (array_length = false, array_null_terminated = true)] GLib.Quark[]? features) throws GLib.Error;
		public string bus_name { get; construct; }
		public TelepathyGLib.DBusDaemon dbus_daemon { get; construct; }
		public TelepathyGLib.SimpleClientFactory factory { get; construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] interfaces { owned get; }
		public string object_path { get; construct; }
		public signal void invalidated (uint domain, int code, string message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class ProxyPendingCall {
		public void cancel ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class ProxySignalConnection {
		public void disconnect ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_room_info_get_type ()")]
	[Version (since = "0.19.0")]
	public class RoomInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		protected RoomInfo ();
		public unowned string get_channel_type ();
		public unowned string get_description ();
		public TelepathyGLib.Handle get_handle ();
		public unowned string get_handle_name ();
		public bool get_invite_only (bool known);
		public uint get_members_count (bool known);
		public unowned string get_name ();
		public bool get_requires_password (bool known);
		public unowned string get_room_id ();
		public unowned string get_server ();
		public unowned string get_subject ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class RoomInfoPriv {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_room_list_get_type ()")]
	[Version (since = "0.19.0")]
	public class RoomList : GLib.Object, GLib.AsyncInitable {
		[CCode (cname = "tp_room_list_new_async", has_construct_function = false)]
		public async RoomList (TelepathyGLib.Account account, string server) throws GLib.Error;
		public unowned TelepathyGLib.Account get_account ();
		public unowned string get_server ();
		public bool is_listing ();
		public void start ();
		public TelepathyGLib.Account account { get; construct; }
		[NoAccessorMethod]
		public bool listing { get; }
		public string server { get; construct; }
		public signal void failed (GLib.Error error);
		public signal void got_room (TelepathyGLib.RoomInfo room);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_signalled_message_get_type ()")]
	[Version (since = "0.13.9")]
	public sealed class SignalledMessage : TelepathyGLib.Message {
		[CCode (has_construct_function = false)]
		protected SignalledMessage ();
		public static unowned TelepathyGLib.Contact get_sender (TelepathyGLib.Message message);
		[NoAccessorMethod]
		public TelepathyGLib.Contact sender { owned get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_simple_approver_get_type ()")]
	[Version (since = "0.11.5")]
	public class SimpleApprover : TelepathyGLib.BaseClient {
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (deprecated = true, since = "0.11.5")]
		public SimpleApprover (TelepathyGLib.DBusDaemon dbus, string name, bool uniquify, owned TelepathyGLib.SimpleApproverAddDispatchOperationImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.11.14")]
		public SimpleApprover.with_am (TelepathyGLib.AccountManager account_manager, string name, bool uniquify, owned TelepathyGLib.SimpleApproverAddDispatchOperationImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.15.5")]
		public SimpleApprover.with_factory (TelepathyGLib.SimpleClientFactory factory, string name, bool uniquify, owned TelepathyGLib.SimpleApproverAddDispatchOperationImpl callback);
		[NoAccessorMethod]
		public void* callback { construct; }
		[NoAccessorMethod]
		public void* destroy { construct; }
		[NoAccessorMethod]
		public void* user_data { construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_simple_client_factory_get_type ()")]
	[Version (since = "0.15.5")]
	public class SimpleClientFactory : GLib.Object {
		[CCode (has_construct_function = false)]
		public SimpleClientFactory (TelepathyGLib.DBusDaemon? dbus);
		public void add_account_features ([CCode (array_length = false, array_null_terminated = true)] GLib.Quark[]? features);
		public void add_channel_features ([CCode (array_length = false, array_null_terminated = true)] GLib.Quark[]? features);
		public void add_connection_features ([CCode (array_length = false, array_null_terminated = true)] GLib.Quark[]? features);
		public void add_contact_features ([CCode (array_length_cname = "n_features", array_length_pos = 0.5, array_length_type = "guint")] TelepathyGLib.ContactFeature[]? features);
		public virtual GLib.Array<GLib.Quark?> dup_account_features (TelepathyGLib.Account account);
		public virtual GLib.Array<GLib.Quark?> dup_channel_features (TelepathyGLib.Channel channel);
		public virtual GLib.Array<GLib.Quark?> dup_connection_features (TelepathyGLib.Connection connection);
		public virtual GLib.Array<TelepathyGLib.ContactFeature> dup_contact_features (TelepathyGLib.Connection connection);
		public TelepathyGLib.Account ensure_account (string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		public TelepathyGLib.Channel ensure_channel (TelepathyGLib.Connection connection, string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		public TelepathyGLib.Connection ensure_connection (string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		public TelepathyGLib.Contact ensure_contact (TelepathyGLib.Connection connection, TelepathyGLib.Handle handle, string identifier);
		[Version (since = "0.19.1")]
		public async TelepathyGLib.Contact ensure_contact_by_id_async (TelepathyGLib.Connection connection, string identifier) throws GLib.Error;
		public unowned TelepathyGLib.DBusDaemon get_dbus_daemon ();
		[Version (since = "0.19.1")]
		public async bool upgrade_contacts_async (TelepathyGLib.Connection connection, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, out GLib.GenericArray<weak TelepathyGLib.Contact> contacts_out) throws GLib.Error;
		public TelepathyGLib.DBusDaemon dbus_daemon { get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_simple_handler_get_type ()")]
	[Version (since = "0.11.6")]
	public class SimpleHandler : TelepathyGLib.BaseClient {
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (deprecated = true, since = "0.11.6")]
		public SimpleHandler (TelepathyGLib.DBusDaemon dbus, bool bypass_approval, bool requests, string name, bool uniquify, owned TelepathyGLib.SimpleHandlerHandleChannelsImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.11.14")]
		public SimpleHandler.with_am (TelepathyGLib.AccountManager account_manager, bool bypass_approval, bool requests, string name, bool uniquify, owned TelepathyGLib.SimpleHandlerHandleChannelsImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.15.5")]
		public SimpleHandler.with_factory (TelepathyGLib.SimpleClientFactory factory, bool bypass_approval, bool requests, string name, bool uniquify, owned TelepathyGLib.SimpleHandlerHandleChannelsImpl callback);
		[NoAccessorMethod]
		public bool bypass_approval { construct; }
		[NoAccessorMethod]
		public void* callback { construct; }
		[NoAccessorMethod]
		public void* destroy { construct; }
		[NoAccessorMethod]
		public bool requests { construct; }
		[NoAccessorMethod]
		public void* user_data { construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_simple_observer_get_type ()")]
	[Version (since = "0.11.5")]
	public class SimpleObserver : TelepathyGLib.BaseClient {
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (deprecated = true, since = "0.11.5")]
		public SimpleObserver (TelepathyGLib.DBusDaemon dbus, bool recover, string name, bool uniquify, owned TelepathyGLib.SimpleObserverObserveChannelsImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.11.14")]
		public SimpleObserver.with_am (TelepathyGLib.AccountManager account_manager, bool recover, string name, bool uniquify, owned TelepathyGLib.SimpleObserverObserveChannelsImpl callback);
		[CCode (has_construct_function = false, type = "TpBaseClient*")]
		[Version (since = "0.15.5")]
		public SimpleObserver.with_factory (TelepathyGLib.SimpleClientFactory factory, bool recover, string name, bool uniquify, owned TelepathyGLib.SimpleObserverObserveChannelsImpl callback);
		[NoAccessorMethod]
		public void* callback { construct; }
		[NoAccessorMethod]
		public void* destroy { construct; }
		[NoAccessorMethod]
		public bool recover { construct; }
		[NoAccessorMethod]
		public void* user_data { construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_stream_tube_channel_get_type ()")]
	[Version (since = "0.13.2")]
	public class StreamTubeChannel : TelepathyGLib.Channel {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.13.2")]
		public StreamTubeChannel (TelepathyGLib.Connection conn, string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		public async TelepathyGLib.StreamTubeConnection accept_async () throws GLib.Error;
		[Version (since = "0.19.10")]
		public GLib.Variant dup_parameters_vardict ();
		public unowned string get_service ();
		public async bool offer_async (GLib.HashTable<void*,void*>? @params) throws GLib.Error;
		[NoAccessorMethod]
		[Version (since = "0.19.10")]
		public GLib.Variant parameters_vardict { owned get; }
		public string service { get; }
		public signal void incoming (TelepathyGLib.StreamTubeConnection tube_connection);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_stream_tube_connection_get_type ()")]
	[Version (since = "0.13.2")]
	public sealed class StreamTubeConnection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected StreamTubeConnection ();
		public unowned TelepathyGLib.StreamTubeChannel get_channel ();
		public unowned TelepathyGLib.Contact get_contact ();
		public unowned GLib.SocketConnection get_socket_connection ();
		public TelepathyGLib.StreamTubeChannel channel { get; construct; }
		public TelepathyGLib.Contact contact { get; construct; }
		public GLib.SocketConnection socket_connection { get; construct; }
		public signal void closed (GLib.Error error);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_tls_certificate_get_type ()")]
	[Version (since = "0.19.0")]
	public class TLSCertificate : TelepathyGLib.Proxy {
		[CCode (has_construct_function = false)]
		public TLSCertificate (TelepathyGLib.Proxy conn_or_chan, string object_path) throws GLib.Error;
		public async bool accept_async () throws GLib.Error;
		public void add_rejection (TelepathyGLib.TLSCertificateRejectReason reason, string dbus_error, GLib.Variant? details);
		public unowned GLib.GenericArray<GLib.Bytes> get_cert_data ();
		public unowned string get_cert_type ();
		public static GLib.Quark get_feature_quark_core ();
		public unowned TelepathyGLib.TLSCertificateRejection? get_nth_rejection (uint n);
		public unowned TelepathyGLib.TLSCertificateRejection? get_rejection ();
		public TelepathyGLib.TLSCertificateState get_state ();
		public static void init_known_interfaces ();
		public async bool reject_async () throws GLib.Error;
		public GLib.GenericArray<void*> cert_data { get; }
		public string cert_type { get; }
		[NoAccessorMethod]
		public TelepathyGLib.Proxy parent { owned get; construct; }
		public uint state { get; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_tls_certificate_rejection_get_type ()")]
	[Version (since = "0.19.0")]
	public class TLSCertificateRejection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TLSCertificateRejection ();
		public unowned string get_dbus_error ();
		public GLib.Variant get_details ();
		public unowned GLib.Error get_error ();
		public TelepathyGLib.TLSCertificateRejectReason get_reason ();
		public bool raise_error () throws GLib.Error;
		public string dbus_error { get; construct; }
		public GLib.Variant details { owned get; construct; }
		public GLib.Error error { get; construct; }
		public uint reason { get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	public class TLSCertificateRejectionPriv {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_text_channel_get_type ()")]
	[Version (since = "0.13.10")]
	public class TextChannel : TelepathyGLib.Channel {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, since = "0.13.10")]
		public TextChannel (TelepathyGLib.Connection conn, string object_path, GLib.HashTable<string,GLib.Value?> immutable_properties) throws GLib.Error;
		[Version (since = "0.15.3")]
		public async bool ack_all_pending_messages_async () throws GLib.Error;
		public async bool ack_message_async (TelepathyGLib.Message message) throws GLib.Error;
		public async bool ack_messages_async (GLib.List<TelepathyGLib.SignalledMessage> messages) throws GLib.Error;
		[Version (since = "0.19.9")]
		public GLib.List<TelepathyGLib.SignalledMessage> dup_pending_messages ();
		[Version (since = "0.19.0")]
		public TelepathyGLib.ChannelChatState get_chat_state (TelepathyGLib.Contact contact);
		public TelepathyGLib.DeliveryReportingSupportFlags get_delivery_reporting_support ();
		public static GLib.Quark get_feature_quark_chat_states ();
		public static GLib.Quark get_feature_quark_incoming_messages ();
		public static GLib.Quark get_feature_quark_sms ();
		public TelepathyGLib.MessagePartSupportFlags get_message_part_support_flags ();
		[Version (since = "0.13.16")]
		public unowned GLib.Array<TelepathyGLib.ChannelTextMessageType> get_message_types ();
		[Version (deprecated = true, since = "0.13.10")]
		public GLib.List<weak TelepathyGLib.SignalledMessage> get_pending_messages ();
		[Version (since = "0.15.1")]
		public bool get_sms_flash ();
		[Version (since = "0.15.1")]
		public async bool get_sms_length_async (TelepathyGLib.Message message, out uint chunks_required, out int remaining_characters, out int estimated_cost) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_supported_content_types ();
		public async bool send_message_async (TelepathyGLib.Message message, TelepathyGLib.MessageSendingFlags flags, out string token) throws GLib.Error;
		public async bool set_chat_state_async (TelepathyGLib.ChannelChatState state) throws GLib.Error;
		[Version (since = "0.13.16")]
		public bool supports_message_type (TelepathyGLib.ChannelTextMessageType message_type);
		public uint delivery_reporting_support { get; }
		[NoAccessorMethod]
		[Version (since = "0.15.1")]
		public bool is_sms_channel { get; }
		public uint message_part_support_flags { get; }
		[Version (since = "0.15.1")]
		public bool sms_flash { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] supported_content_types { get; }
		[Version (since = "0.19.0")]
		public signal void contact_chat_state_changed (TelepathyGLib.Contact contact, uint state);
		public signal void message_received (TelepathyGLib.SignalledMessage message);
		public signal void message_sent (TelepathyGLib.SignalledMessage message, uint flags, string token);
		public signal void pending_message_removed (TelepathyGLib.SignalledMessage message);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.11.3")]
	public class WeakRef {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_cname = "TpClientChannelFactoryInterface", type_id = "tp_client_channel_factory_get_type ()")]
	[Version (since = "0.13.6")]
	public interface ClientChannelFactory : GLib.Object {
		[Version (since = "0.13.2")]
		public TelepathyGLib.Channel create_channel (TelepathyGLib.Connection conn, string path, GLib.HashTable<string,GLib.Value?> properties) throws GLib.Error;
		[Version (since = "0.13.3")]
		public GLib.Array<GLib.Quark?> dup_channel_features (TelepathyGLib.Channel channel);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", type_id = "tp_handle_repo_iface_get_type ()")]
	public interface HandleRepoIface : GLib.Object {
		[NoAccessorMethod]
		public abstract uint handle_type { get; construct; }
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct ContactsMixin {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct ContactsMixinClass {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.7.3")]
	public struct DBusPropertiesMixinClass {
		public TelepathyGLib.DBusPropertiesMixinIfaceImpl interfaces;
		[CCode (cname = "tp_dbus_properties_mixin_class_init")]
		public static void init (GLib.ObjectClass cls, size_t offset);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.7.3")]
	public struct DBusPropertiesMixinIfaceImpl {
		public weak string name;
		public weak TelepathyGLib.DBusPropertiesMixinGetter getter;
		public weak TelepathyGLib.DBusPropertiesMixinSetter setter;
		public TelepathyGLib.DBusPropertiesMixinPropImpl props;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.7.3")]
	public struct DBusPropertiesMixinIfaceInfo {
		public GLib.Quark dbus_interface;
		public TelepathyGLib.DBusPropertiesMixinPropInfo props;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.7.3")]
	public struct DBusPropertiesMixinPropImpl {
		public weak string name;
		public void* getter_data;
		public void* setter_data;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.7.3")]
	public struct DBusPropertiesMixinPropInfo {
		public GLib.Quark name;
		public TelepathyGLib.DBusPropertiesMixinFlags flags;
		public weak string dbus_signature;
		public GLib.Type type;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct GroupMixin {
		public weak TelepathyGLib.HandleRepoIface handle_repo;
		public TelepathyGLib.Handle self_handle;
		public TelepathyGLib.ChannelGroupFlags group_flags;
		public weak TelepathyGLib.HandleSet members;
		public weak TelepathyGLib.HandleSet local_pending;
		public weak TelepathyGLib.HandleSet remote_pending;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct GroupMixinClass {
		public weak TelepathyGLib.GroupMixinAddMemberFunc add_member;
		public weak TelepathyGLib.GroupMixinRemMemberFunc remove_member;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[SimpleType]
	public struct Handle : uint {
		public static TelepathyGLib.Handle ensure (TelepathyGLib.HandleRepoIface self, string id, void* context) throws GLib.Error;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.11.6")]
	public struct IntsetFastIter {
		public void init (TelepathyGLib.Intset @set);
		public bool next (uint output);
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (deprecated = true)]
	public struct IntsetIter {
		public weak TelepathyGLib.Intset @set;
		public uint element;
		[Version (deprecated = true)]
		public void init (TelepathyGLib.Intset @set);
		public bool next ();
		[Version (deprecated = true)]
		public void reset ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct PresenceMixin {
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct PresenceMixinClass {
		public weak TelepathyGLib.PresenceMixinStatusAvailableFunc status_available;
		public weak TelepathyGLib.PresenceMixinSetOwnStatusFunc set_own_status;
		public weak TelepathyGLib.PresenceStatusSpec statuses;
		public weak TelepathyGLib.PresenceMixinGetMaximumStatusMessageLengthFunc get_maximum_status_message_length;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct PresenceStatus {
		public uint index;
		public weak GLib.HashTable<void*,void*> optional_arguments;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	public struct PresenceStatusOptionalArgumentSpec {
		public weak string name;
		public weak string dtype;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_type_id = false)]
	[Version (since = "0.11.3")]
	public struct ProxyFeature {
		public GLib.Quark name;
		public bool core;
		public weak TelepathyGLib.ProxyPrepareAsync prepare_async;
		public weak TelepathyGLib.ProxyPrepareAsync prepare_before_signalling_connected_async;
		public GLib.Quark interfaces_needed;
		public GLib.Quark depends_on;
		public bool can_retry;
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_ACCESS_CONTROL_TYPE_", has_type_id = false)]
	public enum AccessControlType {
		WHITELIST,
		PUBLISH_LIST,
		GROUP,
		OPEN,
		SUBSCRIBE_OR_PUBLISH_LIST,
		CLOSED,
		NOT_UNDERSTOOD
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_ANONYMITY_MODE_", has_type_id = false)]
	[Flags]
	public enum AnonymityModeFlags {
		CLIENT_INFO,
		SHOW_CLIENT_INFO,
		NETWORK_INFO
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CM_INFO_SOURCE_", has_type_id = false)]
	[Version (since = "0.7.1")]
	public enum CMInfoSource {
		NONE,
		FILE,
		LIVE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_CONTENT_DISPOSITION_", has_type_id = false)]
	public enum CallContentDisposition {
		NONE,
		INITIAL
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_CONTENT_PACKETIZATION_TYPE_", has_type_id = false)]
	public enum CallContentPacketizationType {
		RTP,
		RAW,
		MSN_WEBCAM
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_FLAG_", has_type_id = false)]
	[Flags]
	public enum CallFlags {
		LOCALLY_HELD,
		LOCALLY_RINGING,
		LOCALLY_QUEUED,
		FORWARDED,
		CLEARING
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_MEMBER_FLAG_", has_type_id = false)]
	[Flags]
	public enum CallMemberFlags {
		RINGING,
		HELD,
		CONFERENCE_HOST
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_STATE_", has_type_id = false)]
	public enum CallState {
		UNKNOWN,
		PENDING_INITIATOR,
		INITIALISING,
		INITIALISED,
		ACCEPTED,
		ACTIVE,
		ENDED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_STATE_CHANGE_REASON_", has_type_id = false)]
	public enum CallStateChangeReason {
		UNKNOWN,
		PROGRESS_MADE,
		USER_REQUESTED,
		FORWARDED,
		REJECTED,
		NO_ANSWER,
		INVALID_CONTACT,
		PERMISSION_DENIED,
		BUSY,
		INTERNAL_ERROR,
		SERVICE_ERROR,
		NETWORK_ERROR,
		MEDIA_ERROR,
		CONNECTIVITY_ERROR
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CALL_STREAM_CANDIDATE_TYPE_", has_type_id = false)]
	public enum CallStreamCandidateType {
		NONE,
		HOST,
		SERVER_REFLEXIVE,
		PEER_REFLEXIVE,
		RELAY,
		MULTICAST
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CAPTCHA_CANCEL_REASON_", has_type_id = false)]
	public enum CaptchaCancelReason {
		USER_CANCELLED,
		NOT_SUPPORTED,
		SERVICE_CONFUSED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CAPTCHA_FLAGS_", has_type_id = false)]
	[Flags]
	public enum CaptchaFlags {
		[CCode (cname = "TP_CAPTCHA_FLAGS_REQUIRED")]
		CAPTCHA_FLAGS_REQUIRED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CAPTCHA_STATUS_", has_type_id = false)]
	public enum CaptchaStatus {
		LOCAL_PENDING,
		REMOTE_PENDING,
		SUCCEEDED,
		TRY_AGAIN,
		FAILED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_CALL_STATE_", has_type_id = false)]
	[Flags]
	public enum ChannelCallStateFlags {
		RINGING,
		QUEUED,
		HELD,
		FORWARDED,
		IN_PROGRESS,
		CONFERENCE_HOST
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_CHAT_STATE_", has_type_id = false)]
	public enum ChannelChatState {
		GONE,
		INACTIVE,
		ACTIVE,
		PAUSED,
		COMPOSING
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_CONTACT_SEARCH_STATE_", has_type_id = false)]
	public enum ChannelContactSearchState {
		NOT_STARTED,
		IN_PROGRESS,
		MORE_AVAILABLE,
		COMPLETED,
		FAILED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_GROUP_CHANGE_REASON_", has_type_id = false)]
	public enum ChannelGroupChangeReason {
		NONE,
		OFFLINE,
		KICKED,
		BUSY,
		INVITED,
		BANNED,
		ERROR,
		INVALID_CONTACT,
		NO_ANSWER,
		RENAMED,
		PERMISSION_DENIED,
		SEPARATED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_GROUP_FLAG_", has_type_id = false)]
	[Flags]
	public enum ChannelGroupFlags {
		CAN_ADD,
		CAN_REMOVE,
		CAN_RESCIND,
		MESSAGE_ADD,
		MESSAGE_REMOVE,
		MESSAGE_ACCEPT,
		MESSAGE_REJECT,
		MESSAGE_RESCIND,
		CHANNEL_SPECIFIC_HANDLES,
		ONLY_ONE_GROUP,
		HANDLE_OWNERS_NOT_AVAILABLE,
		PROPERTIES,
		MEMBERS_CHANGED_DETAILED,
		MESSAGE_DEPART
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_MEDIA_CAPABILITY_", has_type_id = false)]
	[Flags]
	public enum ChannelMediaCapabilities {
		AUDIO,
		VIDEO,
		NAT_TRAVERSAL_STUN,
		NAT_TRAVERSAL_GTALK_P2P,
		NAT_TRAVERSAL_ICE_UDP,
		IMMUTABLE_STREAMS
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_PASSWORD_FLAG_", has_type_id = false)]
	[Flags]
	public enum ChannelPasswordFlags {
		PROVIDE,
		HINT
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_TEXT_MESSAGE_FLAG_", has_type_id = false)]
	[Flags]
	public enum ChannelTextMessageFlags {
		TRUNCATED,
		NON_TEXT_CONTENT,
		SCROLLBACK,
		RESCUED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_TEXT_MESSAGE_TYPE_", has_type_id = false)]
	public enum ChannelTextMessageType {
		NORMAL,
		ACTION,
		NOTICE,
		AUTO_REPLY,
		DELIVERY_REPORT
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CHANNEL_TEXT_SEND_ERROR_", has_type_id = false)]
	public enum ChannelTextSendError {
		UNKNOWN,
		OFFLINE,
		INVALID_CONTACT,
		PERMISSION_DENIED,
		TOO_LONG,
		NOT_IMPLEMENTED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONN_MGR_PARAM_FLAG_", has_type_id = false)]
	[Flags]
	public enum ConnMgrParamFlags {
		REQUIRED,
		REGISTER,
		HAS_DEFAULT,
		SECRET,
		DBUS_PROPERTY
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONNECTION_ALIAS_FLAG_USER_", has_type_id = false)]
	[Flags]
	public enum ConnectionAliasFlags {
		[CCode (cname = "TP_CONNECTION_ALIAS_FLAG_USER_SET")]
		CONNECTION_ALIAS_FLAG_USER_SET
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONNECTION_CAPABILITY_FLAG_", has_type_id = false)]
	[Flags]
	public enum ConnectionCapabilityFlags {
		CREATE,
		INVITE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONNECTION_PRESENCE_TYPE_", has_type_id = false)]
	public enum ConnectionPresenceType {
		UNSET,
		OFFLINE,
		AVAILABLE,
		AWAY,
		EXTENDED_AWAY,
		HIDDEN,
		BUSY,
		UNKNOWN,
		ERROR
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONNECTION_STATUS_", has_type_id = false)]
	public enum ConnectionStatus {
		CONNECTED,
		CONNECTING,
		DISCONNECTED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONNECTION_STATUS_REASON_", has_type_id = false)]
	public enum ConnectionStatusReason {
		NONE_SPECIFIED,
		REQUESTED,
		NETWORK_ERROR,
		AUTHENTICATION_FAILED,
		ENCRYPTION_ERROR,
		NAME_IN_USE,
		CERT_NOT_PROVIDED,
		CERT_UNTRUSTED,
		CERT_EXPIRED,
		CERT_NOT_ACTIVATED,
		CERT_HOSTNAME_MISMATCH,
		CERT_FINGERPRINT_MISMATCH,
		CERT_SELF_SIGNED,
		CERT_OTHER_ERROR,
		CERT_REVOKED,
		CERT_INSECURE,
		CERT_LIMIT_EXCEEDED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_BLOCKING_CAPABILITY_CAN_REPORT_", has_type_id = false)]
	[Flags]
	public enum ContactBlockingCapabilities {
		[CCode (cname = "TP_CONTACT_BLOCKING_CAPABILITY_CAN_REPORT_ABUSIVE")]
		CONTACT_BLOCKING_CAPABILITY_CAN_REPORT_ABUSIVE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_FEATURE_", has_type_id = false)]
	[Version (since = "0.7.18")]
	public enum ContactFeature {
		ALIAS,
		AVATAR_TOKEN,
		PRESENCE,
		LOCATION,
		CAPABILITIES,
		AVATAR_DATA,
		CONTACT_INFO,
		CLIENT_TYPES,
		SUBSCRIPTION_STATES,
		CONTACT_GROUPS,
		CONTACT_BLOCKING
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_INFO_FIELD_FLAG_", has_type_id = false)]
	[Flags]
	public enum ContactInfoFieldFlags {
		PARAMETERS_EXACT,
		OVERWRITTEN_BY_NICKNAME
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_INFO_FLAG_", has_type_id = false)]
	[Flags]
	public enum ContactInfoFlags {
		CAN_SET,
		PUSH
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_LIST_STATE_", has_type_id = false)]
	public enum ContactListState {
		NONE,
		WAITING,
		FAILURE,
		SUCCESS
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_CONTACT_METADATA_STORAGE_TYPE_", has_type_id = false)]
	public enum ContactMetadataStorageType {
		NONE,
		SUBSCRIBED_OR_PENDING,
		SUBSCRIBED,
		ANYONE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DBUS_ERROR_", has_type_id = false)]
	[Version (since = "0.7.1")]
	public enum DBusError {
		UNKNOWN_REMOTE_ERROR,
		PROXY_UNREFERENCED,
		NO_INTERFACE,
		NAME_OWNER_LOST,
		INVALID_BUS_NAME,
		INVALID_INTERFACE_NAME,
		INVALID_OBJECT_PATH,
		INVALID_MEMBER_NAME,
		OBJECT_REMOVED,
		CANCELLED,
		INCONSISTENT
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DBUS_NAME_TYPE_", has_type_id = false)]
	[Flags]
	[Version (since = "0.7.1")]
	public enum DBusNameType {
		UNIQUE,
		WELL_KNOWN,
		BUS_DAEMON,
		NOT_BUS_DAEMON,
		ANY
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DBUS_PROPERTIES_MIXIN_FLAG_", has_type_id = false)]
	[Flags]
	[Version (since = "0.7.3")]
	public enum DBusPropertiesMixinFlags {
		READ,
		WRITE,
		EMITS_CHANGED,
		EMITS_INVALIDATED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DTMF_EVENT_", has_type_id = false)]
	public enum DTMFEvent {
		DIGIT_0,
		DIGIT_1,
		DIGIT_2,
		DIGIT_3,
		DIGIT_4,
		DIGIT_5,
		DIGIT_6,
		DIGIT_7,
		DIGIT_8,
		DIGIT_9,
		ASTERISK,
		HASH,
		LETTER_A,
		LETTER_B,
		LETTER_C,
		LETTER_D
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DEBUG_LEVEL_", has_type_id = false)]
	public enum DebugLevel {
		ERROR,
		CRITICAL,
		WARNING,
		MESSAGE,
		INFO,
		DEBUG
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DELIVERY_REPORTING_SUPPORT_FLAG_RECEIVE_", has_type_id = false)]
	[Flags]
	public enum DeliveryReportingSupportFlags {
		FAILURES,
		SUCCESSES,
		READ,
		DELETED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_DELIVERY_STATUS_", has_type_id = false)]
	public enum DeliveryStatus {
		UNKNOWN,
		DELIVERED,
		TEMPORARILY_FAILED,
		PERMANENTLY_FAILED,
		ACCEPTED,
		READ,
		DELETED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_FILE_HASH_TYPE_", has_type_id = false)]
	public enum FileHashType {
		NONE,
		MD5,
		SHA1,
		SHA256
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_FILE_TRANSFER_STATE_", has_type_id = false)]
	public enum FileTransferState {
		NONE,
		PENDING,
		ACCEPTED,
		OPEN,
		COMPLETED,
		CANCELLED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_FILE_TRANSFER_STATE_CHANGE_REASON_", has_type_id = false)]
	public enum FileTransferStateChangeReason {
		NONE,
		REQUESTED,
		LOCAL_STOPPED,
		REMOTE_STOPPED,
		LOCAL_ERROR,
		REMOTE_ERROR
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_HTTP_METHOD_", has_type_id = false)]
	public enum HTTPMethod {
		GET,
		POST
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_HANDLE_TYPE_", has_type_id = false)]
	public enum HandleType {
		NONE,
		CONTACT,
		ROOM,
		LIST,
		GROUP;
		public bool is_valid () throws GLib.Error;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_LOCAL_HOLD_STATE_", has_type_id = false)]
	public enum LocalHoldState {
		UNHELD,
		HELD,
		PENDING_HOLD,
		PENDING_UNHOLD
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_LOCAL_HOLD_STATE_REASON_", has_type_id = false)]
	public enum LocalHoldStateReason {
		NONE,
		REQUESTED,
		RESOURCE_NOT_AVAILABLE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_LOCATION_FEATURE_CAN_", has_type_id = false)]
	[Flags]
	public enum LocationFeatures {
		[CCode (cname = "TP_LOCATION_FEATURE_CAN_SET")]
		LOCATION_FEATURE_CAN_SET
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MAIL_NOTIFICATION_FLAG_", has_type_id = false)]
	[Flags]
	public enum MailNotificationFlags {
		SUPPORTS_UNREAD_MAIL_COUNT,
		SUPPORTS_UNREAD_MAILS,
		EMITS_MAILS_RECEIVED,
		SUPPORTS_REQUEST_INBOX_URL,
		SUPPORTS_REQUEST_MAIL_URL,
		THREAD_BASED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_BASE_PROTO_", has_type_id = false)]
	public enum MediaStreamBaseProto {
		UDP,
		TCP
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_DIRECTION_", has_type_id = false)]
	public enum MediaStreamDirection {
		NONE,
		SEND,
		RECEIVE,
		BIDIRECTIONAL
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_ERROR_", has_type_id = false)]
	public enum MediaStreamError {
		UNKNOWN,
		EOS,
		CODEC_NEGOTIATION_FAILED,
		CONNECTION_FAILED,
		NETWORK_ERROR,
		NO_CODECS,
		INVALID_CM_BEHAVIOR,
		MEDIA_ERROR
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_PENDING_", has_type_id = false)]
	[Flags]
	public enum MediaStreamPendingSend {
		LOCAL_SEND,
		REMOTE_SEND
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_STATE_", has_type_id = false)]
	public enum MediaStreamState {
		DISCONNECTED,
		CONNECTING,
		CONNECTED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_TRANSPORT_TYPE_", has_type_id = false)]
	public enum MediaStreamTransportType {
		LOCAL,
		DERIVED,
		RELAY
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MEDIA_STREAM_TYPE_", has_type_id = false)]
	public enum MediaStreamType {
		AUDIO,
		VIDEO
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MESSAGE_PART_SUPPORT_FLAG_", has_type_id = false)]
	[Flags]
	public enum MessagePartSupportFlags {
		ONE_ATTACHMENT,
		MULTIPLE_ATTACHMENTS
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_MESSAGE_SENDING_FLAG_REPORT_", has_type_id = false)]
	[Flags]
	public enum MessageSendingFlags {
		DELIVERY,
		READ,
		DELETED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_PROPERTY_FLAG_", has_type_id = false)]
	[Flags]
	public enum PropertyFlags {
		READ,
		WRITE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_RCPT_XR_RTT_MODE_", has_type_id = false)]
	public enum RCPTXRRTTMode {
		ALL,
		SENDER
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_RTCP_XR_STATISTICS_FLAGS_", has_type_id = false)]
	[Flags]
	public enum RTCPXRStatisticsFlags {
		LOSS,
		DUPLICATE,
		JITTER,
		TTL,
		HL
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_RICH_PRESENCE_ACCESS_CONTROL_TYPE_", has_type_id = false)]
	public enum RichPresenceAccessControlType {
		WHITELIST,
		PUBLISH_LIST,
		GROUP,
		OPEN
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SASL_ABORT_REASON_", has_type_id = false)]
	public enum SASLAbortReason {
		INVALID_CHALLENGE,
		USER_ABORT
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SASL_STATUS_", has_type_id = false)]
	public enum SASLStatus {
		NOT_STARTED,
		IN_PROGRESS,
		SERVER_SUCCEEDED,
		CLIENT_ACCEPTED,
		SUCCEEDED,
		SERVER_FAILED,
		CLIENT_FAILED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SENDING_STATE_", has_type_id = false)]
	public enum SendingState {
		NONE,
		PENDING_SEND,
		SENDING,
		PENDING_STOP_SENDING
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SERVICE_POINT_TYPE_", has_type_id = false)]
	public enum ServicePointType {
		NONE,
		EMERGENCY,
		COUNSELING
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SOCKET_ACCESS_CONTROL_", has_type_id = false)]
	public enum SocketAccessControl {
		LOCALHOST,
		PORT,
		NETMASK,
		CREDENTIALS
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SOCKET_ADDRESS_TYPE_", has_type_id = false)]
	public enum SocketAddressType {
		UNIX,
		ABSTRACT_UNIX,
		IPV4,
		IPV6
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_STORAGE_RESTRICTION_FLAG_CANNOT_SET_", has_type_id = false)]
	[Flags]
	public enum StorageRestrictionFlags {
		PARAMETERS,
		ENABLED,
		PRESENCE,
		SERVICE
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_STREAM_COMPONENT_", has_type_id = false)]
	public enum StreamComponent {
		UNKNOWN,
		DATA,
		CONTROL
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_STREAM_ENDPOINT_STATE_", has_type_id = false)]
	public enum StreamEndpointState {
		CONNECTING,
		PROVISIONALLY_CONNECTED,
		FULLY_CONNECTED,
		EXHAUSTED_CANDIDATES,
		FAILED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_STREAM_FLOW_STATE_", has_type_id = false)]
	public enum StreamFlowState {
		STOPPED,
		PENDING_START,
		PENDING_STOP,
		STARTED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_STREAM_TRANSPORT_TYPE_", has_type_id = false)]
	public enum StreamTransportType {
		UNKNOWN,
		RAW_UDP,
		ICE,
		GTALK_P2P,
		WLM_2009,
		SHM,
		MULTICAST
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_SUBSCRIPTION_STATE_", has_type_id = false)]
	public enum SubscriptionState {
		UNKNOWN,
		NO,
		REMOVED_REMOTELY,
		ASK,
		YES
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_TLS_CERTIFICATE_REJECT_REASON_", has_type_id = false)]
	public enum TLSCertificateRejectReason {
		UNKNOWN,
		UNTRUSTED,
		EXPIRED,
		NOT_ACTIVATED,
		FINGERPRINT_MISMATCH,
		HOSTNAME_MISMATCH,
		SELF_SIGNED,
		REVOKED,
		INSECURE,
		LIMIT_EXCEEDED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_TLS_CERTIFICATE_STATE_", has_type_id = false)]
	public enum TLSCertificateState {
		PENDING,
		ACCEPTED,
		REJECTED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_TUBE_CHANNEL_STATE_", has_type_id = false)]
	public enum TubeChannelState {
		LOCAL_PENDING,
		REMOTE_PENDING,
		OPEN,
		NOT_OFFERED
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_TUBE_STATE_", has_type_id = false)]
	public enum TubeState {
		LOCAL_PENDING,
		REMOTE_PENDING,
		OPEN
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_TUBE_TYPE_", has_type_id = false)]
	public enum TubeType {
		DBUS,
		STREAM
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cprefix = "TP_ERROR_", has_type_id = false)]
	public errordomain Error {
		NETWORK_ERROR,
		NOT_IMPLEMENTED,
		INVALID_ARGUMENT,
		NOT_AVAILABLE,
		PERMISSION_DENIED,
		DISCONNECTED,
		INVALID_HANDLE,
		CHANNEL_BANNED,
		CHANNEL_FULL,
		CHANNEL_INVITE_ONLY,
		NOT_YOURS,
		CANCELLED,
		AUTHENTICATION_FAILED,
		ENCRYPTION_NOT_AVAILABLE,
		ENCRYPTION_ERROR,
		CERT_NOT_PROVIDED,
		CERT_UNTRUSTED,
		CERT_EXPIRED,
		CERT_NOT_ACTIVATED,
		CERT_FINGERPRINT_MISMATCH,
		CERT_HOSTNAME_MISMATCH,
		CERT_SELF_SIGNED,
		CERT_INVALID,
		NOT_CAPABLE,
		OFFLINE,
		CHANNEL_KICKED,
		BUSY,
		NO_ANSWER,
		DOES_NOT_EXIST,
		TERMINATED,
		CONNECTION_REFUSED,
		CONNECTION_FAILED,
		CONNECTION_LOST,
		ALREADY_CONNECTED,
		CONNECTION_REPLACED,
		REGISTRATION_EXISTS,
		SERVICE_BUSY,
		RESOURCE_UNAVAILABLE,
		WOULD_BREAK_ANONYMITY,
		CERT_REVOKED,
		CERT_INSECURE,
		CERT_LIMIT_EXCEEDED,
		NOT_YET,
		REJECTED,
		PICKED_UP_ELSEWHERE,
		CONFUSED,
		SERVICE_CONFUSED,
		EMERGENCY_CALLS_NOT_SUPPORTED,
		SOFTWARE_UPGRADE_REQUIRED,
		INSUFFICIENT_BALANCE,
		MEDIA_CODECS_INCOMPATIBLE,
		MEDIA_UNSUPPORTED_TYPE,
		MEDIA_STREAMING_ERROR,
		CAPTCHA_NOT_SUPPORTED;
		[Version (since = "0.7.31")]
		public unowned string get_dbus_name ();
		[Version (since = "0.11.13")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 2.9)]
	[Version (since = "0.15.3")]
	public delegate void AccountChannelRequestDelegatedChannelCb (TelepathyGLib.AccountChannelRequest request, TelepathyGLib.Channel channel);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	[Version (since = "0.11.5")]
	public delegate void BaseClientClassAddDispatchOperationImpl (TelepathyGLib.BaseClient client, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation dispatch_operation, TelepathyGLib.AddDispatchOperationContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	[Version (since = "0.11.6")]
	public delegate void BaseClientClassHandleChannelsImpl (TelepathyGLib.BaseClient client, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, GLib.List<TelepathyGLib.ChannelRequest> requests_satisfied, int64 user_action_time, TelepathyGLib.HandleChannelsContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	[Version (since = "0.11.5")]
	public delegate void BaseClientClassObserveChannelsImpl (TelepathyGLib.BaseClient client, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation? dispatch_operation, GLib.List<TelepathyGLib.ChannelRequest> requests, TelepathyGLib.ObserveChannelsContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 2.9)]
	[Version (since = "0.15.3")]
	public delegate void BaseClientDelegatedChannelsCb (TelepathyGLib.BaseClient client, GLib.GenericArray<TelepathyGLib.Channel> channels);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate string BaseConnectionGetUniqueConnectionNameImpl (TelepathyGLib.BaseConnection self);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate void BaseConnectionProc (TelepathyGLib.BaseConnection self);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool BaseConnectionStartConnectingImpl (TelepathyGLib.BaseConnection self) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 2.9)]
	[Version (deprecated = true, deprecated_since = "0.17.6")]
	public delegate void ChannelWhenReadyCb (TelepathyGLib.Channel channel, GLib.Error error);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 4.9)]
	[Version (since = "0.7.18")]
	public delegate void ConnectionContactsByHandleCb (TelepathyGLib.Connection connection, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, [CCode (array_length_cname = "n_failed", array_length_pos = 2.5, array_length_type = "guint")] TelepathyGLib.Handle[] failed, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 5.9)]
	[Version (since = "0.7.18")]
	public delegate void ConnectionContactsByIdCb (TelepathyGLib.Connection connection, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] string[] requested_ids, GLib.HashTable<string,GLib.Error> failed_id_errors, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 5.9)]
	[Version (deprecated = true)]
	public delegate void ConnectionHoldHandlesCb (TelepathyGLib.Connection connection, TelepathyGLib.HandleType handle_type, uint n_handles, TelepathyGLib.Handle handles, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 3.9)]
	[Version (since = "0.7.1")]
	public delegate void ConnectionManagerListCb ([CCode (array_length = false, array_null_terminated = true)] TelepathyGLib.ConnectionManager[] cms, size_t n_cms, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 2.9)]
	[Version (deprecated = true)]
	public delegate void ConnectionManagerWhenReadyCb (TelepathyGLib.ConnectionManager cm, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 5.9)]
	[Version (since = "0.7.1")]
	public delegate void ConnectionNameListCb ([CCode (array_length = false, array_null_terminated = true)] string[] names, size_t n, [CCode (array_length = false, array_null_terminated = true)] string[] cms, [CCode (array_length = false, array_null_terminated = true)] string[] protocols, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 5.9)]
	[Version (deprecated = true)]
	public delegate void ConnectionRequestHandlesCb (TelepathyGLib.Connection connection, TelepathyGLib.HandleType handle_type, [CCode (array_length_cname = "n_handles", array_length_pos = 2.5, array_length_type = "guint")] uint[] handles, [CCode (array_length_cname = "n_handles", array_length_pos = 2.5, array_length_type = "guint")] string[] ids, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 3.9)]
	[Version (since = "0.7.18")]
	public delegate void ConnectionUpgradeContactsCb (TelepathyGLib.Connection connection, [CCode (array_length_cname = "n_contacts", array_length_pos = 1.5, array_length_type = "guint")] TelepathyGLib.Contact[] contacts, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 2.9)]
	[Version (deprecated = true, deprecated_since = "0.17.6")]
	public delegate void ConnectionWhenReadyCb (TelepathyGLib.Connection connection, GLib.Error error);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 3.9)]
	[Version (since = "0.7.35")]
	public delegate void DBusDaemonListNamesCb (TelepathyGLib.DBusDaemon bus_daemon, string names, GLib.Error error, GLib.Object weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 3.9)]
	[Version (since = "0.7.1")]
	public delegate void DBusDaemonNameOwnerChangedCb (TelepathyGLib.DBusDaemon bus_daemon, string name, string new_owner);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate void DBusPropertiesMixinGetter (GLib.Object object, GLib.Quark iface, GLib.Quark name, GLib.Value value, void* getter_data);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool DBusPropertiesMixinSetter (GLib.Object object, GLib.Quark iface, GLib.Quark name, GLib.Value value, void* setter_data) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool GroupMixinAddMemberFunc (GLib.Object obj, TelepathyGLib.Handle handle, string message) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool GroupMixinRemMemberFunc (GLib.Object obj, TelepathyGLib.Handle handle, string message) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool GroupMixinRemMemberWithReasonFunc (GLib.Object obj, TelepathyGLib.Handle handle, string message, uint reason) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate void IntFunc (uint i, void* userdata);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	[Version (since = "0.14.5")]
	public delegate uint PresenceMixinGetMaximumStatusMessageLengthFunc (GLib.Object obj);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool PresenceMixinSetOwnStatusFunc (GLib.Object obj, TelepathyGLib.PresenceStatus status) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", has_target = false)]
	public delegate bool PresenceMixinStatusAvailableFunc (GLib.Object obj, uint which);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 3.9)]
	public delegate void ProxyPrepareAsync (TelepathyGLib.Proxy proxy, TelepathyGLib.ProxyFeature feature, [CCode (delegate_target_pos = 0, scope = "async")] GLib.AsyncReadyCallback? callback);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 6.9)]
	[Version (since = "0.11.5")]
	public delegate void SimpleApproverAddDispatchOperationImpl (TelepathyGLib.SimpleApprover approver, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation? dispatch_operation, TelepathyGLib.AddDispatchOperationContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 7.9)]
	[Version (since = "0.11.6")]
	public delegate void SimpleHandlerHandleChannelsImpl (TelepathyGLib.SimpleHandler handler, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, GLib.List<TelepathyGLib.ChannelRequest> requests_satisfied, int64 user_action_time, TelepathyGLib.HandleChannelsContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", instance_pos = 7.9)]
	[Version (since = "0.11.5")]
	public delegate void SimpleObserverObserveChannelsImpl (TelepathyGLib.SimpleObserver observer, TelepathyGLib.Account account, TelepathyGLib.Connection connection, GLib.List<TelepathyGLib.Channel> channels, TelepathyGLib.ChannelDispatchOperation? dispatch_operation, GLib.List<TelepathyGLib.ChannelRequest> requests, TelepathyGLib.ObserveChannelsContext context);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_ACCOUNT_MANAGER_BUS_NAME")]
	public const string ACCOUNT_MANAGER_BUS_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_ACCOUNT_MANAGER_OBJECT_PATH")]
	public const string ACCOUNT_MANAGER_OBJECT_PATH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_ACCOUNT_OBJECT_PATH_BASE")]
	public const string ACCOUNT_OBJECT_PATH_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CHANNEL_DISPATCHER_BUS_NAME")]
	public const string CHANNEL_DISPATCHER_BUS_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CHANNEL_DISPATCHER_OBJECT_PATH")]
	public const string CHANNEL_DISPATCHER_OBJECT_PATH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CLIENT_BUS_NAME_BASE")]
	public const string CLIENT_BUS_NAME_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CLIENT_OBJECT_PATH_BASE")]
	public const string CLIENT_OBJECT_PATH_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CM_BUS_NAME_BASE")]
	public const string CM_BUS_NAME_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CM_OBJECT_PATH_BASE")]
	public const string CM_OBJECT_PATH_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CONN_BUS_NAME_BASE")]
	public const string CONN_BUS_NAME_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_CONN_OBJECT_PATH_BASE")]
	public const string CONN_OBJECT_PATH_BASE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_DEBUG_OBJECT_PATH")]
	public const string DEBUG_OBJECT_PATH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_ERROR_PREFIX")]
	[Version (since = "0.7.1")]
	public const string ERROR_PREFIX;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_ACCOUNT")]
	public const string IFACE_ACCOUNT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_ACCOUNT_INTERFACE_ADDRESSING")]
	public const string IFACE_ACCOUNT_INTERFACE_ADDRESSING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_ACCOUNT_INTERFACE_AVATAR")]
	public const string IFACE_ACCOUNT_INTERFACE_AVATAR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_ACCOUNT_INTERFACE_STORAGE")]
	public const string IFACE_ACCOUNT_INTERFACE_STORAGE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_ACCOUNT_MANAGER")]
	public const string IFACE_ACCOUNT_MANAGER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_AUTHENTICATION_TLS_CERTIFICATE")]
	public const string IFACE_AUTHENTICATION_TLS_CERTIFICATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT")]
	public const string IFACE_CALL_CONTENT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_INTERFACE_AUDIO_CONTROL")]
	public const string IFACE_CALL_CONTENT_INTERFACE_AUDIO_CONTROL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_INTERFACE_DTMF")]
	public const string IFACE_CALL_CONTENT_INTERFACE_DTMF;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_INTERFACE_MEDIA")]
	public const string IFACE_CALL_CONTENT_INTERFACE_MEDIA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_INTERFACE_VIDEO_CONTROL")]
	public const string IFACE_CALL_CONTENT_INTERFACE_VIDEO_CONTROL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION")]
	public const string IFACE_CALL_CONTENT_MEDIA_DESCRIPTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS")]
	public const string IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK")]
	public const string IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS")]
	public const string IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_STREAM")]
	public const string IFACE_CALL_STREAM;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_STREAM_ENDPOINT")]
	public const string IFACE_CALL_STREAM_ENDPOINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CALL_STREAM_INTERFACE_MEDIA")]
	public const string IFACE_CALL_STREAM_INTERFACE_MEDIA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL")]
	public const string IFACE_CHANNEL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_DISPATCHER")]
	public const string IFACE_CHANNEL_DISPATCHER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_DISPATCHER_INTERFACE_MESSAGES1")]
	public const string IFACE_CHANNEL_DISPATCHER_INTERFACE_MESSAGES1;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST")]
	public const string IFACE_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_DISPATCH_OPERATION")]
	public const string IFACE_CHANNEL_DISPATCH_OPERATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_ANONYMITY")]
	public const string IFACE_CHANNEL_INTERFACE_ANONYMITY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_CALL_STATE")]
	public const string IFACE_CHANNEL_INTERFACE_CALL_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION")]
	public const string IFACE_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_CHAT_STATE")]
	public const string IFACE_CHANNEL_INTERFACE_CHAT_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_CONFERENCE")]
	public const string IFACE_CHANNEL_INTERFACE_CONFERENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_DESTROYABLE")]
	public const string IFACE_CHANNEL_INTERFACE_DESTROYABLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_DTMF")]
	public const string IFACE_CHANNEL_INTERFACE_DTMF;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA")]
	public const string IFACE_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_GROUP")]
	public const string IFACE_CHANNEL_INTERFACE_GROUP;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_HOLD")]
	public const string IFACE_CHANNEL_INTERFACE_HOLD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_MEDIA_SIGNALLING")]
	public const string IFACE_CHANNEL_INTERFACE_MEDIA_SIGNALLING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_MESSAGES")]
	public const string IFACE_CHANNEL_INTERFACE_MESSAGES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_PASSWORD")]
	public const string IFACE_CHANNEL_INTERFACE_PASSWORD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_ROOM")]
	public const string IFACE_CHANNEL_INTERFACE_ROOM;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_ROOM_CONFIG")]
	public const string IFACE_CHANNEL_INTERFACE_ROOM_CONFIG;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_SASL_AUTHENTICATION")]
	public const string IFACE_CHANNEL_INTERFACE_SASL_AUTHENTICATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_SECURABLE")]
	public const string IFACE_CHANNEL_INTERFACE_SECURABLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_SERVICE_POINT")]
	public const string IFACE_CHANNEL_INTERFACE_SERVICE_POINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_SMS")]
	public const string IFACE_CHANNEL_INTERFACE_SMS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_SUBJECT")]
	public const string IFACE_CHANNEL_INTERFACE_SUBJECT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_INTERFACE_TUBE")]
	public const string IFACE_CHANNEL_INTERFACE_TUBE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_REQUEST")]
	public const string IFACE_CHANNEL_REQUEST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_CALL")]
	public const string IFACE_CHANNEL_TYPE_CALL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_CONTACT_LIST")]
	public const string IFACE_CHANNEL_TYPE_CONTACT_LIST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH")]
	public const string IFACE_CHANNEL_TYPE_CONTACT_SEARCH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_DBUS_TUBE")]
	public const string IFACE_CHANNEL_TYPE_DBUS_TUBE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER")]
	public const string IFACE_CHANNEL_TYPE_FILE_TRANSFER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_ROOM_LIST")]
	public const string IFACE_CHANNEL_TYPE_ROOM_LIST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_SERVER_AUTHENTICATION")]
	public const string IFACE_CHANNEL_TYPE_SERVER_AUTHENTICATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_SERVER_TLS_CONNECTION")]
	public const string IFACE_CHANNEL_TYPE_SERVER_TLS_CONNECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_STREAMED_MEDIA")]
	public const string IFACE_CHANNEL_TYPE_STREAMED_MEDIA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_STREAM_TUBE")]
	public const string IFACE_CHANNEL_TYPE_STREAM_TUBE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_TEXT")]
	public const string IFACE_CHANNEL_TYPE_TEXT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CHANNEL_TYPE_TUBES")]
	public const string IFACE_CHANNEL_TYPE_TUBES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CLIENT")]
	public const string IFACE_CLIENT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CLIENT_APPROVER")]
	public const string IFACE_CLIENT_APPROVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CLIENT_HANDLER")]
	public const string IFACE_CLIENT_HANDLER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CLIENT_INTERFACE_REQUESTS")]
	public const string IFACE_CLIENT_INTERFACE_REQUESTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CLIENT_OBSERVER")]
	public const string IFACE_CLIENT_OBSERVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION")]
	public const string IFACE_CONNECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_ADDRESSING")]
	public const string IFACE_CONNECTION_INTERFACE_ADDRESSING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_ALIASING")]
	public const string IFACE_CONNECTION_INTERFACE_ALIASING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_ANONYMITY")]
	public const string IFACE_CONNECTION_INTERFACE_ANONYMITY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_AVATARS")]
	public const string IFACE_CONNECTION_INTERFACE_AVATARS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_BALANCE")]
	public const string IFACE_CONNECTION_INTERFACE_BALANCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CAPABILITIES")]
	public const string IFACE_CONNECTION_INTERFACE_CAPABILITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CELLULAR")]
	public const string IFACE_CONNECTION_INTERFACE_CELLULAR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CLIENT_TYPES")]
	public const string IFACE_CONNECTION_INTERFACE_CLIENT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACTS")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACT_CAPABILITIES")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACT_CAPABILITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACT_INFO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST")]
	public const string IFACE_CONNECTION_INTERFACE_CONTACT_LIST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_LOCATION")]
	public const string IFACE_CONNECTION_INTERFACE_LOCATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_MAIL_NOTIFICATION")]
	public const string IFACE_CONNECTION_INTERFACE_MAIL_NOTIFICATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_POWER_SAVING")]
	public const string IFACE_CONNECTION_INTERFACE_POWER_SAVING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_PRESENCE")]
	public const string IFACE_CONNECTION_INTERFACE_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_RENAMING")]
	public const string IFACE_CONNECTION_INTERFACE_RENAMING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_REQUESTS")]
	public const string IFACE_CONNECTION_INTERFACE_REQUESTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_SERVICE_POINT")]
	public const string IFACE_CONNECTION_INTERFACE_SERVICE_POINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_SIDECARS1")]
	public const string IFACE_CONNECTION_INTERFACE_SIDECARS1;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE")]
	public const string IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_CONNECTION_MANAGER")]
	public const string IFACE_CONNECTION_MANAGER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_DBUS_DAEMON")]
	public const string IFACE_DBUS_DAEMON;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_DBUS_INTROSPECTABLE")]
	public const string IFACE_DBUS_INTROSPECTABLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_DBUS_PEER")]
	public const string IFACE_DBUS_PEER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_DBUS_PROPERTIES")]
	public const string IFACE_DBUS_PROPERTIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_DEBUG")]
	public const string IFACE_DEBUG;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_MEDIA_SESSION_HANDLER")]
	public const string IFACE_MEDIA_SESSION_HANDLER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_MEDIA_STREAM_HANDLER")]
	public const string IFACE_MEDIA_STREAM_HANDLER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_PROPERTIES_INTERFACE")]
	public const string IFACE_PROPERTIES_INTERFACE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_PROTOCOL")]
	public const string IFACE_PROTOCOL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_PROTOCOL_INTERFACE_ADDRESSING")]
	public const string IFACE_PROTOCOL_INTERFACE_ADDRESSING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_PROTOCOL_INTERFACE_AVATARS")]
	public const string IFACE_PROTOCOL_INTERFACE_AVATARS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_IFACE_PROTOCOL_INTERFACE_PRESENCE")]
	public const string IFACE_PROTOCOL_INTERFACE_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_ACCESS_CONTROL_TYPES")]
	public const int NUM_ACCESS_CONTROL_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CALL_CONTENT_DISPOSITIONS")]
	public const int NUM_CALL_CONTENT_DISPOSITIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CALL_CONTENT_PACKETIZATION_TYPES")]
	public const int NUM_CALL_CONTENT_PACKETIZATION_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CALL_STATES")]
	public const int NUM_CALL_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CALL_STATE_CHANGE_REASONS")]
	public const int NUM_CALL_STATE_CHANGE_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CALL_STREAM_CANDIDATE_TYPES")]
	public const int NUM_CALL_STREAM_CANDIDATE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CAPTCHA_CANCEL_REASONS")]
	public const int NUM_CAPTCHA_CANCEL_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CAPTCHA_STATUSES")]
	public const int NUM_CAPTCHA_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CHANNEL_CHAT_STATES")]
	public const int NUM_CHANNEL_CHAT_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CHANNEL_CONTACT_SEARCH_STATES")]
	public const int NUM_CHANNEL_CONTACT_SEARCH_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CHANNEL_GROUP_CHANGE_REASONS")]
	public const int NUM_CHANNEL_GROUP_CHANGE_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CHANNEL_TEXT_MESSAGE_TYPES")]
	public const int NUM_CHANNEL_TEXT_MESSAGE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CHANNEL_TEXT_SEND_ERRORS")]
	public const int NUM_CHANNEL_TEXT_SEND_ERRORS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONNECTION_PRESENCE_TYPES")]
	public const int NUM_CONNECTION_PRESENCE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONNECTION_STATUSES")]
	public const int NUM_CONNECTION_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONNECTION_STATUS_REASONS")]
	public const int NUM_CONNECTION_STATUS_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONTACT_FEATURES")]
	[Version (since = "0.19.0")]
	public const int NUM_CONTACT_FEATURES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONTACT_LIST_STATES")]
	public const int NUM_CONTACT_LIST_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_CONTACT_METADATA_STORAGE_TYPES")]
	public const int NUM_CONTACT_METADATA_STORAGE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_DBUS_ERRORS")]
	[Version (since = "0.19.0")]
	public const int NUM_DBUS_ERRORS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_DEBUG_LEVELS")]
	public const int NUM_DEBUG_LEVELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_DELIVERY_STATUSES")]
	public const int NUM_DELIVERY_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_DTMF_EVENTS")]
	public const int NUM_DTMF_EVENTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_FILE_HASH_TYPES")]
	public const int NUM_FILE_HASH_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_FILE_TRANSFER_STATES")]
	public const int NUM_FILE_TRANSFER_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_FILE_TRANSFER_STATE_CHANGE_REASONS")]
	public const int NUM_FILE_TRANSFER_STATE_CHANGE_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_HANDLE_TYPES")]
	public const int NUM_HANDLE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_HTTP_METHODS")]
	public const int NUM_HTTP_METHODS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_LOCAL_HOLD_STATES")]
	public const int NUM_LOCAL_HOLD_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_LOCAL_HOLD_STATE_REASONS")]
	public const int NUM_LOCAL_HOLD_STATE_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_BASE_PROTOS")]
	public const int NUM_MEDIA_STREAM_BASE_PROTOS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_DIRECTIONS")]
	public const int NUM_MEDIA_STREAM_DIRECTIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_ERRORS")]
	public const int NUM_MEDIA_STREAM_ERRORS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_STATES")]
	public const int NUM_MEDIA_STREAM_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_TRANSPORT_TYPES")]
	public const int NUM_MEDIA_STREAM_TRANSPORT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_MEDIA_STREAM_TYPES")]
	public const int NUM_MEDIA_STREAM_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_RCPT_XR_RTT_MODES")]
	public const int NUM_RCPT_XR_RTT_MODES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_RICH_PRESENCE_ACCESS_CONTROL_TYPES")]
	public const int NUM_RICH_PRESENCE_ACCESS_CONTROL_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SASL_ABORT_REASONS")]
	public const int NUM_SASL_ABORT_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SASL_STATUSES")]
	public const int NUM_SASL_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SENDING_STATES")]
	public const int NUM_SENDING_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SERVICE_POINT_TYPES")]
	public const int NUM_SERVICE_POINT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SOCKET_ACCESS_CONTROLS")]
	public const int NUM_SOCKET_ACCESS_CONTROLS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SOCKET_ADDRESS_TYPES")]
	public const int NUM_SOCKET_ADDRESS_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_STREAM_COMPONENTS")]
	public const int NUM_STREAM_COMPONENTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_STREAM_ENDPOINT_STATES")]
	public const int NUM_STREAM_ENDPOINT_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_STREAM_FLOW_STATES")]
	public const int NUM_STREAM_FLOW_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_STREAM_TRANSPORT_TYPES")]
	public const int NUM_STREAM_TRANSPORT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_SUBSCRIPTION_STATES")]
	public const int NUM_SUBSCRIPTION_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_TLS_CERTIFICATE_REJECT_REASONS")]
	public const int NUM_TLS_CERTIFICATE_REJECT_REASONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_TLS_CERTIFICATE_STATES")]
	public const int NUM_TLS_CERTIFICATE_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_TUBE_CHANNEL_STATES")]
	public const int NUM_TUBE_CHANNEL_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_TUBE_STATES")]
	public const int NUM_TUBE_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_NUM_TUBE_TYPES")]
	public const int NUM_TUBE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_AUTOMATIC_PRESENCE")]
	public const string PROP_ACCOUNT_AUTOMATIC_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CHANGING_PRESENCE")]
	public const string PROP_ACCOUNT_CHANGING_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECTION")]
	public const string PROP_ACCOUNT_CONNECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECTION_ERROR")]
	public const string PROP_ACCOUNT_CONNECTION_ERROR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECTION_ERROR_DETAILS")]
	public const string PROP_ACCOUNT_CONNECTION_ERROR_DETAILS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECTION_STATUS")]
	public const string PROP_ACCOUNT_CONNECTION_STATUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECTION_STATUS_REASON")]
	public const string PROP_ACCOUNT_CONNECTION_STATUS_REASON;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CONNECT_AUTOMATICALLY")]
	public const string PROP_ACCOUNT_CONNECT_AUTOMATICALLY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_CURRENT_PRESENCE")]
	public const string PROP_ACCOUNT_CURRENT_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_DISPLAY_NAME")]
	public const string PROP_ACCOUNT_DISPLAY_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_ENABLED")]
	public const string PROP_ACCOUNT_ENABLED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_HAS_BEEN_ONLINE")]
	public const string PROP_ACCOUNT_HAS_BEEN_ONLINE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_ICON")]
	public const string PROP_ACCOUNT_ICON;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACES")]
	public const string PROP_ACCOUNT_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_ADDRESSING_URI_SCHEMES")]
	public const string PROP_ACCOUNT_INTERFACE_ADDRESSING_URI_SCHEMES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_AVATAR_AVATAR")]
	public const string PROP_ACCOUNT_INTERFACE_AVATAR_AVATAR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_IDENTIFIER")]
	public const string PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_IDENTIFIER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_PROVIDER")]
	public const string PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_PROVIDER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_RESTRICTIONS")]
	public const string PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_RESTRICTIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_SPECIFIC_INFORMATION")]
	public const string PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_SPECIFIC_INFORMATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_MANAGER_INTERFACES")]
	public const string PROP_ACCOUNT_MANAGER_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_MANAGER_INVALID_ACCOUNTS")]
	public const string PROP_ACCOUNT_MANAGER_INVALID_ACCOUNTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_MANAGER_SUPPORTED_ACCOUNT_PROPERTIES")]
	public const string PROP_ACCOUNT_MANAGER_SUPPORTED_ACCOUNT_PROPERTIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_MANAGER_VALID_ACCOUNTS")]
	public const string PROP_ACCOUNT_MANAGER_VALID_ACCOUNTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_NICKNAME")]
	public const string PROP_ACCOUNT_NICKNAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_NORMALIZED_NAME")]
	public const string PROP_ACCOUNT_NORMALIZED_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_PARAMETERS")]
	public const string PROP_ACCOUNT_PARAMETERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_REQUESTED_PRESENCE")]
	public const string PROP_ACCOUNT_REQUESTED_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_SERVICE")]
	public const string PROP_ACCOUNT_SERVICE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_SUPERSEDES")]
	public const string PROP_ACCOUNT_SUPERSEDES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_ACCOUNT_VALID")]
	public const string PROP_ACCOUNT_VALID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_CHAIN_DATA")]
	public const string PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_CHAIN_DATA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_TYPE")]
	public const string PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_REJECTIONS")]
	public const string PROP_AUTHENTICATION_TLS_CERTIFICATE_REJECTIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_STATE")]
	public const string PROP_AUTHENTICATION_TLS_CERTIFICATE_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_DISPOSITION")]
	public const string PROP_CALL_CONTENT_DISPOSITION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACES")]
	public const string PROP_CALL_CONTENT_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_INPUT_VOLUME")]
	public const string PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_INPUT_VOLUME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_OUTPUT_VOLUME")]
	public const string PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_OUTPUT_VOLUME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_DTMF_CURRENTLY_SENDING_TONES")]
	public const string PROP_CALL_CONTENT_INTERFACE_DTMF_CURRENTLY_SENDING_TONES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_DTMF_DEFERRED_TONES")]
	public const string PROP_CALL_CONTENT_INTERFACE_DTMF_DEFERRED_TONES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_EVENT")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_EVENT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_STATE")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_LOCAL_MEDIA_DESCRIPTIONS")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_LOCAL_MEDIA_DESCRIPTIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_MEDIA_DESCRIPTION_OFFER")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_MEDIA_DESCRIPTION_OFFER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_PACKETIZATION")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_PACKETIZATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_REMOTE_MEDIA_DESCRIPTIONS")]
	public const string PROP_CALL_CONTENT_INTERFACE_MEDIA_REMOTE_MEDIA_DESCRIPTIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_BITRATE")]
	public const string PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_BITRATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_FRAMERATE")]
	public const string PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_FRAMERATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MANUAL_KEY_FRAMES")]
	public const string PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MANUAL_KEY_FRAMES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MTU")]
	public const string PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MTU;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_VIDEO_RESOLUTION")]
	public const string PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_VIDEO_RESOLUTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_CODECS")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_CODECS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_FURTHER_NEGOTIATION_REQUIRED")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_FURTHER_NEGOTIATION_REQUIRED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_HAS_REMOTE_INFORMATION")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_HAS_REMOTE_INFORMATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACES")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DLRR_MAX_SIZE")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DLRR_MAX_SIZE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DUPLICATE_RLE_MAX_SIZE")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DUPLICATE_RLE_MAX_SIZE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_ENABLE_METRICS")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_ENABLE_METRICS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_LOSS_RLE_MAX_SIZE")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_LOSS_RLE_MAX_SIZE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_PACKET_RECEIPT_TIMES_MAX_SIZE")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_PACKET_RECEIPT_TIMES_MAX_SIZE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_RTT_MODE")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_RTT_MODE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_STATISTICS_FLAGS")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_STATISTICS_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_DOES_AVPF")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_DOES_AVPF;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_FEEDBACK_MESSAGES")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_FEEDBACK_MESSAGES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS_HEADER_EXTENSIONS")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS_HEADER_EXTENSIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_REMOTE_CONTACT")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_REMOTE_CONTACT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_SSRCS")]
	public const string PROP_CALL_CONTENT_MEDIA_DESCRIPTION_SSRCS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_NAME")]
	public const string PROP_CALL_CONTENT_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_STREAMS")]
	public const string PROP_CALL_CONTENT_STREAMS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_CONTENT_TYPE")]
	public const string PROP_CALL_CONTENT_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_CAN_REQUEST_RECEIVING")]
	public const string PROP_CALL_STREAM_CAN_REQUEST_RECEIVING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_CONTROLLING")]
	public const string PROP_CALL_STREAM_ENDPOINT_CONTROLLING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_ENDPOINT_STATE")]
	public const string PROP_CALL_STREAM_ENDPOINT_ENDPOINT_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_IS_ICE_LITE")]
	public const string PROP_CALL_STREAM_ENDPOINT_IS_ICE_LITE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_REMOTE_CANDIDATES")]
	public const string PROP_CALL_STREAM_ENDPOINT_REMOTE_CANDIDATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_REMOTE_CREDENTIALS")]
	public const string PROP_CALL_STREAM_ENDPOINT_REMOTE_CREDENTIALS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_SELECTED_CANDIDATE_PAIRS")]
	public const string PROP_CALL_STREAM_ENDPOINT_SELECTED_CANDIDATE_PAIRS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_ENDPOINT_TRANSPORT")]
	public const string PROP_CALL_STREAM_ENDPOINT_TRANSPORT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACES")]
	public const string PROP_CALL_STREAM_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_ENDPOINTS")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_ENDPOINTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_HAS_SERVER_INFO")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_HAS_SERVER_INFO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_ICE_RESTART_PENDING")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_ICE_RESTART_PENDING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CANDIDATES")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CANDIDATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CREDENTIALS")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CREDENTIALS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_RECEIVING_STATE")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_RECEIVING_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_RELAY_INFO")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_RELAY_INFO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_SENDING_STATE")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_SENDING_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_STUN_SERVERS")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_STUN_SERVERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_INTERFACE_MEDIA_TRANSPORT")]
	public const string PROP_CALL_STREAM_INTERFACE_MEDIA_TRANSPORT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_LOCAL_SENDING_STATE")]
	public const string PROP_CALL_STREAM_LOCAL_SENDING_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_REMOTE_MEMBERS")]
	public const string PROP_CALL_STREAM_REMOTE_MEMBERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CALL_STREAM_REMOTE_MEMBER_IDENTIFIERS")]
	public const string PROP_CALL_STREAM_REMOTE_MEMBER_IDENTIFIERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_CHANNEL_TYPE")]
	public const string PROP_CHANNEL_CHANNEL_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCHER_INTERFACES")]
	public const string PROP_CHANNEL_DISPATCHER_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST_DISPATCH_OPERATIONS")]
	public const string PROP_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST_DISPATCH_OPERATIONS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCHER_SUPPORTS_REQUEST_HINTS")]
	public const string PROP_CHANNEL_DISPATCHER_SUPPORTS_REQUEST_HINTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCH_OPERATION_ACCOUNT")]
	public const string PROP_CHANNEL_DISPATCH_OPERATION_ACCOUNT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCH_OPERATION_CHANNELS")]
	public const string PROP_CHANNEL_DISPATCH_OPERATION_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCH_OPERATION_CONNECTION")]
	public const string PROP_CHANNEL_DISPATCH_OPERATION_CONNECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCH_OPERATION_INTERFACES")]
	public const string PROP_CHANNEL_DISPATCH_OPERATION_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_DISPATCH_OPERATION_POSSIBLE_HANDLERS")]
	public const string PROP_CHANNEL_DISPATCH_OPERATION_POSSIBLE_HANDLERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INITIATOR_HANDLE")]
	public const string PROP_CHANNEL_INITIATOR_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INITIATOR_ID")]
	public const string PROP_CHANNEL_INITIATOR_ID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACES")]
	public const string PROP_CHANNEL_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY")]
	public const string PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MODES")]
	public const string PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MODES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMOUS_ID")]
	public const string PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMOUS_ID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAN_RETRY_CAPTCHA")]
	public const string PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAN_RETRY_CAPTCHA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR")]
	public const string PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR_DETAILS")]
	public const string PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR_DETAILS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_STATUS")]
	public const string PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_STATUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CHAT_STATE_CHAT_STATES")]
	public const string PROP_CHANNEL_INTERFACE_CHAT_STATE_CHAT_STATES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_CHANNELS")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_CHANNELS")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_HANDLES")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_HANDLES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_IDS")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_IDS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INVITATION_MESSAGE")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_INVITATION_MESSAGE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_CONFERENCE_ORIGINAL_CHANNELS")]
	public const string PROP_CHANNEL_INTERFACE_CONFERENCE_ORIGINAL_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_DTMF_CURRENTLY_SENDING_TONES")]
	public const string PROP_CHANNEL_INTERFACE_DTMF_CURRENTLY_SENDING_TONES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_DTMF_DEFERRED_TONES")]
	public const string PROP_CHANNEL_INTERFACE_DTMF_DEFERRED_TONES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_DTMF_INITIAL_TONES")]
	public const string PROP_CHANNEL_INTERFACE_DTMF_INITIAL_TONES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA")]
	public const string PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME")]
	public const string PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_GROUP_FLAGS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_GROUP_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_HANDLE_OWNERS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_HANDLE_OWNERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_LOCAL_PENDING_MEMBERS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_LOCAL_PENDING_MEMBERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_MEMBERS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_MEMBERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_MEMBER_IDENTIFIERS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_MEMBER_IDENTIFIERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_REMOTE_PENDING_MEMBERS")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_REMOTE_PENDING_MEMBERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_GROUP_SELF_HANDLE")]
	public const string PROP_CHANNEL_INTERFACE_GROUP_SELF_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_MESSAGES_DELIVERY_REPORTING_SUPPORT")]
	public const string PROP_CHANNEL_INTERFACE_MESSAGES_DELIVERY_REPORTING_SUPPORT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_PART_SUPPORT_FLAGS")]
	public const string PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_PART_SUPPORT_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_TYPES")]
	public const string PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_MESSAGES_PENDING_MESSAGES")]
	public const string PROP_CHANNEL_INTERFACE_MESSAGES_PENDING_MESSAGES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_MESSAGES_SUPPORTED_CONTENT_TYPES")]
	public const string PROP_CHANNEL_INTERFACE_MESSAGES_SUPPORTED_CONTENT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_ANONYMOUS")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_ANONYMOUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CAN_UPDATE_CONFIGURATION")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CAN_UPDATE_CONFIGURATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CONFIGURATION_RETRIEVED")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CONFIGURATION_RETRIEVED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_DESCRIPTION")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_DESCRIPTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_INVITEONLY")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_INVITEONLY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_LIMIT")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_LIMIT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MODERATED")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MODERATED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MUTABLE_PROPERTIES")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MUTABLE_PROPERTIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_HINT")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_HINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_PROTECTED")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_PROTECTED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PERSISTENT")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PERSISTENT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PRIVATE")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PRIVATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_TITLE")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CONFIG_TITLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CREATION_TIMESTAMP")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CREATION_TIMESTAMP;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CREATOR")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CREATOR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_CREATOR_HANDLE")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_CREATOR_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_ROOM_NAME")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_ROOM_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_ROOM_SERVER")]
	public const string PROP_CHANNEL_INTERFACE_ROOM_SERVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AUTHORIZATION_IDENTITY")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AUTHORIZATION_IDENTITY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AVAILABLE_MECHANISMS")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AVAILABLE_MECHANISMS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_CAN_TRY_AGAIN")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_CAN_TRY_AGAIN;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_REALM")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_REALM;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_USERNAME")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_USERNAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_HAS_INITIAL_DATA")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_HAS_INITIAL_DATA;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_MAY_SAVE_RESPONSE")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_MAY_SAVE_RESPONSE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR_DETAILS")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR_DETAILS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_STATUS")]
	public const string PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_STATUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SECURABLE_ENCRYPTED")]
	public const string PROP_CHANNEL_INTERFACE_SECURABLE_ENCRYPTED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SECURABLE_VERIFIED")]
	public const string PROP_CHANNEL_INTERFACE_SECURABLE_VERIFIED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SERVICE_POINT_CURRENT_SERVICE_POINT")]
	public const string PROP_CHANNEL_INTERFACE_SERVICE_POINT_CURRENT_SERVICE_POINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SERVICE_POINT_INITIAL_SERVICE_POINT")]
	public const string PROP_CHANNEL_INTERFACE_SERVICE_POINT_INITIAL_SERVICE_POINT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SMS_FLASH")]
	public const string PROP_CHANNEL_INTERFACE_SMS_FLASH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL")]
	public const string PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR")]
	public const string PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR_HANDLE")]
	public const string PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SUBJECT_CAN_SET")]
	public const string PROP_CHANNEL_INTERFACE_SUBJECT_CAN_SET;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SUBJECT_SUBJECT")]
	public const string PROP_CHANNEL_INTERFACE_SUBJECT_SUBJECT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_SUBJECT_TIMESTAMP")]
	public const string PROP_CHANNEL_INTERFACE_SUBJECT_TIMESTAMP;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_TUBE_PARAMETERS")]
	public const string PROP_CHANNEL_INTERFACE_TUBE_PARAMETERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_INTERFACE_TUBE_STATE")]
	public const string PROP_CHANNEL_INTERFACE_TUBE_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUESTED")]
	public const string PROP_CHANNEL_REQUESTED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_ACCOUNT")]
	public const string PROP_CHANNEL_REQUEST_ACCOUNT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_HINTS")]
	public const string PROP_CHANNEL_REQUEST_HINTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_INTERFACES")]
	public const string PROP_CHANNEL_REQUEST_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_PREFERRED_HANDLER")]
	public const string PROP_CHANNEL_REQUEST_PREFERRED_HANDLER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_REQUESTS")]
	public const string PROP_CHANNEL_REQUEST_REQUESTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_REQUEST_USER_ACTION_TIME")]
	public const string PROP_CHANNEL_REQUEST_USER_ACTION_TIME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TARGET_HANDLE")]
	public const string PROP_CHANNEL_TARGET_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TARGET_HANDLE_TYPE")]
	public const string PROP_CHANNEL_TARGET_HANDLE_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TARGET_ID")]
	public const string PROP_CHANNEL_TARGET_ID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CALL_FLAGS")]
	public const string PROP_CHANNEL_TYPE_CALL_CALL_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CALL_MEMBERS")]
	public const string PROP_CHANNEL_TYPE_CALL_CALL_MEMBERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE")]
	public const string PROP_CHANNEL_TYPE_CALL_CALL_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE_DETAILS")]
	public const string PROP_CHANNEL_TYPE_CALL_CALL_STATE_DETAILS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE_REASON")]
	public const string PROP_CHANNEL_TYPE_CALL_CALL_STATE_REASON;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_CONTENTS")]
	public const string PROP_CHANNEL_TYPE_CALL_CONTENTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_HARDWARE_STREAMING")]
	public const string PROP_CHANNEL_TYPE_CALL_HARDWARE_STREAMING;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO")]
	public const string PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO_NAME")]
	public const string PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_INITIAL_TRANSPORT")]
	public const string PROP_CHANNEL_TYPE_CALL_INITIAL_TRANSPORT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO")]
	public const string PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO_NAME")]
	public const string PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_MEMBER_IDENTIFIERS")]
	public const string PROP_CHANNEL_TYPE_CALL_MEMBER_IDENTIFIERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CALL_MUTABLE_CONTENTS")]
	public const string PROP_CHANNEL_TYPE_CALL_MUTABLE_CONTENTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_AVAILABLE_SEARCH_KEYS")]
	public const string PROP_CHANNEL_TYPE_CONTACT_SEARCH_AVAILABLE_SEARCH_KEYS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_LIMIT")]
	public const string PROP_CHANNEL_TYPE_CONTACT_SEARCH_LIMIT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_SEARCH_STATE")]
	public const string PROP_CHANNEL_TYPE_CONTACT_SEARCH_SEARCH_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_SERVER")]
	public const string PROP_CHANNEL_TYPE_CONTACT_SEARCH_SERVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_DBUS_TUBE_DBUS_NAMES")]
	public const string PROP_CHANNEL_TYPE_DBUS_TUBE_DBUS_NAMES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME")]
	public const string PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SUPPORTED_ACCESS_CONTROLS")]
	public const string PROP_CHANNEL_TYPE_DBUS_TUBE_SUPPORTED_ACCESS_CONTROLS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_AVAILABLE_SOCKET_TYPES")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_AVAILABLE_SOCKET_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH_TYPE")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILE_COLLECTION")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_FILE_COLLECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_STATE")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_TRANSFERRED_BYTES")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_TRANSFERRED_BYTES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_URI")]
	public const string PROP_CHANNEL_TYPE_FILE_TRANSFER_URI;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_ROOM_LIST_SERVER")]
	public const string PROP_CHANNEL_TYPE_ROOM_LIST_SERVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_SERVER_AUTHENTICATION_AUTHENTICATION_METHOD")]
	public const string PROP_CHANNEL_TYPE_SERVER_AUTHENTICATION_AUTHENTICATION_METHOD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_HOSTNAME")]
	public const string PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_HOSTNAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_REFERENCE_IDENTITIES")]
	public const string PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_REFERENCE_IDENTITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_SERVER_CERTIFICATE")]
	public const string PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_SERVER_CERTIFICATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_IMMUTABLE_STREAMS")]
	public const string PROP_CHANNEL_TYPE_STREAMED_MEDIA_IMMUTABLE_STREAMS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_AUDIO")]
	public const string PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_AUDIO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_VIDEO")]
	public const string PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_VIDEO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE")]
	public const string PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CHANNEL_TYPE_STREAM_TUBE_SUPPORTED_SOCKET_TYPES")]
	public const string PROP_CHANNEL_TYPE_STREAM_TUBE_SUPPORTED_SOCKET_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_APPROVER_APPROVER_CHANNEL_FILTER")]
	public const string PROP_CLIENT_APPROVER_APPROVER_CHANNEL_FILTER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_HANDLER_BYPASS_APPROVAL")]
	public const string PROP_CLIENT_HANDLER_BYPASS_APPROVAL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_HANDLER_CAPABILITIES")]
	public const string PROP_CLIENT_HANDLER_CAPABILITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_HANDLER_HANDLED_CHANNELS")]
	public const string PROP_CLIENT_HANDLER_HANDLED_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_HANDLER_HANDLER_CHANNEL_FILTER")]
	public const string PROP_CLIENT_HANDLER_HANDLER_CHANNEL_FILTER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_INTERFACES")]
	public const string PROP_CLIENT_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_OBSERVER_DELAY_APPROVERS")]
	public const string PROP_CLIENT_OBSERVER_DELAY_APPROVERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_OBSERVER_OBSERVER_CHANNEL_FILTER")]
	public const string PROP_CLIENT_OBSERVER_OBSERVER_CHANNEL_FILTER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CLIENT_OBSERVER_RECOVER")]
	public const string PROP_CLIENT_OBSERVER_RECOVER;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_HAS_IMMORTAL_HANDLES")]
	public const string PROP_CONNECTION_HAS_IMMORTAL_HANDLES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACES")]
	public const string PROP_CONNECTION_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY")]
	public const string PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MODES")]
	public const string PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MODES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_ANONYMITY_SUPPORTED_ANONYMITY_MODES")]
	public const string PROP_CONNECTION_INTERFACE_ANONYMITY_SUPPORTED_ANONYMITY_MODES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES")]
	public const string PROP_CONNECTION_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_BALANCE_ACCOUNT_BALANCE")]
	public const string PROP_CONNECTION_INTERFACE_BALANCE_ACCOUNT_BALANCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_BALANCE_MANAGE_CREDIT_URI")]
	public const string PROP_CONNECTION_INTERFACE_BALANCE_MANAGE_CREDIT_URI;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_IMSI")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_IMSI;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_NATIONAL_CHARACTER_SET")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_NATIONAL_CHARACTER_SET;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_REDUCED_CHARACTER_SET")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_REDUCED_CHARACTER_SET;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_SERVICE_CENTRE")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_SERVICE_CENTRE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_VALIDITY_PERIOD")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_VALIDITY_PERIOD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CELLULAR_OVERRIDE_MESSAGE_SERVICE_CENTRE")]
	public const string PROP_CONNECTION_INTERFACE_CELLULAR_OVERRIDE_MESSAGE_SERVICE_CENTRE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACTS_CONTACT_ATTRIBUTE_INTERFACES")]
	public const string PROP_CONNECTION_INTERFACE_CONTACTS_CONTACT_ATTRIBUTE_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_BLOCKING_CONTACT_BLOCKING_CAPABILITIES")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_BLOCKING_CONTACT_BLOCKING_CAPABILITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_DISJOINT_GROUPS")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_DISJOINT_GROUPS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUP_STORAGE")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUP_STORAGE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_INFO_CONTACT_INFO_FLAGS")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_INFO_CONTACT_INFO_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_INFO_SUPPORTED_FIELDS")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_INFO_SUPPORTED_FIELDS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CAN_CHANGE_CONTACT_LIST")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_LIST_CAN_CHANGE_CONTACT_LIST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_PERSISTS")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_PERSISTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_STATE")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_STATE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_DOWNLOAD_AT_CONNECTION")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_LIST_DOWNLOAD_AT_CONNECTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_REQUEST_USES_MESSAGE")]
	public const string PROP_CONNECTION_INTERFACE_CONTACT_LIST_REQUEST_USES_MESSAGE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL")]
	public const string PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL_TYPES")]
	public const string PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_LOCATION_SUPPORTED_LOCATION_FEATURES")]
	public const string PROP_CONNECTION_INTERFACE_LOCATION_SUPPORTED_LOCATION_FEATURES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_ADDRESS")]
	public const string PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_ADDRESS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_NOTIFICATION_FLAGS")]
	public const string PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_NOTIFICATION_FLAGS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAILS")]
	public const string PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAILS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAIL_COUNT")]
	public const string PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAIL_COUNT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_POWER_SAVING_POWER_SAVING_ACTIVE")]
	public const string PROP_CONNECTION_INTERFACE_POWER_SAVING_POWER_SAVING_ACTIVE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_REQUESTS_CHANNELS")]
	public const string PROP_CONNECTION_INTERFACE_REQUESTS_CHANNELS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_REQUESTS_REQUESTABLE_CHANNEL_CLASSES")]
	public const string PROP_CONNECTION_INTERFACE_REQUESTS_REQUESTABLE_CHANNEL_CLASSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_SERVICE_POINT_KNOWN_SERVICE_POINTS")]
	public const string PROP_CONNECTION_INTERFACE_SERVICE_POINT_KNOWN_SERVICE_POINTS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_MAXIMUM_STATUS_MESSAGE_LENGTH")]
	public const string PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_MAXIMUM_STATUS_MESSAGE_LENGTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_STATUSES")]
	public const string PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_MANAGER_INTERFACES")]
	public const string PROP_CONNECTION_MANAGER_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_MANAGER_PROTOCOLS")]
	public const string PROP_CONNECTION_MANAGER_PROTOCOLS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_SELF_HANDLE")]
	public const string PROP_CONNECTION_SELF_HANDLE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_SELF_ID")]
	public const string PROP_CONNECTION_SELF_ID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_CONNECTION_STATUS")]
	public const string PROP_CONNECTION_STATUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_DEBUG_ENABLED")]
	public const string PROP_DEBUG_ENABLED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_MEDIA_STREAM_HANDLER_CREATED_LOCALLY")]
	public const string PROP_MEDIA_STREAM_HANDLER_CREATED_LOCALLY;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_MEDIA_STREAM_HANDLER_NAT_TRAVERSAL")]
	public const string PROP_MEDIA_STREAM_HANDLER_NAT_TRAVERSAL;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_MEDIA_STREAM_HANDLER_RELAY_INFO")]
	public const string PROP_MEDIA_STREAM_HANDLER_RELAY_INFO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_MEDIA_STREAM_HANDLER_STUN_SERVERS")]
	public const string PROP_MEDIA_STREAM_HANDLER_STUN_SERVERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_AUTHENTICATION_TYPES")]
	public const string PROP_PROTOCOL_AUTHENTICATION_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_CONNECTION_INTERFACES")]
	public const string PROP_PROTOCOL_CONNECTION_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_ENGLISH_NAME")]
	public const string PROP_PROTOCOL_ENGLISH_NAME;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_ICON")]
	public const string PROP_PROTOCOL_ICON;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACES")]
	public const string PROP_PROTOCOL_INTERFACES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_URI_SCHEMES")]
	public const string PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_URI_SCHEMES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_VCARD_FIELDS")]
	public const string PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_VCARD_FIELDS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES")]
	public const string PROP_PROTOCOL_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_INTERFACE_PRESENCE_STATUSES")]
	public const string PROP_PROTOCOL_INTERFACE_PRESENCE_STATUSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_PARAMETERS")]
	public const string PROP_PROTOCOL_PARAMETERS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_REQUESTABLE_CHANNEL_CLASSES")]
	public const string PROP_PROTOCOL_REQUESTABLE_CHANNEL_CLASSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_PROP_PROTOCOL_VCARD_FIELD")]
	public const string PROP_PROTOCOL_VCARD_FIELD;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_GTALK_P2P")]
	public const string TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_GTALK_P2P;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_ICE_UDP")]
	public const string TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_ICE_UDP;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_2009")]
	public const string TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_2009;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_8_5")]
	public const string TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_8_5;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_AUDIO")]
	public const string TOKEN_CHANNEL_TYPE_CALL_AUDIO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_GTALK_P2P")]
	public const string TOKEN_CHANNEL_TYPE_CALL_GTALK_P2P;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_ICE")]
	public const string TOKEN_CHANNEL_TYPE_CALL_ICE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_SHM")]
	public const string TOKEN_CHANNEL_TYPE_CALL_SHM;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_VIDEO")]
	public const string TOKEN_CHANNEL_TYPE_CALL_VIDEO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CHANNEL_TYPE_CALL_WLM_2009")]
	public const string TOKEN_CHANNEL_TYPE_CALL_WLM_2009;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_CONTACT_ID")]
	public const string TOKEN_CONNECTION_CONTACT_ID;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_ADDRESSING_ADDRESSES")]
	public const string TOKEN_CONNECTION_INTERFACE_ADDRESSING_ADDRESSES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_ADDRESSING_URIS")]
	public const string TOKEN_CONNECTION_INTERFACE_ADDRESSING_URIS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_ALIASING_ALIAS")]
	public const string TOKEN_CONNECTION_INTERFACE_ALIASING_ALIAS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_AVATARS_TOKEN")]
	public const string TOKEN_CONNECTION_INTERFACE_AVATARS_TOKEN;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CAPABILITIES_CAPS")]
	public const string TOKEN_CONNECTION_INTERFACE_CAPABILITIES_CAPS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CLIENT_TYPES_CLIENT_TYPES")]
	public const string TOKEN_CONNECTION_INTERFACE_CLIENT_TYPES_CLIENT_TYPES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_BLOCKING_BLOCKED")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_BLOCKING_BLOCKED;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_CAPABILITIES_CAPABILITIES")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_CAPABILITIES_CAPABILITIES;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_INFO_INFO")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_INFO_INFO;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH_REQUEST")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH_REQUEST;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_SUBSCRIBE")]
	public const string TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_SUBSCRIBE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_LOCATION_LOCATION")]
	public const string TOKEN_CONNECTION_INTERFACE_LOCATION_LOCATION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_TOKEN_CONNECTION_INTERFACE_SIMPLE_PRESENCE_PRESENCE")]
	public const string TOKEN_CONNECTION_INTERFACE_SIMPLE_PRESENCE_PRESENCE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_UNKNOWN_CONNECTION_STATUS")]
	[Version (since = "0.7.1")]
	public const TelepathyGLib.ConnectionStatus UNKNOWN_CONNECTION_STATUS;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_UNKNOWN_HANDLE_TYPE")]
	[Version (since = "0.7.0")]
	public const TelepathyGLib.HandleType UNKNOWN_HANDLE_TYPE;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h", cname = "TP_USER_ACTION_TIME_NOT_USER_ACTION")]
	[Version (since = "0.11.13")]
	public const int64 USER_ACTION_TIME_NOT_USER_ACTION;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static bool asv_get_boolean (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static void* asv_get_boxed (GLib.HashTable<string,GLib.Value?> asv, string key, GLib.Type type);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static unowned GLib.Array<uint8>? asv_get_bytes (GLib.HashTable<string,GLib.Value?> asv, string key);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static double asv_get_double (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static int32 asv_get_int32 (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static int64 asv_get_int64 (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static unowned string? asv_get_object_path (GLib.HashTable<string,GLib.Value?> asv, string key);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static unowned string? asv_get_string (GLib.HashTable<string,GLib.Value?> asv, string key);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static unowned string[]? asv_get_strv (GLib.HashTable<string,GLib.Value?> asv, string key);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static uint32 asv_get_uint32 (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.9")]
	public static uint64 asv_get_uint64 (GLib.HashTable<string,GLib.Value?> asv, string key, out bool valid);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static bool dbus_check_valid_bus_name (string name, TelepathyGLib.DBusNameType allow_types) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static bool dbus_check_valid_interface_name (string name) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static bool dbus_check_valid_member_name (string name) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static bool dbus_check_valid_object_path (string path) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark dbus_errors_quark ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (replacement = "DBusPropertiesMixinClass.init", since = "0.7.3")]
	public static void dbus_properties_mixin_class_init (GLib.ObjectClass cls, size_t offset);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.21.2")]
	public static GLib.HashTable<weak string,weak GLib.Value?> dbus_properties_mixin_dup_all (GLib.Object self, string interface_name);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.15.6")]
	public static void dbus_properties_mixin_emit_properties_changed (GLib.Object object, string interface_name, string? properties);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.13")]
	public static bool dbus_properties_mixin_get (GLib.Object self, string interface_name, string property_name, GLib.Value value) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static void dbus_properties_mixin_getter_gobject_properties (GLib.Object object, GLib.Quark iface, GLib.Quark name, GLib.Value value, void* getter_data);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static void dbus_properties_mixin_iface_init (void* g_iface, void* iface_data);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.15.8")]
	public static bool dbus_properties_mixin_set (GLib.Object self, string interface_name, string property_name, GLib.Value value) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static bool dbus_properties_mixin_setter_gobject_properties (GLib.Object object, GLib.Quark iface, GLib.Quark name, GLib.Value value, void* setter_data) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static void debug_divert_messages (string filename);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.6.1")]
	public static void debug_set_flags (string flags_string);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static void debug_set_persistent (bool persistent);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static void debug_timestamped_log_handler (string log_domain, GLib.LogLevelFlags log_level, string message, void* ignored);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark errors_disconnected_quark ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark errors_removed_from_group_quark ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static string escape_as_identifier (string name);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_account ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_account_interface_addressing ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_account_interface_avatar ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_account_interface_storage ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_account_manager ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_authentication_tls_certificate ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_interface_audio_control ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_interface_dtmf ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_interface_media ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_interface_video_control ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_media_description ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_media_description_interface_rtcp_extended_reports ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_media_description_interface_rtcp_feedback ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_content_media_description_interface_rtp_header_extensions ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_stream ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_stream_endpoint ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_call_stream_interface_media ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_dispatch_operation ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_dispatcher ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_dispatcher_interface_messages1 ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_dispatcher_interface_operation_list ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_anonymity ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_call_state ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_captcha_authentication ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_chat_state ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_conference ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_destroyable ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_dtmf ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_file_transfer_metadata ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_group ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_hold ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_media_signalling ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_messages ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_password ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_room ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_room_config ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_sasl_authentication ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_securable ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_service_point ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_sms ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_subject ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_interface_tube ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_request ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_call ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_contact_list ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_contact_search ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_dbus_tube ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_file_transfer ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_room_list ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_server_authentication ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_server_tls_connection ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_stream_tube ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_streamed_media ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_text ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_channel_type_tubes ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_client ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_client_approver ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_client_handler ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_client_interface_requests ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_client_observer ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_addressing ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_aliasing ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_anonymity ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_avatars ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_balance ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_capabilities ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_cellular ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_client_types ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contact_blocking ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contact_capabilities ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contact_groups ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contact_info ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contact_list ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_contacts ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_location ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_mail_notification ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_power_saving ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_presence ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_renaming ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_requests ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_service_point ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_sidecars1 ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_interface_simple_presence ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_connection_manager ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_dbus_daemon ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_dbus_introspectable ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_dbus_peer ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_dbus_properties ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_debug ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_media_session_handler ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_media_stream_handler ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_properties_interface ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_protocol ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_protocol_interface_addressing ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_protocol_interface_avatars ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	public static GLib.Quark iface_quark_protocol_interface_presence ();
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (replacement = "Intset.from_array")]
	public static TelepathyGLib.Intset intset_from_array (GLib.Array<uint> array);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (deprecated = true, since = "0.7.1")]
	public static void list_connection_managers (TelepathyGLib.DBusDaemon bus_daemon, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned TelepathyGLib.ConnectionManagerListCb callback, GLib.Object? weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.17.6")]
	public static async GLib.List<TelepathyGLib.ConnectionManager> list_connection_managers_async (TelepathyGLib.DBusDaemon? dbus_daemon) throws GLib.Error;
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.1")]
	public static void list_connection_names (TelepathyGLib.DBusDaemon bus_daemon, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned TelepathyGLib.ConnectionNameListCb callback, GLib.Object? weak_object);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.11.9")]
	public static async void simple_async_report_success_in_idle (GLib.Object? source, void* source_tag);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.7.3")]
	public static void svc_interface_set_dbus_properties_info (GLib.Type g_interface, TelepathyGLib.DBusPropertiesMixinIfaceInfo info);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.11.13")]
	public static int64 user_action_time_from_x11 (uint32 x11_time);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.11.13")]
	public static bool user_action_time_should_present (int64 user_action_time, out uint32 x11_time);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.13.15")]
	public static string utf8_make_valid (string name);
	[CCode (cheader_filename = "telepathy-glib/telepathy-glib.h")]
	[Version (since = "0.23.0")]
	public static void value_array_free (GLib.ValueArray va);
}

/* libebook-contacts-1.2.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "E", gir_namespace = "EBookContacts", gir_version = "1.2", lower_case_cprefix = "e_")]
namespace E {
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_address_western_get_type ()")]
	[Compact]
	public class AddressWestern {
		public weak string country;
		public weak string extended;
		public weak string locality;
		public weak string po_box;
		public weak string postal_code;
		public weak string region;
		public weak string street;
		[Version (since = "3.24")]
		public E.AddressWestern copy ();
		public void free ();
		public static E.AddressWestern? parse (string? in_address);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", ref_function = "e_book_query_ref", type_id = "e_book_query_get_type ()", unref_function = "e_book_query_unref")]
	[Compact]
	public class BookQuery {
		public static E.BookQuery and (int nqs, E.BookQuery qs, bool unref);
		public static E.BookQuery any_field_contains (string value);
		public E.BookQuery copy ();
		public static E.BookQuery field_exists (E.ContactField field);
		public static E.BookQuery field_test (E.ContactField field, E.BookQueryTest test, string value);
		public static E.BookQuery from_string (string query_string);
		public E.BookQuery not (bool unref);
		public static E.BookQuery or (int nqs, E.BookQuery qs, bool unref);
		public E.BookQuery @ref ();
		public string to_string ();
		public void unref ();
		public static E.BookQuery vcard_field_exists (string field);
		[Version (since = "2.22")]
		public static E.BookQuery vcard_field_test (string field, E.BookQueryTest test, string value);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", type_id = "e_contact_get_type ()")]
	public class Contact : E.VCard {
		[CCode (has_construct_function = false)]
		public Contact ();
		public E.Contact duplicate ();
		public static E.ContactField field_id (string field_name);
		[Version (since = "2.26")]
		public static E.ContactField field_id_from_vcard (string vcard_field);
		[Version (since = "3.16")]
		public static bool field_is_string (E.ContactField field_id);
		public static unowned string field_name (E.ContactField field_id);
		[Version (since = "3.8")]
		public static GLib.Type field_type (E.ContactField field_id);
		[CCode (has_construct_function = false)]
		public Contact.from_vcard (string vcard);
		[CCode (has_construct_function = false)]
		[Version (since = "3.4")]
		public Contact.from_vcard_with_uid (string vcard, string uid);
		[CCode (simple_generics = true)]
		public T @get<T> (E.ContactField field_id);
		public GLib.List<E.VCardAttribute> get_attributes (E.ContactField field_id);
		[Version (since = "3.16")]
		public GLib.List<E.VCardAttribute> get_attributes_set ([CCode (array_length_cname = "size", array_length_pos = 1.1)] E.ContactField[] field_ids);
		[CCode (simple_generics = true)]
		public unowned T get_const<T> (E.ContactField field_id);
		[Version (since = "3.4")]
		public bool inline_local_photos () throws GLib.Error;
		public static unowned string pretty_name (E.ContactField field_id);
		[CCode (simple_generics = true)]
		public void @set<T> (E.ContactField field_id, T value);
		public void set_attributes (E.ContactField field_id, GLib.List<E.VCardAttribute> attributes);
		public static unowned string vcard_attribute (E.ContactField field_id);
		[NoAccessorMethod]
		public string Rev { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList address { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAddress address_home { owned get; set; }
		[NoAccessorMethod]
		public string address_label_home { owned get; set; }
		[NoAccessorMethod]
		public string address_label_other { owned get; set; }
		[NoAccessorMethod]
		public string address_label_work { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAddress address_other { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAddress address_work { owned get; set; }
		[NoAccessorMethod]
		public E.ContactDate anniversary { owned get; set; }
		[NoAccessorMethod]
		public string assistant { owned get; set; }
		[NoAccessorMethod]
		public string assistant_phone { owned get; set; }
		[NoAccessorMethod]
		public E.ContactDate birth_date { owned get; set; }
		[NoAccessorMethod]
		public string blog_url { owned get; set; }
		[NoAccessorMethod]
		public string book_uid { owned get; set; }
		[NoAccessorMethod]
		public string business_fax { owned get; set; }
		[NoAccessorMethod]
		public string business_phone { owned get; set; }
		[NoAccessorMethod]
		public string business_phone_2 { owned get; set; }
		[NoAccessorMethod]
		public string callback_phone { owned get; set; }
		[NoAccessorMethod]
		public string caluri { owned get; set; }
		[NoAccessorMethod]
		public string car_phone { owned get; set; }
		[NoAccessorMethod]
		public string categories { owned get; set; }
		[NoAccessorMethod]
		public void* category_list { get; set; }
		[NoAccessorMethod]
		public string company_phone { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList email { owned get; set; }
		[NoAccessorMethod]
		public string email_1 { owned get; set; }
		[NoAccessorMethod]
		public string email_2 { owned get; set; }
		[NoAccessorMethod]
		public string email_3 { owned get; set; }
		[NoAccessorMethod]
		public string email_4 { owned get; set; }
		[NoAccessorMethod]
		public string family_name { owned get; set; }
		[NoAccessorMethod]
		public string fburl { owned get; set; }
		[NoAccessorMethod]
		public string file_as { owned get; set; }
		[NoAccessorMethod]
		public string full_name { owned get; set; }
		[NoAccessorMethod]
		public E.ContactGeo geo { owned get; set; }
		[NoAccessorMethod]
		public string given_name { owned get; set; }
		[NoAccessorMethod]
		public string home_fax { owned get; set; }
		[NoAccessorMethod]
		public string home_phone { owned get; set; }
		[NoAccessorMethod]
		public string home_phone_2 { owned get; set; }
		[NoAccessorMethod]
		public string homepage_url { owned get; set; }
		[NoAccessorMethod]
		public string icscalendar { owned get; set; }
		[NoAccessorMethod]
		public string id { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_aim { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_aim_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_gadugadu { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_gadugadu_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_google_talk { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_google_talk_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_groupwise { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_groupwise_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_icq { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_icq_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_jabber { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_jabber_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_matrix { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_matrix_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_msn { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_msn_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_skype { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_skype_work_3 { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_twitter { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList im_yahoo { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_home_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_home_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_home_3 { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_work_1 { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_work_2 { owned get; set; }
		[NoAccessorMethod]
		public string im_yahoo_work_3 { owned get; set; }
		[NoAccessorMethod]
		public string isdn_phone { owned get; set; }
		[NoAccessorMethod]
		public bool list { get; set; }
		[NoAccessorMethod]
		public bool list_show_addresses { get; set; }
		[NoAccessorMethod]
		public E.ContactPhoto logo { owned get; set; }
		[NoAccessorMethod]
		public string mailer { owned get; set; }
		[NoAccessorMethod]
		public string manager { owned get; set; }
		[NoAccessorMethod]
		public string mobile_phone { owned get; set; }
		[NoAccessorMethod]
		public E.ContactName name { owned get; set; }
		[NoAccessorMethod]
		public string name_or_org { owned get; }
		[NoAccessorMethod]
		public string nickname { owned get; set; }
		[NoAccessorMethod]
		public string note { owned get; set; }
		[NoAccessorMethod]
		public string office { owned get; set; }
		[NoAccessorMethod]
		public string org { owned get; set; }
		[NoAccessorMethod]
		public string org_unit { owned get; set; }
		[NoAccessorMethod]
		public string other_fax { owned get; set; }
		[NoAccessorMethod]
		public string other_phone { owned get; set; }
		[NoAccessorMethod]
		public string pager { owned get; set; }
		[NoAccessorMethod]
		public E.ContactCert pgpCert { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList phone { owned get; set; }
		[NoAccessorMethod]
		public E.ContactPhoto photo { owned get; set; }
		[NoAccessorMethod]
		public string primary_phone { owned get; set; }
		[NoAccessorMethod]
		public string radio { owned get; set; }
		[NoAccessorMethod]
		public string role { owned get; set; }
		[NoAccessorMethod]
		public E.ContactAttrList sip { owned get; set; }
		[NoAccessorMethod]
		public string spouse { owned get; set; }
		[NoAccessorMethod]
		public string telex { owned get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		[NoAccessorMethod]
		public string tty { owned get; set; }
		[NoAccessorMethod]
		public string video_url { owned get; set; }
		[NoAccessorMethod]
		public bool wants_html { get; set; }
		[NoAccessorMethod]
		public E.ContactCert x509Cert { owned get; set; }
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_address_get_type ()")]
	[Compact]
	public class ContactAddress {
		public string address_format;
		public string code;
		public string country;
		public string ext;
		public string locality;
		public string po;
		public string region;
		public string street;
		[CCode (has_construct_function = false)]
		[Version (since = "3.2")]
		public ContactAddress ();
		public void free ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_attr_list_get_type ()")]
	[Compact]
	public class ContactAttrList {
		[Version (since = "3.8")]
		public static GLib.List<string> copy (GLib.List<string> list);
		[Version (since = "3.8")]
		public static void free (GLib.List<string> list);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_cert_get_type ()")]
	[Compact]
	public class ContactCert {
		public weak string data;
		public size_t length;
		[CCode (has_construct_function = false)]
		[Version (since = "3.8")]
		public ContactCert ();
		public void free ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_date_get_type ()")]
	[Compact]
	public class ContactDate {
		public uint day;
		public uint month;
		public uint year;
		[CCode (has_construct_function = false)]
		public ContactDate ();
		public bool equal (E.ContactDate dt2);
		public void free ();
		public static E.ContactDate from_string (string str);
		public string to_string ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_geo_get_type ()")]
	[Compact]
	[Version (since = "1.12")]
	public class ContactGeo {
		public double latitude;
		public double longitude;
		[CCode (has_construct_function = false)]
		[Version (since = "3.8")]
		public ContactGeo ();
		public void free ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_name_get_type ()")]
	[Compact]
	public class ContactName {
		public string additional;
		public string family;
		public string given;
		public string prefixes;
		public string suffixes;
		[CCode (has_construct_function = false)]
		public ContactName ();
		public E.ContactName copy ();
		public void free ();
		public static E.ContactName from_string (string name_str);
		public string to_string ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_contact_photo_get_type ()")]
	[Compact]
	public class ContactPhoto {
		[CCode (cname = "data.inlined.data")]
		public uint8 data_inlined_data;
		[CCode (cname = "data.inlined.length")]
		public size_t data_inlined_length;
		[CCode (cname = "data.inlined.mime_type")]
		public weak string data_inlined_mime_type;
		[CCode (cname = "data.uri")]
		public weak string data_uri;
		public E.ContactPhotoType type;
		[CCode (has_construct_function = false)]
		[Version (since = "3.2")]
		public ContactPhoto ();
		[Version (since = "3.8")]
		public E.ContactPhoto copy ();
		public void free ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "3.2")]
		public unowned uint8[]? get_inlined ();
		[Version (since = "3.2")]
		public unowned string? get_mime_type ();
		[Version (since = "3.2")]
		public unowned string? get_uri ();
		[Version (since = "3.2")]
		public void set_inlined ([CCode (array_length_cname = "len", array_length_pos = 1.1, array_length_type = "gsize")] uint8[] data);
		[Version (since = "3.2")]
		public void set_mime_type (string mime_type);
		[Version (since = "3.2")]
		public void set_uri (string uri);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_name_western_get_type ()")]
	[Compact]
	public class NameWestern {
		public weak string first;
		public weak string full;
		public weak string last;
		public weak string middle;
		public weak string nick;
		public weak string prefix;
		public weak string suffix;
		[Version (since = "3.24")]
		public E.NameWestern copy ();
		public void free ();
		public static E.NameWestern parse (string full_name);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_phone_number_get_type ()")]
	[Compact]
	[Version (since = "3.8")]
	public class PhoneNumber {
		public E.PhoneNumberMatch compare (E.PhoneNumber second_number);
		public static E.PhoneNumberMatch compare_strings (string first_number, string second_number) throws GLib.Error;
		public static E.PhoneNumberMatch compare_strings_with_region (string first_number, string second_number, string? region_code) throws GLib.Error;
		public E.PhoneNumber copy ();
		public static GLib.Quark error_quark ();
		public void free ();
		public static E.PhoneNumber from_string (string phone_number, string? region_code) throws GLib.Error;
		public int get_country_code (E.PhoneNumberCountrySource? source);
		public static int get_country_code_for_region (string? region_code) throws GLib.Error;
		public static string get_default_region () throws GLib.Error;
		public string get_national_number ();
		public static bool is_supported ();
		public string to_string (E.PhoneNumberFormat format);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", type_id = "e_source_backend_summary_setup_get_type ()")]
	[Version (since = "3.8")]
	public class SourceBackendSummarySetup : E.SourceExtension {
		[CCode (has_construct_function = false)]
		protected SourceBackendSummarySetup ();
		public E.ContactField get_indexed_fields (out E.BookIndexType types, out int n_fields);
		public E.ContactField get_summary_fields (out int n_fields);
		public void set_indexed_fieldsv (E.ContactField fields, E.BookIndexType types, int n_fields);
		public void set_summary_fieldsv (E.ContactField fields, int n_fields);
		[NoAccessorMethod]
		public string indexed_fields { owned get; set construct; }
		[NoAccessorMethod]
		public string summary_fields { owned get; set construct; }
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", type_id = "e_vcard_get_type ()")]
	public class VCard : GLib.Object {
		[CCode (has_construct_function = false)]
		public VCard ();
		public void add_attribute (owned E.VCardAttribute attr);
		public void add_attribute_with_value (owned E.VCardAttribute attr, string value);
		[Version (since = "2.32")]
		public void append_attribute (owned E.VCardAttribute attr);
		[Version (since = "2.32")]
		public void append_attribute_with_value (owned E.VCardAttribute attr, string value);
		public void @construct (string str);
		[Version (since = "3.12")]
		public void construct_full (string str, ssize_t len, string? uid);
		[Version (since = "3.4")]
		public void construct_with_uid (string str, string? uid);
		public void dump_structure ();
		public static string escape_string (string s);
		[CCode (has_construct_function = false)]
		public VCard.from_string (string str);
		public unowned E.VCardAttribute? get_attribute (string name);
		[Version (since = "3.4")]
		public unowned E.VCardAttribute? get_attribute_if_parsed (string name);
		public unowned GLib.List<E.VCardAttribute> get_attributes ();
		[Version (since = "3.2")]
		public bool is_parsed ();
		public void remove_attribute (owned E.VCardAttribute attr);
		public void remove_attributes (string? attr_group, string attr_name);
		public string to_string (E.VCardFormat format);
		public static string unescape_string (string s);
		[Version (since = "3.26")]
		public string? util_dup_x_attribute (string x_name);
		[Version (since = "3.26")]
		public void util_set_x_attribute (string x_name, string? value);
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_vcard_attribute_get_type ()")]
	[Compact]
	public class VCardAttribute {
		[CCode (has_construct_function = false)]
		public VCardAttribute (string? attr_group, string attr_name);
		public void add_param (owned E.VCardAttributeParam param);
		public void add_param_with_value (owned E.VCardAttributeParam param, string value);
		public void add_value (string value);
		public void add_value_decoded (string value, int len);
		public E.VCardAttribute copy ();
		[DestroysInstance]
		public void free ();
		public unowned string? get_group ();
		public unowned string get_name ();
		public unowned GLib.List<string>? get_param (string name);
		public unowned GLib.List<E.VCardAttributeParam> get_params ();
		public string? get_value ();
		public GLib.StringBuilder? get_value_decoded ();
		public unowned GLib.List<string> get_values ();
		public unowned GLib.List<GLib.StringBuilder> get_values_decoded ();
		public bool has_type (string typestr);
		public bool is_single_valued ();
		[Version (since = "1.12")]
		public void remove_param (string param_name);
		public void remove_param_value (string param_name, string s);
		public void remove_params ();
		public void remove_value (string s);
		public void remove_values ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "e_vcard_attribute_param_get_type ()")]
	[Compact]
	public class VCardAttributeParam {
		[CCode (has_construct_function = false)]
		public VCardAttributeParam (string name);
		public void add_value (string value);
		public E.VCardAttributeParam copy ();
		[DestroysInstance]
		public void free ();
		public unowned string get_name ();
		public unowned GLib.List<string> get_values ();
		public void remove_values ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", has_type_id = false)]
	[Version (deprecated = true, deprecated_since = "3.2")]
	public struct BookChange {
		public E.BookChangeType change_type;
		public weak E.Contact contact;
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CHANGE_CARD_", has_type_id = false)]
	[Version (deprecated = true, deprecated_since = "3.2")]
	public enum BookChangeType {
		ADDED,
		DELETED,
		MODIFIED
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CLIENT_VIEW_FLAGS_", type_id = "e_book_client_view_flags_get_type ()")]
	[Flags]
	[Version (since = "3.4")]
	public enum BookClientViewFlags {
		NONE,
		NOTIFY_INITIAL
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CURSOR_ORIGIN_", type_id = "e_book_cursor_origin_get_type ()")]
	[Version (since = "3.12")]
	public enum BookCursorOrigin {
		CURRENT,
		BEGIN,
		END
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CURSOR_SORT_", type_id = "e_book_cursor_sort_type_get_type ()")]
	[Version (since = "3.12")]
	public enum BookCursorSortType {
		ASCENDING,
		DESCENDING
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CURSOR_STEP_", type_id = "e_book_cursor_step_flags_get_type ()")]
	[Flags]
	[Version (since = "3.12")]
	public enum BookCursorStepFlags {
		MOVE,
		FETCH
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_INDEX_", type_id = "e_book_index_type_get_type ()")]
	public enum BookIndexType {
		PREFIX,
		SUFFIX,
		PHONE,
		SORT_KEY
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_OPERATION_FLAG_", type_id = "e_book_operation_flags_get_type ()")]
	[Flags]
	[Version (since = "3.34")]
	public enum BookOperationFlags {
		NONE,
		CONFLICT_FAIL,
		CONFLICT_USE_NEWER,
		CONFLICT_KEEP_SERVER,
		CONFLICT_KEEP_LOCAL,
		CONFLICT_WRITE_COPY
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_QUERY_", has_type_id = false)]
	public enum BookQueryTest {
		IS,
		CONTAINS,
		BEGINS_WITH,
		ENDS_WITH,
		EQUALS_PHONE_NUMBER,
		EQUALS_NATIONAL_PHONE_NUMBER,
		EQUALS_SHORT_PHONE_NUMBER,
		REGEX_NORMAL,
		REGEX_RAW,
		LAST
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_VIEW_", has_type_id = false)]
	[Version (deprecated = true, deprecated_since = "3.2")]
	public enum BookViewStatus {
		STATUS_OK,
		STATUS_TIME_LIMIT_EXCEEDED,
		STATUS_SIZE_LIMIT_EXCEEDED,
		ERROR_INVALID_QUERY,
		ERROR_QUERY_REFUSED,
		ERROR_OTHER_ERROR
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_CONTACT_", has_type_id = false)]
	public enum ContactField {
		UID,
		FILE_AS,
		BOOK_UID,
		FULL_NAME,
		GIVEN_NAME,
		FAMILY_NAME,
		NICKNAME,
		EMAIL_1,
		EMAIL_2,
		EMAIL_3,
		EMAIL_4,
		MAILER,
		ADDRESS_LABEL_HOME,
		ADDRESS_LABEL_WORK,
		ADDRESS_LABEL_OTHER,
		PHONE_ASSISTANT,
		PHONE_BUSINESS,
		PHONE_BUSINESS_2,
		PHONE_BUSINESS_FAX,
		PHONE_CALLBACK,
		PHONE_CAR,
		PHONE_COMPANY,
		PHONE_HOME,
		PHONE_HOME_2,
		PHONE_HOME_FAX,
		PHONE_ISDN,
		PHONE_MOBILE,
		PHONE_OTHER,
		PHONE_OTHER_FAX,
		PHONE_PAGER,
		PHONE_PRIMARY,
		PHONE_RADIO,
		PHONE_TELEX,
		PHONE_TTYTDD,
		ORG,
		ORG_UNIT,
		OFFICE,
		TITLE,
		ROLE,
		MANAGER,
		ASSISTANT,
		HOMEPAGE_URL,
		BLOG_URL,
		CATEGORIES,
		CALENDAR_URI,
		FREEBUSY_URL,
		ICS_CALENDAR,
		VIDEO_URL,
		SPOUSE,
		NOTE,
		IM_AIM_HOME_1,
		IM_AIM_HOME_2,
		IM_AIM_HOME_3,
		IM_AIM_WORK_1,
		IM_AIM_WORK_2,
		IM_AIM_WORK_3,
		IM_GROUPWISE_HOME_1,
		IM_GROUPWISE_HOME_2,
		IM_GROUPWISE_HOME_3,
		IM_GROUPWISE_WORK_1,
		IM_GROUPWISE_WORK_2,
		IM_GROUPWISE_WORK_3,
		IM_JABBER_HOME_1,
		IM_JABBER_HOME_2,
		IM_JABBER_HOME_3,
		IM_JABBER_WORK_1,
		IM_JABBER_WORK_2,
		IM_JABBER_WORK_3,
		IM_YAHOO_HOME_1,
		IM_YAHOO_HOME_2,
		IM_YAHOO_HOME_3,
		IM_YAHOO_WORK_1,
		IM_YAHOO_WORK_2,
		IM_YAHOO_WORK_3,
		IM_MSN_HOME_1,
		IM_MSN_HOME_2,
		IM_MSN_HOME_3,
		IM_MSN_WORK_1,
		IM_MSN_WORK_2,
		IM_MSN_WORK_3,
		IM_ICQ_HOME_1,
		IM_ICQ_HOME_2,
		IM_ICQ_HOME_3,
		IM_ICQ_WORK_1,
		IM_ICQ_WORK_2,
		IM_ICQ_WORK_3,
		REV,
		NAME_OR_ORG,
		ADDRESS,
		ADDRESS_HOME,
		ADDRESS_WORK,
		ADDRESS_OTHER,
		CATEGORY_LIST,
		PHOTO,
		LOGO,
		NAME,
		EMAIL,
		IM_AIM,
		IM_GROUPWISE,
		IM_JABBER,
		IM_YAHOO,
		IM_MSN,
		IM_ICQ,
		WANTS_HTML,
		IS_LIST,
		LIST_SHOW_ADDRESSES,
		BIRTH_DATE,
		ANNIVERSARY,
		X509_CERT,
		PGP_CERT,
		IM_GADUGADU_HOME_1,
		IM_GADUGADU_HOME_2,
		IM_GADUGADU_HOME_3,
		IM_GADUGADU_WORK_1,
		IM_GADUGADU_WORK_2,
		IM_GADUGADU_WORK_3,
		IM_GADUGADU,
		GEO,
		TEL,
		IM_SKYPE_HOME_1,
		IM_SKYPE_HOME_2,
		IM_SKYPE_HOME_3,
		IM_SKYPE_WORK_1,
		IM_SKYPE_WORK_2,
		IM_SKYPE_WORK_3,
		IM_SKYPE,
		SIP,
		IM_GOOGLE_TALK_HOME_1,
		IM_GOOGLE_TALK_HOME_2,
		IM_GOOGLE_TALK_HOME_3,
		IM_GOOGLE_TALK_WORK_1,
		IM_GOOGLE_TALK_WORK_2,
		IM_GOOGLE_TALK_WORK_3,
		IM_GOOGLE_TALK,
		IM_TWITTER,
		IM_MATRIX_HOME_1,
		IM_MATRIX_HOME_2,
		IM_MATRIX_HOME_3,
		IM_MATRIX_WORK_1,
		IM_MATRIX_WORK_2,
		IM_MATRIX_WORK_3,
		IM_MATRIX,
		FIELD_LAST,
		FIELD_FIRST,
		LAST_SIMPLE_STRING,
		FIRST_PHONE_ID,
		LAST_PHONE_ID,
		FIRST_EMAIL_ID,
		LAST_EMAIL_ID,
		FIRST_ADDRESS_ID,
		LAST_ADDRESS_ID,
		FIRST_LABEL_ID,
		LAST_LABEL_ID
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_CONTACT_PHOTO_TYPE_", has_type_id = false)]
	public enum ContactPhotoType {
		INLINED,
		URI
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_PHONE_NUMBER_COUNTRY_FROM_", has_type_id = false)]
	[Version (since = "3.8")]
	public enum PhoneNumberCountrySource {
		FQTN,
		IDD,
		DEFAULT
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_PHONE_NUMBER_FORMAT_", has_type_id = false)]
	[Version (since = "3.8")]
	public enum PhoneNumberFormat {
		E164,
		INTERNATIONAL,
		NATIONAL,
		RFC3966
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_PHONE_NUMBER_MATCH_", has_type_id = false)]
	[Version (since = "3.8")]
	public enum PhoneNumberMatch {
		NONE,
		EXACT,
		NATIONAL,
		SHORT
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "EVC_FORMAT_VCARD_", has_type_id = false)]
	public enum VCardFormat {
		@21,
		@30
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_BOOK_CLIENT_ERROR_", has_type_id = false)]
	[Version (since = "3.2")]
	public errordomain BookClientError {
		NO_SUCH_BOOK,
		CONTACT_NOT_FOUND,
		CONTACT_ID_ALREADY_EXISTS,
		NO_SUCH_SOURCE,
		NO_SPACE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cprefix = "E_PHONE_NUMBER_ERROR_", has_type_id = false)]
	[Version (since = "3.8")]
	public errordomain PhoneNumberError {
		NOT_IMPLEMENTED,
		UNKNOWN,
		NOT_A_NUMBER,
		INVALID_COUNTRY_CODE,
		TOO_SHORT_AFTER_IDD,
		TOO_SHORT,
		TOO_LONG;
		[Version (replacement = "PhoneNumber.error_quark")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_BOOK_BACKEND_PROPERTY_CATEGORIES")]
	[Version (since = "3.48")]
	public const string BOOK_BACKEND_PROPERTY_CATEGORIES;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_BOOK_BACKEND_PROPERTY_REQUIRED_FIELDS")]
	[Version (since = "3.2")]
	public const string BOOK_BACKEND_PROPERTY_REQUIRED_FIELDS;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_BOOK_BACKEND_PROPERTY_REVISION")]
	[Version (since = "3.4")]
	public const string BOOK_BACKEND_PROPERTY_REVISION;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_BOOK_BACKEND_PROPERTY_SUPPORTED_FIELDS")]
	[Version (since = "3.2")]
	public const string BOOK_BACKEND_PROPERTY_SUPPORTED_FIELDS;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_ADR")]
	public const string EVC_ADR;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_BDAY")]
	public const string EVC_BDAY;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_CALURI")]
	public const string EVC_CALURI;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_CATEGORIES")]
	public const string EVC_CATEGORIES;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_CL_UID")]
	[Version (since = "3.2")]
	public const string EVC_CL_UID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_CONTACT_LIST")]
	[Version (since = "3.2")]
	public const string EVC_CONTACT_LIST;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_EMAIL")]
	public const string EVC_EMAIL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_ENCODING")]
	public const string EVC_ENCODING;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_FBURL")]
	public const string EVC_FBURL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_FN")]
	public const string EVC_FN;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_GEO")]
	[Version (since = "1.12")]
	public const string EVC_GEO;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_ICSCALENDAR")]
	public const string EVC_ICSCALENDAR;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_KEY")]
	public const string EVC_KEY;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_LABEL")]
	public const string EVC_LABEL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_LOGO")]
	public const string EVC_LOGO;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_MAILER")]
	public const string EVC_MAILER;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_N")]
	public const string EVC_N;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_NICKNAME")]
	public const string EVC_NICKNAME;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_NOTE")]
	public const string EVC_NOTE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_ORG")]
	public const string EVC_ORG;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_PARENT_CL")]
	[Version (since = "3.2")]
	public const string EVC_PARENT_CL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_PHOTO")]
	public const string EVC_PHOTO;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_PRODID")]
	public const string EVC_PRODID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_QUOTEDPRINTABLE")]
	public const string EVC_QUOTEDPRINTABLE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_REV")]
	public const string EVC_REV;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_ROLE")]
	public const string EVC_ROLE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_TEL")]
	public const string EVC_TEL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_TITLE")]
	public const string EVC_TITLE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_TYPE")]
	public const string EVC_TYPE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_UID")]
	public const string EVC_UID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_URL")]
	public const string EVC_URL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_VALUE")]
	public const string EVC_VALUE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_VERSION")]
	public const string EVC_VERSION;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_AIM")]
	public const string EVC_X_AIM;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_ANNIVERSARY")]
	public const string EVC_X_ANNIVERSARY;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_ASSISTANT")]
	public const string EVC_X_ASSISTANT;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_BIRTHDAY")]
	public const string EVC_X_BIRTHDAY;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_BLOG_URL")]
	public const string EVC_X_BLOG_URL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_BOOK_UID")]
	[Version (since = "3.6")]
	public const string EVC_X_BOOK_UID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_CALLBACK")]
	public const string EVC_X_CALLBACK;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_COMPANY")]
	public const string EVC_X_COMPANY;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_CONTACT_UID")]
	public const string EVC_X_DEST_CONTACT_UID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_EMAIL")]
	public const string EVC_X_DEST_EMAIL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_EMAIL_NUM")]
	public const string EVC_X_DEST_EMAIL_NUM;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_HTML_MAIL")]
	public const string EVC_X_DEST_HTML_MAIL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_NAME")]
	public const string EVC_X_DEST_NAME;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_DEST_SOURCE_UID")]
	public const string EVC_X_DEST_SOURCE_UID;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_E164")]
	public const string EVC_X_E164;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_FILE_AS")]
	public const string EVC_X_FILE_AS;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_GADUGADU")]
	public const string EVC_X_GADUGADU;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_GOOGLE_TALK")]
	[Version (since = "3.2")]
	public const string EVC_X_GOOGLE_TALK;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_GROUPWISE")]
	public const string EVC_X_GROUPWISE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_ICQ")]
	public const string EVC_X_ICQ;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_JABBER")]
	public const string EVC_X_JABBER;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_LIST")]
	public const string EVC_X_LIST;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_LIST_NAME")]
	[Version (since = "3.2")]
	public const string EVC_X_LIST_NAME;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_LIST_SHOW_ADDRESSES")]
	public const string EVC_X_LIST_SHOW_ADDRESSES;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_MANAGER")]
	public const string EVC_X_MANAGER;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_MATRIX")]
	public const string EVC_X_MATRIX;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_MSN")]
	public const string EVC_X_MSN;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_RADIO")]
	public const string EVC_X_RADIO;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_SIP")]
	[Version (since = "2.26")]
	public const string EVC_X_SIP;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_SKYPE")]
	[Version (since = "2.26")]
	public const string EVC_X_SKYPE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_SPOUSE")]
	public const string EVC_X_SPOUSE;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_TELEX")]
	public const string EVC_X_TELEX;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_TTYTDD")]
	public const string EVC_X_TTYTDD;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_TWITTER")]
	[Version (since = "3.6")]
	public const string EVC_X_TWITTER;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_VIDEO_URL")]
	public const string EVC_X_VIDEO_URL;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_WANTS_HTML")]
	public const string EVC_X_WANTS_HTML;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "EVC_X_YAHOO")]
	public const string EVC_X_YAHOO;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP")]
	[Version (since = "3.8")]
	public const string SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_VCARD_21_VALID_PARAMETERS")]
	[Version (since = "3.4")]
	public const string VCARD_21_VALID_PARAMETERS;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h", cname = "E_VCARD_21_VALID_PROPERTIES")]
	[Version (since = "3.4")]
	public const string VCARD_21_VALID_PROPERTIES;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "AddressWestern.parse")]
	public static E.AddressWestern? address_western_parse (string? in_address);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.and")]
	public static E.BookQuery book_query_and (int nqs, E.BookQuery qs, bool unref);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.any_field_contains")]
	public static E.BookQuery book_query_any_field_contains (string value);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.field_exists")]
	public static E.BookQuery book_query_field_exists (E.ContactField field);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.field_test")]
	public static E.BookQuery book_query_field_test (E.ContactField field, E.BookQueryTest test, string value);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.from_string")]
	public static E.BookQuery book_query_from_string (string query_string);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.or")]
	public static E.BookQuery book_query_or (int nqs, E.BookQuery qs, bool unref);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.vcard_field_exists")]
	public static E.BookQuery book_query_vcard_field_exists (string field);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "BookQuery.vcard_field_test", since = "2.22")]
	public static E.BookQuery book_query_vcard_field_test (string field, E.BookQueryTest test, string value);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (since = "3.34")]
	public static uint32 book_util_conflict_resolution_to_operation_flags (E.ConflictResolution conflict_resolution);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (since = "3.48")]
	public static void book_util_diff_categories (E.Contact? old_contact, E.Contact? new_contact, out GLib.HashTable<weak string,int> out_added, out GLib.HashTable<weak string,int> out_removed);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (since = "3.44")]
	public static void book_util_foreach_address (string email_address, GLib.HRFunc func);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (since = "3.34")]
	public static E.ConflictResolution book_util_operation_flags_to_conflict_resolution (uint32 flags);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "ContactAttrList.copy", since = "3.8")]
	public static GLib.List<string> contact_attr_list_copy (GLib.List<string> list);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "ContactAttrList.free", since = "3.8")]
	public static void contact_attr_list_free (GLib.List<string> list);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "ContactDate.from_string")]
	public static E.ContactDate contact_date_from_string (string str);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "ContactName.from_string")]
	public static E.ContactName contact_name_from_string (string name_str);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "NameWestern.parse")]
	public static E.NameWestern name_western_parse (string full_name);
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.compare_strings", since = "3.8")]
	public static E.PhoneNumberMatch phone_number_compare_strings (string first_number, string second_number) throws GLib.Error;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.compare_strings_with_region", since = "3.8")]
	public static E.PhoneNumberMatch phone_number_compare_strings_with_region (string first_number, string second_number, string? region_code) throws GLib.Error;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.from_string", since = "3.8")]
	public static E.PhoneNumber phone_number_from_string (string phone_number, string? region_code) throws GLib.Error;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.get_country_code_for_region", since = "3.8")]
	public static int phone_number_get_country_code_for_region (string? region_code) throws GLib.Error;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.get_default_region", since = "3.8")]
	public static string phone_number_get_default_region () throws GLib.Error;
	[CCode (cheader_filename = "libebook-contacts/libebook-contacts.h")]
	[Version (replacement = "PhoneNumber.is_supported", since = "3.8")]
	public static bool phone_number_is_supported ();
}

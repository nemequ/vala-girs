/* libmm-glib.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "MM", gir_namespace = "ModemManager", gir_version = "1.0", lower_case_cprefix = "mm_")]
namespace MM {
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_3gpp_profile_get_type ()")]
	public class @3gppProfile : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.18")]
		public @3gppProfile ();
		public bool consume_string (string key, string value) throws GLib.Error;
		public bool consume_variant (string key, GLib.Variant value) throws GLib.Error;
		[Version (since = "1.20")]
		public MM.BearerAccessTypePreference get_access_type_preference ();
		[Version (since = "1.18")]
		public MM.BearerAllowedAuth get_allowed_auth ();
		[Version (since = "1.18")]
		public unowned string get_apn ();
		[Version (since = "1.18")]
		public MM.BearerApnType get_apn_type ();
		[Version (since = "1.20")]
		public bool get_enabled ();
		[Version (since = "1.18")]
		public MM.BearerIpFamily get_ip_type ();
		[Version (since = "1.18")]
		public unowned string get_password ();
		[Version (since = "1.18")]
		public int get_profile_id ();
		[Version (since = "1.20")]
		public unowned string get_profile_name ();
		[Version (since = "1.20")]
		public MM.BearerProfileSource get_profile_source ();
		[Version (since = "1.20")]
		public MM.BearerRoamingAllowance get_roaming_allowance ();
		[Version (since = "1.18")]
		public unowned string get_user ();
		[Version (since = "1.20")]
		public void set_access_type_preference (MM.BearerAccessTypePreference access_type_preference);
		[Version (since = "1.18")]
		public void set_allowed_auth (MM.BearerAllowedAuth allowed_auth);
		[Version (since = "1.18")]
		public void set_apn (string apn);
		[Version (since = "1.18")]
		public void set_apn_type (MM.BearerApnType apn_type);
		[Version (since = "1.20")]
		public void set_enabled (bool enabled);
		[Version (since = "1.18")]
		public void set_ip_type (MM.BearerIpFamily ip_type);
		[Version (since = "1.18")]
		public void set_password (string password);
		[Version (since = "1.18")]
		public void set_profile_id (int profile_id);
		[Version (since = "1.20")]
		public void set_profile_name (string profile_name);
		[Version (since = "1.20")]
		public void set_profile_source (MM.BearerProfileSource profile_source);
		[Version (since = "1.20")]
		public void set_roaming_allowance (MM.BearerRoamingAllowance roaming_allowance);
		[Version (since = "1.18")]
		public void set_user (string user);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_get_type ()")]
	public class Bearer : MM.GdbusBearerProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusBearer {
		[CCode (has_construct_function = false)]
		protected Bearer ();
		[Version (since = "1.0")]
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool connect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool disconnect (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool disconnect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public string dup_interface ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public MM.BearerType get_bearer_type ();
		[Version (since = "1.0")]
		public bool get_connected ();
		[Version (since = "1.18")]
		public GLib.Error get_connection_error ();
		[Version (since = "1.0")]
		public unowned string get_interface ();
		[Version (since = "1.0")]
		public uint get_ip_timeout ();
		[Version (since = "1.0")]
		public MM.BearerIpConfig get_ipv4_config ();
		[Version (since = "1.0")]
		public MM.BearerIpConfig get_ipv6_config ();
		[Version (since = "1.18")]
		public bool get_multiplexed ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.18")]
		public int get_profile_id ();
		[Version (since = "1.0")]
		public MM.BearerProperties get_properties ();
		[Version (since = "1.20")]
		public bool get_reload_stats_supported ();
		[Version (since = "1.6")]
		public MM.BearerStats get_stats ();
		[Version (since = "1.0")]
		public bool get_suspended ();
		[Version (since = "1.18")]
		public unowned GLib.Error peek_connection_error ();
		[Version (since = "1.0")]
		public unowned MM.BearerIpConfig peek_ipv4_config ();
		[Version (since = "1.0")]
		public unowned MM.BearerIpConfig peek_ipv6_config ();
		[Version (since = "1.0")]
		public unowned MM.BearerProperties peek_properties ();
		[Version (since = "1.6")]
		public unowned MM.BearerStats peek_stats ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_ip_config_get_type ()")]
	public class BearerIpConfig : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BearerIpConfig ();
		[Version (since = "1.0")]
		public unowned string get_address ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public unowned string[] get_dns ();
		[Version (since = "1.0")]
		public unowned string get_gateway ();
		[Version (since = "1.0")]
		public MM.BearerIpMethod get_method ();
		[Version (since = "1.4")]
		public uint get_mtu ();
		[Version (since = "1.0")]
		public uint get_prefix ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_properties_get_type ()")]
	public class BearerProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public BearerProperties ();
		[Version (since = "1.20")]
		public MM.BearerAccessTypePreference get_access_type_preference ();
		[Version (since = "1.0")]
		public bool get_allow_roaming ();
		[Version (since = "1.0")]
		public MM.BearerAllowedAuth get_allowed_auth ();
		[Version (since = "1.0")]
		public unowned string get_apn ();
		[Version (since = "1.18")]
		public MM.BearerApnType get_apn_type ();
		[Version (since = "1.0")]
		public MM.BearerIpFamily get_ip_type ();
		[Version (since = "1.18")]
		public MM.BearerMultiplexSupport get_multiplex ();
		[Version (deprecated = true, deprecated_since = "1.10.0.", since = "1.0")]
		public unowned string get_number ();
		[Version (since = "1.0")]
		public unowned string get_password ();
		[Version (since = "1.18")]
		public int get_profile_id ();
		[Version (since = "1.20")]
		public unowned string get_profile_name ();
		[Version (since = "1.0")]
		public MM.ModemCdmaRmProtocol get_rm_protocol ();
		[Version (since = "1.20")]
		public MM.BearerRoamingAllowance get_roaming_allowance ();
		[Version (since = "1.0")]
		public unowned string get_user ();
		[Version (since = "1.20")]
		public void set_access_type_preference (MM.BearerAccessTypePreference access_type_preference);
		[Version (since = "1.0")]
		public void set_allow_roaming (bool allow_roaming);
		[Version (since = "1.0")]
		public void set_allowed_auth (MM.BearerAllowedAuth allowed_auth);
		[Version (since = "1.0")]
		public void set_apn (string apn);
		[Version (since = "1.18")]
		public void set_apn_type (MM.BearerApnType apn_type);
		[Version (since = "1.0")]
		public void set_ip_type (MM.BearerIpFamily ip_type);
		[Version (since = "1.18")]
		public void set_multiplex (MM.BearerMultiplexSupport multiplex);
		[Version (deprecated = true, deprecated_since = "1.10.0.", since = "1.0")]
		public void set_number (string number);
		[Version (since = "1.0")]
		public void set_password (string password);
		[Version (since = "1.18")]
		public void set_profile_id (int profile_id);
		[Version (since = "1.20")]
		public void set_profile_name (string profile_name);
		[Version (since = "1.0")]
		public void set_rm_protocol (MM.ModemCdmaRmProtocol protocol);
		[Version (since = "1.20")]
		public void set_roaming_allowance (MM.BearerRoamingAllowance roaming_allowance);
		[Version (since = "1.0")]
		public void set_user (string user);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_stats_get_type ()")]
	public class BearerStats : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BearerStats ();
		[Version (since = "1.14")]
		public uint get_attempts ();
		[Version (since = "1.20")]
		public uint64 get_downlink_speed ();
		[Version (since = "1.6")]
		public uint get_duration ();
		[Version (since = "1.14")]
		public uint get_failed_attempts ();
		[Version (since = "1.6")]
		public uint64 get_rx_bytes ();
		[Version (since = "1.20")]
		public uint64 get_start_date ();
		[Version (since = "1.14")]
		public uint get_total_duration ();
		[Version (since = "1.14")]
		public uint64 get_total_rx_bytes ();
		[Version (since = "1.14")]
		public uint64 get_total_tx_bytes ();
		[Version (since = "1.6")]
		public uint64 get_tx_bytes ();
		[Version (since = "1.20")]
		public uint64 get_uplink_speed ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_call_get_type ()")]
	public class Call : MM.GdbusCallProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusCall {
		[CCode (has_construct_function = false)]
		protected Call ();
		[Version (since = "1.6")]
		public async bool accept (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool deflect (string number, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool deflect_sync (string number, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.10")]
		public string dup_audio_port ();
		[Version (since = "1.6")]
		public string dup_number ();
		[Version (since = "1.6")]
		public string dup_path ();
		[Version (since = "1.10")]
		public MM.CallAudioFormat get_audio_format ();
		[Version (since = "1.10")]
		public unowned string get_audio_port ();
		[Version (since = "1.6")]
		public MM.CallDirection get_direction ();
		[Version (since = "1.12")]
		public bool get_multiparty ();
		[Version (since = "1.6")]
		public unowned string get_number ();
		[Version (since = "1.6")]
		public unowned string get_path ();
		[Version (since = "1.6")]
		public MM.CallState get_state ();
		[Version (since = "1.6")]
		public MM.CallStateReason get_state_reason ();
		[Version (since = "1.6")]
		public async bool hangup (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool hangup_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool join_multiparty (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool join_multiparty_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool leave_multiparty (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool leave_multiparty_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.10")]
		public unowned MM.CallAudioFormat peek_audio_format ();
		[Version (since = "1.6")]
		public async bool send_dtmf (string dtmf, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool send_dtmf_sync (string dtmf, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public async bool start (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool start_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_call_audio_format_get_type ()")]
	public class CallAudioFormat : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CallAudioFormat ();
		[Version (since = "1.10")]
		public unowned string get_encoding ();
		[Version (since = "1.10")]
		public uint get_rate ();
		[Version (since = "1.10")]
		public unowned string get_resolution ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_call_properties_get_type ()")]
	public class CallProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.6")]
		public CallProperties ();
		[CCode (has_construct_function = false)]
		public CallProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public CallProperties.from_string (string str) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public MM.CallDirection get_direction ();
		[Version (since = "1.6")]
		public unowned string get_number ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public MM.CallState get_state ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public MM.CallStateReason get_state_reason ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public void set_direction (MM.CallDirection direction);
		[Version (since = "1.6")]
		public void set_number (string text);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public void set_state (MM.CallState state);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.6")]
		public void set_state_reason (MM.CallStateReason state_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cdma_manual_activation_properties_get_type ()")]
	public class CdmaManualActivationProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.2")]
		public CdmaManualActivationProperties ();
		[Version (since = "1.2")]
		public unowned string get_mdn ();
		[Version (since = "1.2")]
		public unowned string get_min ();
		[Version (since = "1.2")]
		public unowned string get_mn_aaa_key ();
		[Version (since = "1.2")]
		public unowned string get_mn_ha_key ();
		[Version (since = "1.2")]
		public uint8 get_prl (out size_t prl_len);
		[Version (since = "1.2")]
		public GLib.ByteArray get_prl_bytearray ();
		[Version (since = "1.2")]
		public uint16 get_sid ();
		[Version (since = "1.2")]
		public unowned string get_spc ();
		[Version (since = "1.2")]
		public unowned GLib.ByteArray peek_prl_bytearray ();
		[Version (since = "1.2")]
		public bool set_mdn (string mdn) throws GLib.Error;
		[Version (since = "1.2")]
		public bool set_min (string min) throws GLib.Error;
		[Version (since = "1.2")]
		public bool set_mn_aaa_key (string mn_aaa_key) throws GLib.Error;
		[Version (since = "1.2")]
		public bool set_mn_ha_key (string mn_ha_key) throws GLib.Error;
		[Version (since = "1.2")]
		public bool set_prl (uint8 prl, size_t prl_length) throws GLib.Error;
		[Version (since = "1.2")]
		public bool set_prl_bytearray (GLib.ByteArray prl) throws GLib.Error;
		[Version (since = "1.2")]
		public void set_sid (uint16 sid);
		[Version (since = "1.2")]
		public bool set_spc (string spc) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_get_type ()")]
	public class CellInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CellInfo ();
		[NoWrapper]
		public virtual GLib.StringBuilder build_string ();
		[Version (since = "1.20")]
		public MM.CellType get_cell_type ();
		[NoWrapper]
		public virtual GLib.VariantDict get_dictionary ();
		[Version (since = "1.20")]
		public bool get_serving ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_cdma_get_type ()")]
	public class CellInfoCdma : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoCdma ();
		[Version (since = "1.20")]
		public unowned string get_base_station_id ();
		[Version (since = "1.20")]
		public unowned string get_nid ();
		[Version (since = "1.20")]
		public uint get_pilot_strength ();
		[Version (since = "1.20")]
		public unowned string get_ref_pn ();
		[Version (since = "1.20")]
		public unowned string get_sid ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_gsm_get_type ()")]
	public class CellInfoGsm : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoGsm ();
		[Version (since = "1.20")]
		public uint get_arfcn ();
		[Version (since = "1.20")]
		public unowned string get_base_station_id ();
		[Version (since = "1.20")]
		public unowned string get_ci ();
		[Version (since = "1.20")]
		public unowned string get_lac ();
		[Version (since = "1.20")]
		public unowned string get_operator_id ();
		[Version (since = "1.20")]
		public uint get_rx_level ();
		[Version (since = "1.20")]
		public uint get_timing_advance ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_lte_get_type ()")]
	public class CellInfoLte : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoLte ();
		[Version (since = "1.22")]
		public uint get_bandwidth ();
		[Version (since = "1.20")]
		public unowned string get_ci ();
		[Version (since = "1.20")]
		public uint get_earfcn ();
		[Version (since = "1.20")]
		public unowned string get_operator_id ();
		[Version (since = "1.20")]
		public unowned string get_physical_ci ();
		[Version (since = "1.20")]
		public double get_rsrp ();
		[Version (since = "1.20")]
		public double get_rsrq ();
		[Version (since = "1.22")]
		public MM.ServingCellType get_serving_cell_type ();
		[Version (since = "1.20")]
		public unowned string get_tac ();
		[Version (since = "1.20")]
		public uint get_timing_advance ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_nr5g_get_type ()")]
	public class CellInfoNr5g : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoNr5g ();
		[Version (since = "1.22")]
		public uint get_bandwidth ();
		[Version (since = "1.20")]
		public unowned string get_ci ();
		[Version (since = "1.20")]
		public uint get_nrarfcn ();
		[Version (since = "1.20")]
		public unowned string get_operator_id ();
		[Version (since = "1.20")]
		public unowned string get_physical_ci ();
		[Version (since = "1.20")]
		public double get_rsrp ();
		[Version (since = "1.20")]
		public double get_rsrq ();
		[Version (since = "1.22")]
		public MM.ServingCellType get_serving_cell_type ();
		[Version (since = "1.20")]
		public double get_sinr ();
		[Version (since = "1.20")]
		public unowned string get_tac ();
		[Version (since = "1.20")]
		public uint get_timing_advance ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_tdscdma_get_type ()")]
	public class CellInfoTdscdma : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoTdscdma ();
		[Version (since = "1.20")]
		public uint get_cell_parameter_id ();
		[Version (since = "1.20")]
		public unowned string get_ci ();
		[Version (since = "1.20")]
		public unowned string get_lac ();
		[Version (since = "1.20")]
		public unowned string get_operator_id ();
		[Version (since = "1.20")]
		public uint get_path_loss ();
		[Version (since = "1.20")]
		public double get_rscp ();
		[Version (since = "1.20")]
		public uint get_timing_advance ();
		[Version (since = "1.20")]
		public uint get_uarfcn ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cell_info_umts_get_type ()")]
	public class CellInfoUmts : MM.CellInfo {
		[CCode (has_construct_function = false)]
		protected CellInfoUmts ();
		[Version (since = "1.20")]
		public unowned string get_ci ();
		[Version (since = "1.20")]
		public double get_ecio ();
		[Version (since = "1.20")]
		public uint get_frequency_fdd_dl ();
		[Version (since = "1.20")]
		public uint get_frequency_fdd_ul ();
		[Version (since = "1.20")]
		public uint get_frequency_tdd ();
		[Version (since = "1.20")]
		public unowned string get_lac ();
		[Version (since = "1.20")]
		public unowned string get_operator_id ();
		[Version (since = "1.20")]
		public uint get_path_loss ();
		[Version (since = "1.20")]
		public uint get_psc ();
		[Version (since = "1.20")]
		public double get_rscp ();
		[Version (since = "1.20")]
		public uint get_uarfcn ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_firmware_properties_get_type ()")]
	public class FirmwareProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public FirmwareProperties (MM.FirmwareImageType image_type, string unique_id);
		[CCode (has_construct_function = false)]
		public FirmwareProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		[Version (since = "1.0")]
		public unowned string get_gobi_boot_version ();
		[Version (since = "1.0")]
		public unowned string get_gobi_modem_unique_id ();
		[Version (since = "1.0")]
		public unowned string get_gobi_pri_info ();
		[Version (since = "1.0")]
		public unowned string get_gobi_pri_unique_id ();
		[Version (since = "1.0")]
		public unowned string get_gobi_pri_version ();
		[Version (since = "1.0")]
		public MM.FirmwareImageType get_image_type ();
		[Version (since = "1.0")]
		public unowned string get_unique_id ();
		public void set_gobi_boot_version (string version);
		public void set_gobi_modem_unique_id (string id);
		public void set_gobi_pri_info (string info);
		public void set_gobi_pri_unique_id (string id);
		public void set_gobi_pri_version (string version);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_firmware_update_settings_get_type ()")]
	public class FirmwareUpdateSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FirmwareUpdateSettings ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.10")]
		public unowned string[] get_device_ids ();
		[Version (since = "1.10")]
		public unowned string get_fastboot_at ();
		[Version (since = "1.10")]
		public MM.ModemFirmwareUpdateMethod get_method ();
		[Version (since = "1.10")]
		public unowned string get_version ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearerProxy", type_id = "mm_gdbus_bearer_proxy_get_type ()")]
	public class GdbusBearerProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusBearer {
		[CCode (cname = "mm_gdbus_bearer_proxy_new", has_construct_function = false)]
		public async GdbusBearerProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_bearer_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusBearerProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearerSkeleton", type_id = "mm_gdbus_bearer_skeleton_get_type ()")]
	public class GdbusBearerSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusBearer {
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusCallProxy", type_id = "mm_gdbus_call_proxy_get_type ()")]
	public class GdbusCallProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusCall {
		[CCode (cname = "mm_gdbus_call_proxy_new", has_construct_function = false)]
		public async GdbusCallProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_call_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusCallProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusCall*")]
		public GdbusCallProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusCall*")]
		public GdbusCallProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusCallSkeleton", type_id = "mm_gdbus_call_skeleton_get_type ()")]
	public class GdbusCallSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusCall {
		[CCode (has_construct_function = false, type = "MmGdbusCall*")]
		public GdbusCallSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppProfileManagerProxy", type_id = "mm_gdbus_modem3gpp_profile_manager_proxy_get_type ()")]
	public class GdbusModem3gppProfileManagerProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppProfileManager {
		[CCode (cname = "mm_gdbus_modem3gpp_profile_manager_proxy_new", has_construct_function = false)]
		public async GdbusModem3gppProfileManagerProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem3gpp_profile_manager_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModem3gppProfileManagerProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppProfileManager*")]
		public GdbusModem3gppProfileManagerProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppProfileManager*")]
		public GdbusModem3gppProfileManagerProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppProfileManagerSkeleton", type_id = "mm_gdbus_modem3gpp_profile_manager_skeleton_get_type ()")]
	public class GdbusModem3gppProfileManagerSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem3gppProfileManager {
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppProfileManager*")]
		public GdbusModem3gppProfileManagerSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppProxy", type_id = "mm_gdbus_modem3gpp_proxy_get_type ()")]
	public class GdbusModem3gppProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gpp {
		[CCode (cname = "mm_gdbus_modem3gpp_proxy_new", has_construct_function = false)]
		public async GdbusModem3gppProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem3gpp_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModem3gppProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppSkeleton", type_id = "mm_gdbus_modem3gpp_skeleton_get_type ()")]
	public class GdbusModem3gppSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem3gpp {
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssdProxy", type_id = "mm_gdbus_modem3gpp_ussd_proxy_get_type ()")]
	public class GdbusModem3gppUssdProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppUssd {
		[CCode (cname = "mm_gdbus_modem3gpp_ussd_proxy_new", has_construct_function = false)]
		public async GdbusModem3gppUssdProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem3gpp_ussd_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModem3gppUssdProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssdSkeleton", type_id = "mm_gdbus_modem3gpp_ussd_skeleton_get_type ()")]
	public class GdbusModem3gppUssdSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem3gppUssd {
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdmaProxy", type_id = "mm_gdbus_modem_cdma_proxy_get_type ()")]
	public class GdbusModemCdmaProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemCdma {
		[CCode (cname = "mm_gdbus_modem_cdma_proxy_new", has_construct_function = false)]
		public async GdbusModemCdmaProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_cdma_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemCdmaProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdmaSkeleton", type_id = "mm_gdbus_modem_cdma_skeleton_get_type ()")]
	public class GdbusModemCdmaSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemCdma {
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmwareProxy", type_id = "mm_gdbus_modem_firmware_proxy_get_type ()")]
	public class GdbusModemFirmwareProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemFirmware {
		[CCode (cname = "mm_gdbus_modem_firmware_proxy_new", has_construct_function = false)]
		public async GdbusModemFirmwareProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_firmware_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemFirmwareProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmwareSkeleton", type_id = "mm_gdbus_modem_firmware_skeleton_get_type ()")]
	public class GdbusModemFirmwareSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemFirmware {
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocationProxy", type_id = "mm_gdbus_modem_location_proxy_get_type ()")]
	public class GdbusModemLocationProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemLocation {
		[CCode (cname = "mm_gdbus_modem_location_proxy_new", has_construct_function = false)]
		public async GdbusModemLocationProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_location_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemLocationProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocationSkeleton", type_id = "mm_gdbus_modem_location_skeleton_get_type ()")]
	public class GdbusModemLocationSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemLocation {
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessagingProxy", type_id = "mm_gdbus_modem_messaging_proxy_get_type ()")]
	public class GdbusModemMessagingProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemMessaging {
		[CCode (cname = "mm_gdbus_modem_messaging_proxy_new", has_construct_function = false)]
		public async GdbusModemMessagingProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_messaging_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemMessagingProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessagingSkeleton", type_id = "mm_gdbus_modem_messaging_skeleton_get_type ()")]
	public class GdbusModemMessagingSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemMessaging {
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOmaProxy", type_id = "mm_gdbus_modem_oma_proxy_get_type ()")]
	public class GdbusModemOmaProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemOma {
		[CCode (cname = "mm_gdbus_modem_oma_proxy_new", has_construct_function = false)]
		public async GdbusModemOmaProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_oma_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemOmaProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOmaSkeleton", type_id = "mm_gdbus_modem_oma_skeleton_get_type ()")]
	public class GdbusModemOmaSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemOma {
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemProxy", type_id = "mm_gdbus_modem_proxy_get_type ()")]
	public class GdbusModemProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem {
		[CCode (cname = "mm_gdbus_modem_proxy_new", has_construct_function = false)]
		public async GdbusModemProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSarProxy", type_id = "mm_gdbus_modem_sar_proxy_get_type ()")]
	public class GdbusModemSarProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSar {
		[CCode (cname = "mm_gdbus_modem_sar_proxy_new", has_construct_function = false)]
		public async GdbusModemSarProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_sar_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemSarProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSar*")]
		public GdbusModemSarProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSar*")]
		public GdbusModemSarProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSarSkeleton", type_id = "mm_gdbus_modem_sar_skeleton_get_type ()")]
	public class GdbusModemSarSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemSar {
		[CCode (has_construct_function = false, type = "MmGdbusModemSar*")]
		public GdbusModemSarSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignalProxy", type_id = "mm_gdbus_modem_signal_proxy_get_type ()")]
	public class GdbusModemSignalProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSignal {
		[CCode (cname = "mm_gdbus_modem_signal_proxy_new", has_construct_function = false)]
		public async GdbusModemSignalProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_signal_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemSignalProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignalSkeleton", type_id = "mm_gdbus_modem_signal_skeleton_get_type ()")]
	public class GdbusModemSignalSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemSignal {
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimpleProxy", type_id = "mm_gdbus_modem_simple_proxy_get_type ()")]
	public class GdbusModemSimpleProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSimple {
		[CCode (cname = "mm_gdbus_modem_simple_proxy_new", has_construct_function = false)]
		public async GdbusModemSimpleProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_simple_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemSimpleProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimpleSkeleton", type_id = "mm_gdbus_modem_simple_skeleton_get_type ()")]
	public class GdbusModemSimpleSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemSimple {
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSkeleton", type_id = "mm_gdbus_modem_skeleton_get_type ()")]
	public class GdbusModemSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem {
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTimeProxy", type_id = "mm_gdbus_modem_time_proxy_get_type ()")]
	public class GdbusModemTimeProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemTime {
		[CCode (cname = "mm_gdbus_modem_time_proxy_new", has_construct_function = false)]
		public async GdbusModemTimeProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_time_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemTimeProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTimeSkeleton", type_id = "mm_gdbus_modem_time_skeleton_get_type ()")]
	public class GdbusModemTimeSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemTime {
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoiceProxy", type_id = "mm_gdbus_modem_voice_proxy_get_type ()")]
	public class GdbusModemVoiceProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemVoice {
		[CCode (cname = "mm_gdbus_modem_voice_proxy_new", has_construct_function = false)]
		public async GdbusModemVoiceProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_voice_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemVoiceProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoiceSkeleton", type_id = "mm_gdbus_modem_voice_skeleton_get_type ()")]
	public class GdbusModemVoiceSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemVoice {
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectManagerClient", type_id = "mm_gdbus_object_manager_client_get_type ()")]
	public class GdbusObjectManagerClient : GLib.DBusObjectManagerClient, GLib.AsyncInitable, GLib.DBusObjectManager, GLib.Initable {
		[CCode (cname = "mm_gdbus_object_manager_client_new", has_construct_function = false)]
		public async GdbusObjectManagerClient (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_object_manager_client_new_for_bus", has_construct_function = false)]
		public async GdbusObjectManagerClient.for_bus (GLib.BusType bus_type, GLib.DBusObjectManagerClientFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "GDBusObjectManager*")]
		public GdbusObjectManagerClient.for_bus_sync (GLib.BusType bus_type, GLib.DBusObjectManagerClientFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static GLib.Type get_proxy_type (GLib.DBusObjectManagerClient manager, string object_path, string? interface_name, void* user_data);
		[CCode (has_construct_function = false, type = "GDBusObjectManager*")]
		public GdbusObjectManagerClient.sync (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectProxy", type_id = "mm_gdbus_object_proxy_get_type ()")]
	public class GdbusObjectProxy : GLib.DBusObjectProxy, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		public GdbusObjectProxy (GLib.DBusConnection connection, string object_path);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectSkeleton", type_id = "mm_gdbus_object_skeleton_get_type ()")]
	public class GdbusObjectSkeleton : GLib.DBusObjectSkeleton, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		public GdbusObjectSkeleton (string object_path);
		public void set_modem (MM.GdbusModem? interface_);
		public void set_modem3gpp (MM.GdbusModem3gpp? interface_);
		public void set_modem3gpp_profile_manager (MM.GdbusModem3gppProfileManager? interface_);
		public void set_modem3gpp_ussd (MM.GdbusModem3gppUssd? interface_);
		public void set_modem_cdma (MM.GdbusModemCdma? interface_);
		public void set_modem_firmware (MM.GdbusModemFirmware? interface_);
		public void set_modem_location (MM.GdbusModemLocation? interface_);
		public void set_modem_messaging (MM.GdbusModemMessaging? interface_);
		public void set_modem_oma (MM.GdbusModemOma? interface_);
		public void set_modem_sar (MM.GdbusModemSar? interface_);
		public void set_modem_signal (MM.GdbusModemSignal? interface_);
		public void set_modem_simple (MM.GdbusModemSimple? interface_);
		public void set_modem_time (MM.GdbusModemTime? interface_);
		public void set_modem_voice (MM.GdbusModemVoice? interface_);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1Proxy", type_id = "mm_gdbus_org_freedesktop_modem_manager1_proxy_get_type ()")]
	public class GdbusOrgFreedesktopModemManager1Proxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusOrgFreedesktopModemManager1 {
		[CCode (cname = "mm_gdbus_org_freedesktop_modem_manager1_proxy_new", has_construct_function = false)]
		public async GdbusOrgFreedesktopModemManager1Proxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusOrgFreedesktopModemManager1Proxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Proxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Proxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1Skeleton", type_id = "mm_gdbus_org_freedesktop_modem_manager1_skeleton_get_type ()")]
	public class GdbusOrgFreedesktopModemManager1Skeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusOrgFreedesktopModemManager1 {
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Skeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSimProxy", type_id = "mm_gdbus_sim_proxy_get_type ()")]
	public class GdbusSimProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSim {
		[CCode (cname = "mm_gdbus_sim_proxy_new", has_construct_function = false)]
		public async GdbusSimProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_sim_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusSimProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSimSkeleton", type_id = "mm_gdbus_sim_skeleton_get_type ()")]
	public class GdbusSimSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusSim {
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSmsProxy", type_id = "mm_gdbus_sms_proxy_get_type ()")]
	public class GdbusSmsProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSms {
		[CCode (cname = "mm_gdbus_sms_proxy_new", has_construct_function = false)]
		public async GdbusSmsProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_sms_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusSmsProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSmsSkeleton", type_id = "mm_gdbus_sms_skeleton_get_type ()")]
	public class GdbusSmsSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusSms {
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_kernel_event_properties_get_type ()")]
	public class KernelEventProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.8")]
		public KernelEventProperties ();
		[Version (since = "1.8")]
		public unowned string get_action ();
		[Version (since = "1.8")]
		public unowned string get_name ();
		[Version (since = "1.8")]
		public unowned string get_subsystem ();
		[Version (since = "1.8")]
		public unowned string get_uid ();
		[Version (since = "1.8")]
		public void set_action (string action);
		[Version (since = "1.8")]
		public void set_name (string name);
		[Version (since = "1.8")]
		public void set_subsystem (string subsystem);
		[Version (since = "1.8")]
		public void set_uid (string uid);
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "location_3gpp", type_id = "mm_location_3gpp_get_type ()")]
	public class Location3gpp : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Location3gpp ();
		[Version (since = "1.0")]
		public ulong get_cell_id ();
		[Version (since = "1.0")]
		public ulong get_location_area_code ();
		[Version (since = "1.0")]
		public uint get_mobile_country_code ();
		[Version (deprecated = true, deprecated_since = "1.18.0.", since = "1.0")]
		public uint get_mobile_network_code ();
		[Version (since = "1.18")]
		public unowned string get_operator_code ();
		[Version (since = "1.10")]
		public ulong get_tracking_area_code ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_cdma_bs_get_type ()")]
	public class LocationCdmaBs : GLib.Object {
		[CCode (has_construct_function = false)]
		protected LocationCdmaBs ();
		[Version (since = "1.0")]
		public double get_latitude ();
		[Version (since = "1.0")]
		public double get_longitude ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_gps_nmea_get_type ()")]
	public class LocationGpsNmea : GLib.Object {
		[CCode (has_construct_function = false)]
		protected LocationGpsNmea ();
		[Version (deprecated = true, deprecated_since = "1.14", since = "1.0")]
		public string build_full ();
		[Version (since = "1.0")]
		public unowned string get_trace (string trace_type);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.14")]
		public string[] get_traces ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_gps_raw_get_type ()")]
	public class LocationGpsRaw : GLib.Object {
		[CCode (has_construct_function = false)]
		protected LocationGpsRaw ();
		[Version (since = "1.0")]
		public double get_altitude ();
		[Version (since = "1.0")]
		public double get_latitude ();
		[Version (since = "1.0")]
		public double get_longitude ();
		[Version (since = "1.0")]
		public unowned string get_utc_time ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_manager_get_type ()")]
	public class Manager : MM.GdbusObjectManagerClient, GLib.AsyncInitable, GLib.DBusObjectManager, GLib.Initable {
		[CCode (cname = "mm_manager_new", has_construct_function = false)]
		[Version (since = "1.0")]
		public async Manager (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public GLib.DBusProxy get_proxy ();
		[Version (since = "1.0")]
		public unowned string get_version ();
		[Version (since = "1.10")]
		public async bool inhibit_device (string uid, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.10")]
		public bool inhibit_device_sync (string uid, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public unowned GLib.DBusProxy peek_proxy ();
		[Version (since = "1.8")]
		public async bool report_kernel_event (MM.KernelEventProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool report_kernel_event_sync (MM.KernelEventProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool scan_devices (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool scan_devices_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool set_logging (string level, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_logging_sync (string level, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public Manager.sync (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.10")]
		public async bool uninhibit_device (string uid, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.10")]
		public bool uninhibit_device_sync (string uid, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_get_type ()")]
	public class Modem : MM.GdbusModemProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem {
		[CCode (has_construct_function = false)]
		protected Modem ();
		[Version (since = "1.0")]
		public async string command (string cmd, uint timeout, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public string command_sync (string cmd, uint timeout, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async MM.Bearer create_bearer (MM.BearerProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.Bearer create_bearer_sync (MM.BearerProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool delete_bearer (string bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool delete_bearer_sync (string bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool disable (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool disable_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public string[] dup_bearer_paths ();
		[Version (since = "1.12")]
		public string dup_carrier_configuration ();
		[Version (since = "1.12")]
		public string dup_carrier_configuration_revision ();
		[Version (since = "1.0")]
		public string dup_device ();
		[Version (since = "1.0")]
		public string dup_device_identifier ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public string[] dup_drivers ();
		[Version (since = "1.0")]
		public string dup_equipment_identifier ();
		[Version (since = "1.8")]
		public string dup_hardware_revision ();
		[Version (since = "1.0")]
		public string dup_manufacturer ();
		[Version (since = "1.0")]
		public string dup_model ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public string[] dup_own_numbers ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public string dup_plugin ();
		[Version (since = "1.0")]
		public string dup_primary_port ();
		[Version (since = "1.0")]
		public string dup_revision ();
		[Version (since = "1.0")]
		public string dup_sim_path ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.16")]
		public string[] dup_sim_slot_paths ();
		[Version (since = "1.0")]
		public async bool enable (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool enable_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool factory_reset (string code, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool factory_reset_sync (string code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.ModemAccessTechnology get_access_technologies ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public unowned string[] get_bearer_paths ();
		[Version (since = "1.12")]
		public unowned string get_carrier_configuration ();
		[Version (since = "1.12")]
		public unowned string get_carrier_configuration_revision ();
		[Version (since = "1.20")]
		public async GLib.List<MM.CellInfo> get_cell_info (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public GLib.List<MM.CellInfo> get_cell_info_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public bool get_current_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		[Version (since = "1.0")]
		public MM.ModemCapability get_current_capabilities ();
		[Version (since = "1.0")]
		public bool get_current_modes (out MM.ModemMode allowed, out MM.ModemMode preferred);
		[Version (since = "1.0")]
		public unowned string get_device ();
		[Version (since = "1.0")]
		public unowned string get_device_identifier ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.0")]
		public unowned string[] get_drivers ();
		[Version (since = "1.0")]
		public unowned string get_equipment_identifier ();
		[Version (since = "1.8")]
		public unowned string get_hardware_revision ();
		[Version (since = "1.0")]
		public unowned string get_manufacturer ();
		[Version (since = "1.0")]
		public uint get_max_active_bearers ();
		[Version (since = "1.18")]
		public uint get_max_active_multiplexed_bearers ();
		[Version (deprecated = true, deprecated_since = "1.18.", since = "1.0")]
		public uint get_max_bearers ();
		[Version (since = "1.0")]
		public unowned string get_model ();
		[Version (deprecated = true, deprecated_since = "1.18", since = "1.2")]
		public static bool get_pending_network_initiated_sessions (MM.ModemOma self, [CCode (array_length_cname = "n_sessions", array_length_pos = 2.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		[Version (since = "1.0")]
		public unowned string get_plugin ();
		[Version (since = "1.0")]
		public bool get_ports ([CCode (array_length_cname = "n_ports", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemPortInfo[] ports);
		[Version (since = "1.0")]
		public MM.ModemPowerState get_power_state ();
		[Version (since = "1.0")]
		public unowned string get_primary_port ();
		[Version (since = "1.16")]
		public uint get_primary_sim_slot ();
		[Version (since = "1.0")]
		public unowned string get_revision ();
		[Version (since = "1.0")]
		public uint get_signal_quality (out bool recent);
		[Version (since = "1.0")]
		public async MM.Sim get_sim (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.16")]
		public unowned string[] get_sim_slot_paths ();
		[Version (since = "1.0")]
		public MM.Sim get_sim_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.ModemState get_state ();
		[Version (since = "1.0")]
		public MM.ModemStateFailedReason get_state_failed_reason ();
		[Version (since = "1.0")]
		public bool get_supported_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		[Version (since = "1.0")]
		public bool get_supported_capabilities ([CCode (array_length_cname = "n_capabilities", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemCapability[] capabilities);
		[Version (since = "1.0")]
		public MM.BearerIpFamily get_supported_ip_families ();
		[Version (since = "1.0")]
		public bool get_supported_modes ([CCode (array_length_cname = "n_modes", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemModeCombination[] modes);
		[Version (since = "1.0")]
		public MM.ModemLock get_unlock_required ();
		[Version (since = "1.0")]
		public MM.UnlockRetries get_unlock_retries ();
		[Version (since = "1.0")]
		public async GLib.List<MM.Bearer> list_bearers (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public GLib.List<MM.Bearer> list_bearers_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.16")]
		public async GLib.GenericArray<MM.Sim> list_sim_slots (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.16")]
		public GLib.GenericArray<MM.Sim> list_sim_slots_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public bool peek_current_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		[Version (deprecated = true, deprecated_since = "1.18", since = "1.2")]
		public static bool peek_pending_network_initiated_sessions (MM.ModemOma self, [CCode (array_length_cname = "n_sessions", array_length_pos = 2.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		[Version (since = "1.0")]
		public bool peek_ports ([CCode (array_length_cname = "n_ports", array_length_pos = 1.1, array_length_type = "guint")] out unowned MM.ModemPortInfo[] ports);
		[Version (since = "1.0")]
		public bool peek_supported_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		[Version (since = "1.0")]
		public bool peek_supported_capabilities ([CCode (array_length_cname = "n_capabilities", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemCapability[] capabilities);
		[Version (since = "1.0")]
		public bool peek_supported_modes ([CCode (array_length_cname = "n_modes", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemModeCombination[] modes);
		[Version (since = "1.0")]
		public unowned MM.UnlockRetries peek_unlock_retries ();
		[Version (since = "1.0")]
		public async bool reset (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool reset_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool set_current_bands (MM.ModemBand bands, uint n_bands, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_current_bands_sync (MM.ModemBand bands, uint n_bands, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool set_current_capabilities (MM.ModemCapability capabilities, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_current_capabilities_sync (MM.ModemCapability capabilities, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool set_current_modes (MM.ModemMode modes, MM.ModemMode preferred, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_current_modes_sync (MM.ModemMode modes, MM.ModemMode preferred, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool set_power_state (MM.ModemPowerState state, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_power_state_sync (MM.ModemPowerState state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.16")]
		public async bool set_primary_sim_slot (uint sim_slot, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.16")]
		public bool set_primary_sim_slot_sync (uint sim_slot, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "modem_3gpp", type_id = "mm_modem_3gpp_get_type ()")]
	public class Modem3gpp : MM.GdbusModem3gppProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gpp {
		[CCode (has_construct_function = false)]
		protected Modem3gpp ();
		[Version (since = "1.20")]
		public async bool disable_facility_lock (MM.Modem3gppFacility facility, string control_key, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool disable_facility_lock_sync (MM.Modem3gppFacility facility, string control_key, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (replacement = "Modem3gppDrxCycle.get_string")]
		public static unowned string drx_cycle_get_string (MM.Modem3gppDrxCycle val);
		[Version (since = "1.0")]
		public string dup_imei ();
		[Version (since = "1.10")]
		public string dup_initial_eps_bearer_path ();
		[Version (since = "1.0")]
		public string dup_operator_code ();
		[Version (since = "1.0")]
		public string dup_operator_name ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (replacement = "Modem3gppEpsUeModeOperation.get_string")]
		public static unowned string eps_ue_mode_operation_get_string (MM.Modem3gppEpsUeModeOperation val);
		[Version (replacement = "Modem3gppFacility.build_string_from_mask")]
		public static string facility_build_string_from_mask (MM.Modem3gppFacility mask);
		[Version (since = "1.0")]
		public MM.Modem3gppFacility get_enabled_facility_locks ();
		[Version (since = "1.8")]
		public MM.Modem3gppEpsUeModeOperation get_eps_ue_mode_operation ();
		[Version (since = "1.0")]
		public unowned string get_imei ();
		[Version (since = "1.10")]
		public async MM.Bearer get_initial_eps_bearer (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.10")]
		public MM.BearerProperties get_initial_eps_bearer_settings ();
		[Version (since = "1.10")]
		public MM.Bearer get_initial_eps_bearer_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public MM.Nr5gRegistrationSettings get_nr5g_registration_settings ();
		[Version (since = "1.0")]
		public unowned string get_operator_code ();
		[Version (since = "1.0")]
		public unowned string get_operator_name ();
		[Version (since = "1.20")]
		public MM.Modem3gppPacketServiceState get_packet_service_state ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.10")]
		public GLib.List<MM.Pco> get_pco ();
		[Version (since = "1.0")]
		public MM.Modem3gppRegistrationState get_registration_state ();
		[Version (deprecated = true, deprecated_since = "1.10.0.", since = "1.0")]
		public MM.Modem3gppSubscriptionState get_subscription_state ();
		[Version (replacement = "Modem3gppMicoMode.get_string")]
		public static unowned string mico_mode_get_string (MM.Modem3gppMicoMode val);
		[Version (replacement = "Modem3gppPacketServiceState.get_string")]
		public static unowned string packet_service_state_get_string (MM.Modem3gppPacketServiceState val);
		[Version (since = "1.10")]
		public unowned MM.BearerProperties peek_initial_eps_bearer_settings ();
		[Version (since = "1.20")]
		public unowned MM.Nr5gRegistrationSettings peek_nr5g_registration_settings ();
		[Version (since = "1.0")]
		public async bool register (string network_id, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool register_sync (string network_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (replacement = "Modem3gppRegistrationState.get_string")]
		public static unowned string registration_state_get_string (MM.Modem3gppRegistrationState val);
		[Version (since = "1.0")]
		public async GLib.List<MM.Modem3gppNetwork> scan (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public GLib.List<MM.Modem3gppNetwork> scan_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.22")]
		public async bool set_carrier_lock ([CCode (array_length_cname = "data_size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.22")]
		public bool set_carrier_lock_sync ([CCode (array_length_cname = "data_size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.8")]
		public async bool set_eps_ue_mode_operation (MM.Modem3gppEpsUeModeOperation mode, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool set_eps_ue_mode_operation_sync (MM.Modem3gppEpsUeModeOperation mode, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.10")]
		public async bool set_initial_eps_bearer_settings (MM.BearerProperties config, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.10")]
		public bool set_initial_eps_bearer_settings_sync (MM.BearerProperties config, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public async bool set_nr5g_registration_settings (MM.Nr5gRegistrationSettings settings, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool set_nr5g_registration_settings_sync (MM.Nr5gRegistrationSettings settings, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public async bool set_packet_service_state (MM.Modem3gppPacketServiceState state, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool set_packet_service_state_sync (MM.Modem3gppPacketServiceState state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (replacement = "Modem3gppSubscriptionState.get_string")]
		public static unowned string subscription_state_get_string (MM.Modem3gppSubscriptionState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", lower_case_csuffix = "modem_3gpp_network", type_id = "mm_modem_3gpp_network_get_type ()")]
	[Compact]
	public class Modem3gppNetwork {
		[Version (replacement = "Modem3gppNetworkAvailability.get_string")]
		public static unowned string availability_get_string (MM.Modem3gppNetworkAvailability val);
		[Version (since = "1.0")]
		public void free ();
		[Version (since = "1.0")]
		public MM.ModemAccessTechnology get_access_technology ();
		[Version (since = "1.0")]
		public MM.Modem3gppNetworkAvailability get_availability ();
		[Version (since = "1.0")]
		public unowned string get_operator_code ();
		[Version (since = "1.0")]
		public unowned string get_operator_long ();
		[Version (since = "1.0")]
		public unowned string get_operator_short ();
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "modem_3gpp_profile_manager", type_id = "mm_modem_3gpp_profile_manager_get_type ()")]
	public class Modem3gppProfileManager : MM.GdbusModem3gppProfileManagerProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppProfileManager {
		[CCode (has_construct_function = false)]
		protected Modem3gppProfileManager ();
		[Version (since = "1.18")]
		public async bool @delete (MM.3gppProfile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.18")]
		public bool delete_sync (MM.3gppProfile profile, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public string dup_index_field ();
		[Version (since = "1.18")]
		public string dup_path ();
		[Version (since = "1.20")]
		public unowned string get_index_field ();
		[Version (since = "1.18")]
		public unowned string get_path ();
		[Version (since = "1.18")]
		public async bool list (GLib.Cancellable? cancellable, out GLib.List<MM.3gppProfile> profiles) throws GLib.Error;
		[Version (since = "1.18")]
		public bool list_sync (GLib.Cancellable? cancellable, out GLib.List<MM.3gppProfile> profiles) throws GLib.Error;
		[Version (since = "1.18")]
		public async MM.3gppProfile @set (MM.3gppProfile requested, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.18")]
		public MM.3gppProfile set_sync (MM.3gppProfile requested, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "modem_3gpp_ussd", type_id = "mm_modem_3gpp_ussd_get_type ()")]
	public class Modem3gppUssd : MM.GdbusModem3gppUssdProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppUssd {
		[CCode (has_construct_function = false)]
		protected Modem3gppUssd ();
		[Version (since = "1.0")]
		public async bool cancel (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool cancel_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public string dup_network_notification ();
		[Version (since = "1.0")]
		public string dup_network_request ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public unowned string get_network_notification ();
		[Version (since = "1.0")]
		public unowned string get_network_request ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public MM.Modem3gppUssdSessionState get_state ();
		[Version (since = "1.0")]
		public async string initiate (string command, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public string initiate_sync (string command, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async string respond (string response, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public string respond_sync (string response, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (replacement = "Modem3gppUssdSessionState.get_string")]
		public static unowned string session_state_get_string (MM.Modem3gppUssdSessionState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_cdma_get_type ()")]
	public class ModemCdma : MM.GdbusModemCdmaProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemCdma {
		[CCode (has_construct_function = false)]
		protected ModemCdma ();
		[Version (since = "1.0")]
		public async bool activate (string carrier, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool activate_manual (MM.CdmaManualActivationProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool activate_manual_sync (MM.CdmaManualActivationProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public bool activate_sync (string carrier, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public string dup_esn ();
		[Version (since = "1.0")]
		public string dup_meid ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public MM.ModemCdmaActivationState get_activation_state ();
		[Version (since = "1.0")]
		public MM.ModemCdmaRegistrationState get_cdma1x_registration_state ();
		[Version (since = "1.0")]
		public unowned string get_esn ();
		[Version (since = "1.0")]
		public MM.ModemCdmaRegistrationState get_evdo_registration_state ();
		[Version (since = "1.0")]
		public unowned string get_meid ();
		[Version (since = "1.0")]
		public uint get_nid ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public uint get_sid ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_firmware_get_type ()")]
	public class ModemFirmware : MM.GdbusModemFirmwareProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemFirmware {
		[CCode (has_construct_function = false)]
		protected ModemFirmware ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.10")]
		public MM.FirmwareUpdateSettings get_update_settings ();
		[Version (since = "1.0")]
		public async bool list (GLib.Cancellable? cancellable, out MM.FirmwareProperties selected, out GLib.List<MM.FirmwareProperties> installed) throws GLib.Error;
		[Version (since = "1.0")]
		public bool list_sync (out MM.FirmwareProperties selected, out GLib.List<MM.FirmwareProperties> installed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.10")]
		public unowned MM.FirmwareUpdateSettings peek_update_settings ();
		[Version (since = "1.0")]
		public async bool select (string unique_id, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool select_sync (string unique_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_location_get_type ()")]
	public class ModemLocation : MM.GdbusModemLocationProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemLocation {
		[CCode (has_construct_function = false)]
		protected ModemLocation ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.10")]
		public string[] dup_assistance_data_servers ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.6")]
		public string dup_supl_server ();
		[Version (since = "1.0")]
		public async MM.Location3gpp get_3gpp (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.Location3gpp get_3gpp_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.10")]
		public unowned string[] get_assistance_data_servers ();
		[Version (since = "1.0")]
		public MM.ModemLocationSource get_capabilities ();
		[Version (since = "1.0")]
		public async MM.LocationCdmaBs get_cdma_bs (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.LocationCdmaBs get_cdma_bs_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.ModemLocationSource get_enabled ();
		[Version (since = "1.0")]
		public async bool get_full (GLib.Cancellable? cancellable, out MM.Location3gpp location_3gpp, out MM.LocationGpsNmea location_gps_nmea, out MM.LocationGpsRaw location_gps_raw, out MM.LocationCdmaBs location_cdma_bs) throws GLib.Error;
		[Version (since = "1.0")]
		public bool get_full_sync (out MM.Location3gpp location_3gpp, out MM.LocationGpsNmea location_gps_nmea, out MM.LocationGpsRaw location_gps_raw, out MM.LocationCdmaBs location_cdma_bs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async MM.LocationGpsNmea get_gps_nmea (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.LocationGpsNmea get_gps_nmea_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async MM.LocationGpsRaw get_gps_raw (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.LocationGpsRaw get_gps_raw_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public uint get_gps_refresh_rate ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.18")]
		public MM.Location3gpp get_signaled_3gpp ();
		[Version (since = "1.18")]
		public MM.LocationCdmaBs get_signaled_cdma_bs ();
		[Version (since = "1.18")]
		public MM.LocationGpsNmea get_signaled_gps_nmea ();
		[Version (since = "1.18")]
		public MM.LocationGpsRaw get_signaled_gps_raw ();
		[Version (since = "1.6")]
		public unowned string get_supl_server ();
		[Version (since = "1.10")]
		public MM.ModemLocationAssistanceDataType get_supported_assistance_data ();
		[Version (since = "1.10")]
		public async bool inject_assistance_data ([CCode (array_length_cname = "data_size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.10")]
		public bool inject_assistance_data_sync ([CCode (array_length_cname = "data_size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.18")]
		public unowned MM.Location3gpp peek_signaled_3gpp ();
		[Version (since = "1.18")]
		public unowned MM.LocationCdmaBs peek_signaled_cdma_bs ();
		[Version (since = "1.18")]
		public unowned MM.LocationGpsNmea peek_signaled_gps_nmea ();
		[Version (since = "1.18")]
		public unowned MM.LocationGpsRaw peek_signaled_gps_raw ();
		[Version (since = "1.0")]
		public async bool set_gps_refresh_rate (uint rate, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool set_gps_refresh_rate_sync (uint rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public async bool set_supl_server (string supl, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool set_supl_server_sync (string supl, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool setup (MM.ModemLocationSource sources, bool signal_location, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool setup_sync (MM.ModemLocationSource sources, bool signal_location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public bool signals_location ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_messaging_get_type ()")]
	public class ModemMessaging : MM.GdbusModemMessagingProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemMessaging {
		[CCode (has_construct_function = false)]
		protected ModemMessaging ();
		[Version (since = "1.0")]
		public async MM.Sms create (MM.SmsProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.Sms create_sync (MM.SmsProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool @delete (string sms, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool delete_sync (string sms, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public MM.SmsStorage get_default_storage ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public bool get_supported_storages ([CCode (array_length_cname = "n_storages", array_length_pos = 1.1, array_length_type = "guint")] out MM.SmsStorage[] storages);
		[Version (since = "1.0")]
		public async GLib.List<MM.Sms> list (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public GLib.List<MM.Sms> list_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public bool peek_supported_storages (out MM.SmsStorage storages, out uint n_storages);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_oma_get_type ()")]
	public class ModemOma : MM.GdbusModemOmaProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemOma {
		[CCode (has_construct_function = false)]
		protected ModemOma ();
		[Version (since = "1.2")]
		public async bool accept_network_initiated_session (uint session_id, bool accept, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.2")]
		public bool accept_network_initiated_session_sync (uint session_id, bool accept, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.2")]
		public async bool cancel_session (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.2")]
		public bool cancel_session_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.2")]
		public string dup_path ();
		[Version (since = "1.2")]
		public MM.OmaFeature get_features ();
		[Version (since = "1.2")]
		public unowned string get_path ();
		[Version (since = "1.18")]
		public bool get_pending_network_initiated_sessions ([CCode (array_length_cname = "n_sessions", array_length_pos = 1.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		[Version (since = "1.2")]
		public MM.OmaSessionState get_session_state ();
		[Version (since = "1.2")]
		public MM.OmaSessionType get_session_type ();
		[Version (since = "1.18")]
		public bool peek_pending_network_initiated_sessions ([CCode (array_length_cname = "n_sessions", array_length_pos = 1.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		[Version (since = "1.2")]
		public async bool setup (MM.OmaFeature features, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.2")]
		public bool setup_sync (MM.OmaFeature features, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.2")]
		public async bool start_client_initiated_session (MM.OmaSessionType session_type, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.2")]
		public bool start_client_initiated_session_sync (MM.OmaSessionType session_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_sar_get_type ()")]
	public class ModemSar : MM.GdbusModemSarProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSar {
		[CCode (has_construct_function = false)]
		protected ModemSar ();
		[Version (since = "1.20")]
		public string dup_path ();
		[Version (since = "1.20")]
		public async bool enable (bool enable, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool enable_sync (bool enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public unowned string get_path ();
		[Version (since = "1.20")]
		public uint get_power_level ();
		[Version (since = "1.20")]
		public bool get_state ();
		[Version (since = "1.20")]
		public async bool set_power_level (uint level, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool set_power_level_sync (uint level, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_signal_get_type ()")]
	public class ModemSignal : MM.GdbusModemSignalProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSignal {
		[CCode (has_construct_function = false)]
		protected ModemSignal ();
		[Version (since = "1.2")]
		public string dup_path ();
		[Version (since = "1.2")]
		public MM.Signal get_cdma ();
		[Version (since = "1.20")]
		public bool get_error_rate_threshold ();
		[Version (since = "1.2")]
		public MM.Signal get_evdo ();
		[Version (since = "1.2")]
		public MM.Signal get_gsm ();
		[Version (since = "1.2")]
		public MM.Signal get_lte ();
		[Version (since = "1.16")]
		public MM.Signal get_nr5g ();
		[Version (since = "1.2")]
		public unowned string get_path ();
		[Version (since = "1.2")]
		public uint get_rate ();
		[Version (since = "1.20")]
		public uint get_rssi_threshold ();
		[Version (since = "1.2")]
		public MM.Signal get_umts ();
		[Version (since = "1.2")]
		public unowned MM.Signal peek_cdma ();
		[Version (since = "1.2")]
		public unowned MM.Signal peek_evdo ();
		[Version (since = "1.2")]
		public unowned MM.Signal peek_gsm ();
		[Version (since = "1.2")]
		public unowned MM.Signal peek_lte ();
		[Version (since = "1.16")]
		public unowned MM.Signal peek_nr5g ();
		[Version (since = "1.2")]
		public unowned MM.Signal peek_umts ();
		[Version (since = "1.2")]
		public async bool setup (uint rate, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.2")]
		public bool setup_sync (uint rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.20")]
		public async bool setup_thresholds (MM.SignalThresholdProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.20")]
		public bool setup_thresholds_sync (MM.SignalThresholdProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_simple_get_type ()")]
	public class ModemSimple : MM.GdbusModemSimpleProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSimple {
		[CCode (has_construct_function = false)]
		protected ModemSimple ();
		[Version (since = "1.0")]
		public async MM.Bearer connect (MM.SimpleConnectProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.Bearer connect_sync (MM.SimpleConnectProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool disconnect (string? bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool disconnect_sync (string? bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public async MM.SimpleStatus get_status (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.SimpleStatus get_status_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_time_get_type ()")]
	public class ModemTime : MM.GdbusModemTimeProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemTime {
		[CCode (has_construct_function = false)]
		protected ModemTime ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public async string get_network_time (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public string get_network_time_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public MM.NetworkTimezone get_network_timezone ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public unowned MM.NetworkTimezone peek_network_timezone ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_voice_get_type ()")]
	public class ModemVoice : MM.GdbusModemVoiceProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemVoice {
		[CCode (has_construct_function = false)]
		protected ModemVoice ();
		[Version (since = "1.12")]
		public async bool call_waiting_query (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool call_waiting_query_sync (GLib.Cancellable? cancellable, bool status) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool call_waiting_setup (bool enable, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool call_waiting_setup_sync (bool enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public async MM.Call create_call (MM.CallProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public MM.Call create_call_sync (MM.CallProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public async bool delete_call (string call, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public bool delete_call_sync (string call, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public string dup_path ();
		[Version (since = "1.12")]
		public bool get_emergency_only ();
		[Version (since = "1.6")]
		public unowned string get_path ();
		[Version (since = "1.12")]
		public async bool hangup_all (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool hangup_all_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool hangup_and_accept (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool hangup_and_accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool hold_and_accept (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool hold_and_accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.6")]
		public async GLib.List<MM.Call> list_calls (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.6")]
		public GLib.List<MM.Call> list_calls_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.12")]
		public async bool transfer (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool transfer_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_network_timezone_get_type ()")]
	public class NetworkTimezone : GLib.Object {
		[CCode (has_construct_function = false)]
		protected NetworkTimezone ();
		[Version (since = "1.0")]
		public int32 get_dst_offset ();
		[Version (since = "1.0")]
		public int32 get_leap_seconds ();
		[Version (since = "1.0")]
		public int32 get_offset ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_nr5g_registration_settings_get_type ()")]
	public class Nr5gRegistrationSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.20")]
		public Nr5gRegistrationSettings ();
		[Version (since = "1.20")]
		public MM.Modem3gppDrxCycle get_drx_cycle ();
		[Version (since = "1.20")]
		public MM.Modem3gppMicoMode get_mico_mode ();
		[Version (since = "1.20")]
		public void set_drx_cycle (MM.Modem3gppDrxCycle drx_cycle);
		[Version (since = "1.20")]
		public void set_mico_mode (MM.Modem3gppMicoMode mico_mode);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_object_get_type ()")]
	public class Object : MM.GdbusObjectProxy, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		protected Object ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public MM.Modem get_modem ();
		[Version (since = "1.0")]
		public MM.Modem3gpp get_modem_3gpp ();
		[Version (since = "1.18")]
		public MM.Modem3gppProfileManager get_modem_3gpp_profile_manager ();
		[Version (since = "1.0")]
		public MM.Modem3gppUssd get_modem_3gpp_ussd ();
		[Version (since = "1.0")]
		public MM.ModemCdma get_modem_cdma ();
		[Version (since = "1.0")]
		public MM.ModemFirmware get_modem_firmware ();
		[Version (since = "1.0")]
		public MM.ModemLocation get_modem_location ();
		[Version (since = "1.0")]
		public MM.ModemMessaging get_modem_messaging ();
		[Version (since = "1.2")]
		public MM.ModemOma get_modem_oma ();
		[Version (since = "1.20")]
		public MM.ModemSar get_modem_sar ();
		[Version (since = "1.2")]
		public MM.ModemSignal get_modem_signal ();
		[Version (since = "1.0")]
		public MM.ModemSimple get_modem_simple ();
		[Version (since = "1.0")]
		public MM.ModemTime get_modem_time ();
		[Version (since = "1.6")]
		public MM.ModemVoice get_modem_voice ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_pco_get_type ()")]
	public class Pco : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Pco ();
		[Version (since = "1.10")]
		public uint8 get_data (out size_t data_size);
		[Version (since = "1.10")]
		public uint32 get_session_id ();
		[Version (since = "1.10")]
		public bool is_complete ();
		[Version (deprecated = true, deprecated_since = "1.12.0", since = "1.10")]
		public static void list_free (owned GLib.List<MM.Pco> pco_list);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_signal_get_type ()")]
	public class Signal : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Signal ();
		[Version (since = "1.2")]
		public double get_ecio ();
		[Version (since = "1.20")]
		public double get_error_rate ();
		[Version (since = "1.2")]
		public double get_io ();
		[Version (since = "1.2")]
		public double get_rscp ();
		[Version (since = "1.2")]
		public double get_rsrp ();
		[Version (since = "1.2")]
		public double get_rsrq ();
		[Version (since = "1.2")]
		public double get_rssi ();
		[Version (since = "1.2")]
		public double get_sinr ();
		[Version (since = "1.2")]
		public double get_snr ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_signal_threshold_properties_get_type ()")]
	public class SignalThresholdProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.20")]
		public SignalThresholdProperties ();
		[Version (since = "1.20")]
		public bool get_error_rate ();
		[Version (since = "1.20")]
		public uint get_rssi ();
		[Version (since = "1.20")]
		public void set_error_rate (bool error_rate_threshold);
		[Version (since = "1.20")]
		public void set_rssi (uint rssi_threshold);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sim_get_type ()")]
	public class Sim : MM.GdbusSimProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSim {
		[CCode (has_construct_function = false)]
		protected Sim ();
		[Version (since = "1.0")]
		public async bool change_pin (string old_pin, string new_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool change_pin_sync (string old_pin, string new_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool disable_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool disable_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.16")]
		public string dup_eid ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.12")]
		public string[] dup_emergency_numbers ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.20")]
		public uint8[] dup_gid1 ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.20")]
		public uint8[] dup_gid2 ();
		[Version (since = "1.0")]
		public string dup_identifier ();
		[Version (since = "1.0")]
		public string dup_imsi ();
		[Version (since = "1.0")]
		public string dup_operator_identifier ();
		[Version (since = "1.0")]
		public string dup_operator_name ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public async bool enable_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool enable_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.16")]
		public bool get_active ();
		[Version (since = "1.16")]
		public unowned string get_eid ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.12")]
		public unowned string[] get_emergency_numbers ();
		[Version (since = "1.20")]
		public MM.SimEsimStatus get_esim_status ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.20")]
		public unowned uint8[] get_gid1 ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.20")]
		public unowned uint8[] get_gid2 ();
		[Version (since = "1.0")]
		public unowned string get_identifier ();
		[Version (since = "1.0")]
		public unowned string get_imsi ();
		[Version (since = "1.0")]
		public unowned string get_operator_identifier ();
		[Version (since = "1.0")]
		public unowned string get_operator_name ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.18")]
		public GLib.List<MM.SimPreferredNetwork> get_preferred_networks ();
		[Version (since = "1.20")]
		public MM.SimRemovability get_removability ();
		[Version (since = "1.20")]
		public MM.SimType get_sim_type ();
		[Version (since = "1.0")]
		public async bool send_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool send_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool send_puk (string puk, string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool send_puk_sync (string puk, string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.18")]
		public async bool set_preferred_networks (GLib.List<MM.SimPreferredNetwork> preferred_networks, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.18")]
		public bool set_preferred_networks_sync (GLib.List<MM.SimPreferredNetwork> preferred_networks, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "mm_sim_preferred_network_get_type ()")]
	[Compact]
	public class SimPreferredNetwork {
		[CCode (has_construct_function = false)]
		[Version (since = "1.18")]
		public SimPreferredNetwork ();
		[Version (since = "1.18")]
		public void free ();
		[Version (since = "1.18")]
		public MM.ModemAccessTechnology get_access_technology ();
		[Version (since = "1.18")]
		public unowned string get_operator_code ();
		[Version (since = "1.18")]
		public void set_access_technology (MM.ModemAccessTechnology access_technology);
		[Version (since = "1.18")]
		public void set_operator_code (string operator_code);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_simple_connect_properties_get_type ()")]
	public class SimpleConnectProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public SimpleConnectProperties ();
		[Version (since = "1.0")]
		public bool get_allow_roaming ();
		[Version (since = "1.0")]
		public MM.BearerAllowedAuth get_allowed_auth ();
		[Version (since = "1.0")]
		public unowned string get_apn ();
		[Version (since = "1.18")]
		public MM.BearerApnType get_apn_type ();
		[Version (since = "1.0")]
		public MM.BearerIpFamily get_ip_type ();
		[Version (since = "1.18")]
		public MM.BearerMultiplexSupport get_multiplex ();
		[Version (deprecated = true, deprecated_since = "1.10.0.", since = "1.0")]
		public unowned string get_number ();
		[Version (since = "1.0")]
		public unowned string get_operator_id ();
		[Version (since = "1.0")]
		public unowned string get_password ();
		[Version (since = "1.0")]
		public unowned string get_pin ();
		[Version (since = "1.18")]
		public int get_profile_id ();
		[Version (since = "1.16")]
		public MM.ModemCdmaRmProtocol get_rm_protocol ();
		[Version (since = "1.0")]
		public unowned string get_user ();
		[Version (since = "1.0")]
		public void set_allow_roaming (bool allow_roaming);
		[Version (since = "1.0")]
		public void set_allowed_auth (MM.BearerAllowedAuth allowed_auth);
		[Version (since = "1.0")]
		public void set_apn (string apn);
		[Version (since = "1.18")]
		public void set_apn_type (MM.BearerApnType apn_type);
		[Version (since = "1.0")]
		public void set_ip_type (MM.BearerIpFamily ip_type);
		[Version (since = "1.18")]
		public void set_multiplex (MM.BearerMultiplexSupport multiplex);
		[Version (deprecated = true, deprecated_since = "1.10.0.", since = "1.0")]
		public void set_number (string number);
		[Version (since = "1.0")]
		public void set_operator_id (string operator_id);
		[Version (since = "1.0")]
		public void set_password (string password);
		[Version (since = "1.0")]
		public void set_pin (string pin);
		[Version (since = "1.18")]
		public void set_profile_id (int profile_id);
		[Version (since = "1.16")]
		public void set_rm_protocol (MM.ModemCdmaRmProtocol protocol);
		[Version (since = "1.0")]
		public void set_user (string user);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_simple_status_get_type ()")]
	public class SimpleStatus : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SimpleStatus ();
		[Version (since = "1.0")]
		public unowned string get_3gpp_operator_code ();
		[Version (since = "1.0")]
		public unowned string get_3gpp_operator_name ();
		[Version (since = "1.0")]
		public MM.Modem3gppRegistrationState get_3gpp_registration_state ();
		[Version (deprecated = true, deprecated_since = "1.12.0.", since = "1.0")]
		public MM.Modem3gppSubscriptionState get_3gpp_subscription_state ();
		[Version (since = "1.0")]
		public MM.ModemAccessTechnology get_access_technologies ();
		[Version (since = "1.0")]
		public MM.ModemCdmaRegistrationState get_cdma_cdma1x_registration_state ();
		[Version (since = "1.0")]
		public MM.ModemCdmaRegistrationState get_cdma_evdo_registration_state ();
		[Version (since = "1.0")]
		public uint get_cdma_nid ();
		[Version (since = "1.0")]
		public uint get_cdma_sid ();
		[Version (since = "1.0")]
		public void get_current_bands (out MM.ModemBand bands, out uint n_bands);
		[Version (since = "1.0")]
		public uint32 get_signal_quality (out bool recent);
		[Version (since = "1.0")]
		public MM.ModemState get_state ();
		[NoAccessorMethod]
		public MM.ModemAccessTechnology access_technologies { get; set; }
		[NoAccessorMethod]
		public MM.ModemCdmaRegistrationState cdma_cdma1x_registration_state { get; set; }
		[NoAccessorMethod]
		public MM.ModemCdmaRegistrationState cdma_evdo_registration_state { get; set; }
		[NoAccessorMethod]
		public uint cdma_nid { get; set; }
		[NoAccessorMethod]
		public uint cdma_sid { get; set; }
		[NoAccessorMethod]
		public GLib.Variant current_bands { owned get; set; }
		[NoAccessorMethod]
		public string m3gpp_operator_code { owned get; set; }
		[NoAccessorMethod]
		public string m3gpp_operator_name { owned get; set; }
		[NoAccessorMethod]
		public MM.Modem3gppRegistrationState m3gpp_registration_state { get; set; }
		[NoAccessorMethod]
		public MM.Modem3gppSubscriptionState m3gpp_subscription_state { get; set; }
		[NoAccessorMethod]
		public GLib.Variant signal_quality { owned get; set; }
		[NoAccessorMethod]
		public MM.ModemState state { get; set; }
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sms_get_type ()")]
	public class Sms : MM.GdbusSmsProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSms {
		[CCode (has_construct_function = false)]
		protected Sms ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.0")]
		public uint8[] dup_data ();
		[Version (since = "1.0")]
		public string dup_discharge_timestamp ();
		[Version (since = "1.0")]
		public string dup_number ();
		[Version (since = "1.0")]
		public string dup_path ();
		[Version (since = "1.0")]
		public string dup_smsc ();
		[Version (since = "1.0")]
		public string dup_text ();
		[Version (since = "1.0")]
		public string dup_timestamp ();
		[Version (since = "1.0")]
		public int get_class ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		[Version (since = "1.0")]
		public unowned uint8[] get_data ();
		[Version (since = "1.0")]
		public bool get_delivery_report_request ();
		[Version (since = "1.0")]
		public uint get_delivery_state ();
		[Version (since = "1.0")]
		public unowned string get_discharge_timestamp ();
		[Version (since = "1.0")]
		public uint get_message_reference ();
		[Version (since = "1.0")]
		public unowned string get_number ();
		[Version (since = "1.0")]
		public unowned string get_path ();
		[Version (since = "1.0")]
		public MM.SmsPduType get_pdu_type ();
		[Version (since = "1.2")]
		public MM.SmsCdmaServiceCategory get_service_category ();
		[Version (since = "1.0")]
		public unowned string get_smsc ();
		[Version (since = "1.0")]
		public MM.SmsState get_state ();
		[Version (since = "1.0")]
		public MM.SmsStorage get_storage ();
		[Version (since = "1.2")]
		public MM.SmsCdmaTeleserviceId get_teleservice_id ();
		[Version (since = "1.0")]
		public unowned string get_text ();
		[Version (since = "1.0")]
		public unowned string get_timestamp ();
		[Version (since = "1.0")]
		public uint get_validity_relative ();
		[Version (since = "1.0")]
		public MM.SmsValidityType get_validity_type ();
		[Version (since = "1.0")]
		public async bool send (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool send_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool store (MM.SmsStorage storage, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool store_sync (MM.SmsStorage storage, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sms_properties_get_type ()")]
	public class SmsProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public SmsProperties ();
		[Version (since = "1.0")]
		public int get_class ();
		[Version (since = "1.0")]
		public uint8 get_data (out size_t data_len);
		[Version (since = "1.0")]
		public GLib.ByteArray get_data_bytearray ();
		[Version (since = "1.0")]
		public bool get_delivery_report_request ();
		[Version (since = "1.0")]
		public unowned string get_number ();
		[Version (since = "1.2")]
		public MM.SmsCdmaServiceCategory get_service_category ();
		[Version (since = "1.0")]
		public unowned string get_smsc ();
		[Version (since = "1.2")]
		public MM.SmsCdmaTeleserviceId get_teleservice_id ();
		[Version (since = "1.0")]
		public unowned string get_text ();
		[Version (since = "1.0")]
		public uint get_validity_relative ();
		[Version (since = "1.0")]
		public MM.SmsValidityType get_validity_type ();
		[Version (since = "1.0")]
		public unowned GLib.ByteArray peek_data_bytearray ();
		[Version (since = "1.0")]
		public void set_class (int message_class);
		[Version (since = "1.0")]
		public void set_data (uint8 data, size_t data_length);
		[Version (since = "1.0")]
		public void set_data_bytearray (GLib.ByteArray data);
		[Version (since = "1.0")]
		public void set_delivery_report_request (bool request);
		[Version (since = "1.0")]
		public void set_number (string number);
		[Version (since = "1.2")]
		public void set_service_category (MM.SmsCdmaServiceCategory service_category);
		[Version (since = "1.0")]
		public void set_smsc (string smsc);
		[Version (since = "1.2")]
		public void set_teleservice_id (MM.SmsCdmaTeleserviceId teleservice_id);
		[Version (since = "1.0")]
		public void set_text (string text);
		[Version (since = "1.0")]
		public void set_validity_relative (uint validity);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_unlock_retries_get_type ()")]
	public class UnlockRetries : GLib.Object {
		[CCode (has_construct_function = false)]
		protected UnlockRetries ();
		[Version (since = "1.0")]
		public void @foreach (MM.UnlockRetriesForeachCb callback);
		[Version (since = "1.0")]
		public uint @get (MM.ModemLock @lock);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearer", type_id = "mm_gdbus_bearer_get_type ()")]
	public interface GdbusBearer : GLib.Object {
		public async bool call_connect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_connect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_disconnect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_disconnect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_connect (owned GLib.DBusMethodInvocation invocation);
		public void complete_disconnect (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint bearer_type { get; set; }
		[NoAccessorMethod]
		public abstract bool connected { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant connection_error { owned get; set; }
		[NoAccessorMethod]
		public abstract string @interface { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ip4_config { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ip6_config { owned get; set; }
		[NoAccessorMethod]
		public abstract uint ip_timeout { get; set; }
		[NoAccessorMethod]
		public abstract bool multiplexed { get; set; }
		[NoAccessorMethod]
		public abstract int profile_id { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant properties { owned get; set; }
		[NoAccessorMethod]
		public abstract bool reload_stats_supported { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant stats { owned get; set; }
		[NoAccessorMethod]
		public abstract bool suspended { get; set; }
		public virtual signal bool handle_connect (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_disconnect (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusCall", type_id = "mm_gdbus_call_get_type ()")]
	public interface GdbusCall : GLib.Object {
		public async bool call_accept (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_deflect (string arg_number, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_deflect_sync (string arg_number, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_hangup (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_hangup_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_join_multiparty (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_join_multiparty_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_leave_multiparty (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_leave_multiparty_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_send_dtmf (string arg_dtmf, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_dtmf_sync (string arg_dtmf, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_start (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_start_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_accept (owned GLib.DBusMethodInvocation invocation);
		public void complete_deflect (owned GLib.DBusMethodInvocation invocation);
		public void complete_hangup (owned GLib.DBusMethodInvocation invocation);
		public void complete_join_multiparty (owned GLib.DBusMethodInvocation invocation);
		public void complete_leave_multiparty (owned GLib.DBusMethodInvocation invocation);
		public void complete_send_dtmf (owned GLib.DBusMethodInvocation invocation);
		public void complete_start (owned GLib.DBusMethodInvocation invocation);
		public void emit_dtmf_received (string arg_dtmf);
		public void emit_state_changed (int arg_old, int arg_new, uint arg_reason);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant audio_format { owned get; set; }
		[NoAccessorMethod]
		public abstract string audio_port { owned get; set; }
		[NoAccessorMethod]
		public abstract int direction { get; set; }
		[NoAccessorMethod]
		public abstract bool multiparty { get; set; }
		[NoAccessorMethod]
		public abstract string number { owned get; set; }
		[NoAccessorMethod]
		public abstract int state { get; set; }
		[NoAccessorMethod]
		public abstract int state_reason { get; set; }
		public virtual signal void dtmf_received (string arg_dtmf);
		public virtual signal bool handle_accept (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_deflect (GLib.DBusMethodInvocation invocation, string arg_number);
		public virtual signal bool handle_hangup (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_join_multiparty (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_leave_multiparty (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_send_dtmf (GLib.DBusMethodInvocation invocation, string arg_dtmf);
		public virtual signal bool handle_start (GLib.DBusMethodInvocation invocation);
		public virtual signal void state_changed (int arg_old, int arg_new, uint arg_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem", type_id = "mm_gdbus_modem_get_type ()")]
	public interface GdbusModem : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_command (string arg_cmd, uint arg_timeout, GLib.Cancellable? cancellable, out string out_response) throws GLib.Error;
		public bool call_command_sync (string arg_cmd, uint arg_timeout, out string out_response, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_create_bearer (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_bearer_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete_bearer (string arg_bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_bearer_sync (string arg_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_enable (bool arg_enable, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_enable_sync (bool arg_enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_factory_reset (string arg_code, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_factory_reset_sync (string arg_code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_get_cell_info (GLib.Cancellable? cancellable, out GLib.Variant out_cell_info) throws GLib.Error;
		public bool call_get_cell_info_sync (out GLib.Variant out_cell_info, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_list_bearers (GLib.Cancellable? cancellable, [CCode (array_length = false, array_null_terminated = true)] out string[] out_bearers) throws GLib.Error;
		public bool call_list_bearers_sync ([CCode (array_length = false, array_null_terminated = true)] out string[] out_bearers, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_reset (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_reset_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_bands (GLib.Variant arg_bands, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_bands_sync (GLib.Variant arg_bands, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_capabilities (uint arg_capabilities, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_capabilities_sync (uint arg_capabilities, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_modes (GLib.Variant arg_modes, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_modes_sync (GLib.Variant arg_modes, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_power_state (uint arg_state, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_power_state_sync (uint arg_state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_primary_sim_slot (uint arg_sim_slot, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_primary_sim_slot_sync (uint arg_sim_slot, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_command (owned GLib.DBusMethodInvocation invocation, string response);
		public void complete_create_bearer (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete_bearer (owned GLib.DBusMethodInvocation invocation);
		public void complete_enable (owned GLib.DBusMethodInvocation invocation);
		public void complete_factory_reset (owned GLib.DBusMethodInvocation invocation);
		public void complete_get_cell_info (owned GLib.DBusMethodInvocation invocation, GLib.Variant cell_info);
		public void complete_list_bearers (owned GLib.DBusMethodInvocation invocation, string bearers);
		public void complete_reset (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_bands (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_capabilities (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_modes (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_power_state (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_primary_sim_slot (owned GLib.DBusMethodInvocation invocation);
		public void emit_state_changed (int arg_old, int arg_new, uint arg_reason);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint access_technologies { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] bearers { owned get; set; }
		[NoAccessorMethod]
		public abstract string carrier_configuration { owned get; set; }
		[NoAccessorMethod]
		public abstract string carrier_configuration_revision { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant current_bands { owned get; set; }
		[NoAccessorMethod]
		public abstract uint current_capabilities { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant current_modes { owned get; set; }
		[NoAccessorMethod]
		public abstract string device { owned get; set; }
		[NoAccessorMethod]
		public abstract string device_identifier { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] drivers { owned get; set; }
		[NoAccessorMethod]
		public abstract string equipment_identifier { owned get; set; }
		[NoAccessorMethod]
		public abstract string hardware_revision { owned get; set; }
		[NoAccessorMethod]
		public abstract string manufacturer { owned get; set; }
		[NoAccessorMethod]
		public abstract uint max_active_bearers { get; set; }
		[NoAccessorMethod]
		public abstract uint max_active_multiplexed_bearers { get; set; }
		[NoAccessorMethod]
		public abstract uint max_bearers { get; set; }
		[NoAccessorMethod]
		public abstract string model { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] own_numbers { owned get; set; }
		[NoAccessorMethod]
		public abstract string plugin { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ports { owned get; set; }
		[NoAccessorMethod]
		public abstract uint power_state { get; set; }
		[NoAccessorMethod]
		public abstract string primary_port { owned get; set; }
		[NoAccessorMethod]
		public abstract uint primary_sim_slot { get; set; }
		[NoAccessorMethod]
		public abstract string revision { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant signal_quality { owned get; set; }
		[NoAccessorMethod]
		public abstract string sim { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] sim_slots { owned get; set; }
		[NoAccessorMethod]
		public abstract int state { get; set; }
		[NoAccessorMethod]
		public abstract uint state_failed_reason { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_bands { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_capabilities { owned get; set; }
		[NoAccessorMethod]
		public abstract uint supported_ip_families { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_modes { owned get; set; }
		[NoAccessorMethod]
		public abstract uint unlock_required { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant unlock_retries { owned get; set; }
		public virtual signal bool handle_command (GLib.DBusMethodInvocation invocation, string arg_cmd, uint arg_timeout);
		public virtual signal bool handle_create_bearer (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete_bearer (GLib.DBusMethodInvocation invocation, string arg_bearer);
		public virtual signal bool handle_enable (GLib.DBusMethodInvocation invocation, bool arg_enable);
		public virtual signal bool handle_factory_reset (GLib.DBusMethodInvocation invocation, string arg_code);
		public virtual signal bool handle_get_cell_info (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_list_bearers (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_reset (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_current_bands (GLib.DBusMethodInvocation invocation, GLib.Variant arg_bands);
		public virtual signal bool handle_set_current_capabilities (GLib.DBusMethodInvocation invocation, uint arg_capabilities);
		public virtual signal bool handle_set_current_modes (GLib.DBusMethodInvocation invocation, GLib.Variant arg_modes);
		public virtual signal bool handle_set_power_state (GLib.DBusMethodInvocation invocation, uint arg_state);
		public virtual signal bool handle_set_primary_sim_slot (GLib.DBusMethodInvocation invocation, uint arg_sim_slot);
		public virtual signal void state_changed (int arg_old, int arg_new, uint arg_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gpp", type_id = "mm_gdbus_modem3gpp_get_type ()")]
	public interface GdbusModem3gpp : GLib.Object {
		public async bool call_disable_facility_lock (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_disable_facility_lock_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_register (string arg_operator_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_register_sync (string arg_operator_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_scan (GLib.Cancellable? cancellable, out GLib.Variant out_results) throws GLib.Error;
		public bool call_scan_sync (out GLib.Variant out_results, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_carrier_lock (GLib.Variant arg_data, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_carrier_lock_sync (GLib.Variant arg_data, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_eps_ue_mode_operation (uint arg_mode, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_eps_ue_mode_operation_sync (uint arg_mode, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_initial_eps_bearer_settings (GLib.Variant arg_settings, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_initial_eps_bearer_settings_sync (GLib.Variant arg_settings, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_nr5g_registration_settings (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_nr5g_registration_settings_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_packet_service_state (uint arg_state, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_packet_service_state_sync (uint arg_state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_disable_facility_lock (owned GLib.DBusMethodInvocation invocation);
		public void complete_register (owned GLib.DBusMethodInvocation invocation);
		public void complete_scan (owned GLib.DBusMethodInvocation invocation, GLib.Variant results);
		public void complete_set_carrier_lock (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_eps_ue_mode_operation (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_initial_eps_bearer_settings (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_nr5g_registration_settings (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_packet_service_state (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint enabled_facility_locks { get; set; }
		[NoAccessorMethod]
		public abstract uint eps_ue_mode_operation { get; set; }
		[NoAccessorMethod]
		public abstract string imei { owned get; set; }
		[NoAccessorMethod]
		public abstract string initial_eps_bearer { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant initial_eps_bearer_settings { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant nr5g_registration_settings { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_code { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_name { owned get; set; }
		[NoAccessorMethod]
		public abstract uint packet_service_state { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant pco { owned get; set; }
		[NoAccessorMethod]
		public abstract uint registration_state { get; set; }
		[NoAccessorMethod]
		public abstract uint subscription_state { get; set; }
		public virtual signal bool handle_disable_facility_lock (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_register (GLib.DBusMethodInvocation invocation, string arg_operator_id);
		public virtual signal bool handle_scan (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_carrier_lock (GLib.DBusMethodInvocation invocation, GLib.Variant arg_data);
		public virtual signal bool handle_set_eps_ue_mode_operation (GLib.DBusMethodInvocation invocation, uint arg_mode);
		public virtual signal bool handle_set_initial_eps_bearer_settings (GLib.DBusMethodInvocation invocation, GLib.Variant arg_settings);
		public virtual signal bool handle_set_nr5g_registration_settings (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_set_packet_service_state (GLib.DBusMethodInvocation invocation, uint arg_state);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppProfileManager", type_id = "mm_gdbus_modem3gpp_profile_manager_get_type ()")]
	public interface GdbusModem3gppProfileManager : GLib.Object {
		public async bool call_delete (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_list (GLib.Cancellable? cancellable, out GLib.Variant out_profiles) throws GLib.Error;
		public bool call_list_sync (out GLib.Variant out_profiles, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_set (GLib.Variant arg_requested_properties, GLib.Cancellable? cancellable, out GLib.Variant out_stored_properties) throws GLib.Error;
		public bool call_set_sync (GLib.Variant arg_requested_properties, out GLib.Variant out_stored_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_delete (owned GLib.DBusMethodInvocation invocation);
		public void complete_list (owned GLib.DBusMethodInvocation invocation, GLib.Variant profiles);
		public void complete_set (owned GLib.DBusMethodInvocation invocation, GLib.Variant stored_properties);
		public void emit_updated ();
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract string index_field { owned get; set; }
		public virtual signal bool handle_delete (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_list (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set (GLib.DBusMethodInvocation invocation, GLib.Variant arg_requested_properties);
		public virtual signal void updated ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssd", type_id = "mm_gdbus_modem3gpp_ussd_get_type ()")]
	public interface GdbusModem3gppUssd : GLib.Object {
		public async bool call_cancel (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_cancel_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_initiate (string arg_command, GLib.Cancellable? cancellable, out string out_reply) throws GLib.Error;
		public bool call_initiate_sync (string arg_command, out string out_reply, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_respond (string arg_response, GLib.Cancellable? cancellable, out string out_reply) throws GLib.Error;
		public bool call_respond_sync (string arg_response, out string out_reply, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_cancel (owned GLib.DBusMethodInvocation invocation);
		public void complete_initiate (owned GLib.DBusMethodInvocation invocation, string reply);
		public void complete_respond (owned GLib.DBusMethodInvocation invocation, string reply);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract string network_notification { owned get; set; }
		[NoAccessorMethod]
		public abstract string network_request { owned get; set; }
		[NoAccessorMethod]
		public abstract uint state { get; set; }
		public virtual signal bool handle_cancel (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_initiate (GLib.DBusMethodInvocation invocation, string arg_command);
		public virtual signal bool handle_respond (GLib.DBusMethodInvocation invocation, string arg_response);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdma", type_id = "mm_gdbus_modem_cdma_get_type ()")]
	public interface GdbusModemCdma : GLib.Object {
		public async bool call_activate (string arg_carrier_code, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool call_activate_manual (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_activate_manual_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool call_activate_sync (string arg_carrier_code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_activate (owned GLib.DBusMethodInvocation invocation);
		public void complete_activate_manual (owned GLib.DBusMethodInvocation invocation);
		public void emit_activation_state_changed (uint arg_activation_state, uint arg_activation_error, GLib.Variant arg_status_changes);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint activation_state { get; set; }
		[NoAccessorMethod]
		public abstract uint cdma1x_registration_state { get; set; }
		[NoAccessorMethod]
		public abstract string esn { owned get; set; }
		[NoAccessorMethod]
		public abstract uint evdo_registration_state { get; set; }
		[NoAccessorMethod]
		public abstract string meid { owned get; set; }
		[NoAccessorMethod]
		public abstract uint nid { get; set; }
		[NoAccessorMethod]
		public abstract uint sid { get; set; }
		public virtual signal void activation_state_changed (uint arg_activation_state, uint arg_activation_error, GLib.Variant arg_status_changes);
		public virtual signal bool handle_activate (GLib.DBusMethodInvocation invocation, string arg_carrier_code);
		public virtual signal bool handle_activate_manual (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmware", type_id = "mm_gdbus_modem_firmware_get_type ()")]
	public interface GdbusModemFirmware : GLib.Object {
		[CCode (async_result_pos = 3.1)]
		public async bool call_list (GLib.Cancellable? cancellable, out string out_selected, out GLib.Variant out_installed) throws GLib.Error;
		public bool call_list_sync (out string out_selected, out GLib.Variant out_installed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_select (string arg_uniqueid, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_select_sync (string arg_uniqueid, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_list (owned GLib.DBusMethodInvocation invocation, string selected, GLib.Variant installed);
		public void complete_select (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant update_settings { owned get; set; }
		public virtual signal bool handle_list (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_select (GLib.DBusMethodInvocation invocation, string arg_uniqueid);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocation", type_id = "mm_gdbus_modem_location_get_type ()")]
	public interface GdbusModemLocation : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_get_location (GLib.Cancellable? cancellable, out GLib.Variant out_Location) throws GLib.Error;
		public bool call_get_location_sync (out GLib.Variant out_Location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_inject_assistance_data (GLib.Variant arg_data, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_inject_assistance_data_sync (GLib.Variant arg_data, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_gps_refresh_rate (uint arg_rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_gps_refresh_rate_sync (uint arg_rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_supl_server (string arg_supl, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_supl_server_sync (string arg_supl, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_setup (uint arg_sources, bool arg_signal_location, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_sources, bool arg_signal_location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_get_location (owned GLib.DBusMethodInvocation invocation, GLib.Variant Location);
		public void complete_inject_assistance_data (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_gps_refresh_rate (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_supl_server (owned GLib.DBusMethodInvocation invocation);
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] assistance_data_servers { owned get; set; }
		[NoAccessorMethod]
		public abstract uint capabilities { get; set; }
		[NoAccessorMethod]
		public abstract uint enabled { get; set; }
		[NoAccessorMethod]
		public abstract uint gps_refresh_rate { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant location { owned get; set; }
		[NoAccessorMethod]
		public abstract bool signals_location { get; set; }
		[NoAccessorMethod]
		public abstract string supl_server { owned get; set; }
		[NoAccessorMethod]
		public abstract uint supported_assistance_data { get; set; }
		public virtual signal bool handle_get_location (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_inject_assistance_data (GLib.DBusMethodInvocation invocation, GLib.Variant arg_data);
		public virtual signal bool handle_set_gps_refresh_rate (GLib.DBusMethodInvocation invocation, uint arg_rate);
		public virtual signal bool handle_set_supl_server (GLib.DBusMethodInvocation invocation, string arg_supl);
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_sources, bool arg_signal_location);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessaging", type_id = "mm_gdbus_modem_messaging_get_type ()")]
	public interface GdbusModemMessaging : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_create (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete (string arg_path, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_sync (string arg_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_list (GLib.Cancellable? cancellable, [CCode (array_length = false, array_null_terminated = true)] out string[] out_result) throws GLib.Error;
		public bool call_list_sync ([CCode (array_length = false, array_null_terminated = true)] out string[] out_result, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_create (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete (owned GLib.DBusMethodInvocation invocation);
		public void complete_list (owned GLib.DBusMethodInvocation invocation, string result);
		public void emit_added (string arg_path, bool arg_received);
		public void emit_deleted (string arg_path);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint default_storage { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] messages { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_storages { owned get; set; }
		public virtual signal void added (string arg_path, bool arg_received);
		public virtual signal void deleted (string arg_path);
		public virtual signal bool handle_create (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete (GLib.DBusMethodInvocation invocation, string arg_path);
		public virtual signal bool handle_list (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOma", type_id = "mm_gdbus_modem_oma_get_type ()")]
	public interface GdbusModemOma : GLib.Object {
		public async bool call_accept_network_initiated_session (uint arg_session_id, bool arg_accept, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_accept_network_initiated_session_sync (uint arg_session_id, bool arg_accept, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_cancel_session (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_cancel_session_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_setup (uint arg_features, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_features, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_start_client_initiated_session (uint arg_session_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_start_client_initiated_session_sync (uint arg_session_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_accept_network_initiated_session (owned GLib.DBusMethodInvocation invocation);
		public void complete_cancel_session (owned GLib.DBusMethodInvocation invocation);
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public void complete_start_client_initiated_session (owned GLib.DBusMethodInvocation invocation);
		public void emit_session_state_changed (int arg_old_session_state, int arg_new_session_state, uint arg_session_state_failed_reason);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint features { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant pending_network_initiated_sessions { owned get; set; }
		[NoAccessorMethod]
		public abstract int session_state { get; set; }
		[NoAccessorMethod]
		public abstract uint session_type { get; set; }
		public virtual signal bool handle_accept_network_initiated_session (GLib.DBusMethodInvocation invocation, uint arg_session_id, bool arg_accept);
		public virtual signal bool handle_cancel_session (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_features);
		public virtual signal bool handle_start_client_initiated_session (GLib.DBusMethodInvocation invocation, uint arg_session_type);
		public virtual signal void session_state_changed (int arg_old_session_state, int arg_new_session_state, uint arg_session_state_failed_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSar", type_id = "mm_gdbus_modem_sar_get_type ()")]
	public interface GdbusModemSar : GLib.Object {
		public async bool call_enable (bool arg_enable, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_enable_sync (bool arg_enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_power_level (uint arg_level, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_power_level_sync (uint arg_level, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_enable (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_power_level (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint power_level { get; set; }
		[NoAccessorMethod]
		public abstract bool state { get; set; }
		public virtual signal bool handle_enable (GLib.DBusMethodInvocation invocation, bool arg_enable);
		public virtual signal bool handle_set_power_level (GLib.DBusMethodInvocation invocation, uint arg_level);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignal", type_id = "mm_gdbus_modem_signal_get_type ()")]
	public interface GdbusModemSignal : GLib.Object {
		public async bool call_setup (uint arg_rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_setup_thresholds (GLib.Variant arg_settings, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_thresholds_sync (GLib.Variant arg_settings, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public void complete_setup_thresholds (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant cdma { owned get; set; }
		[NoAccessorMethod]
		public abstract bool error_rate_threshold { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant evdo { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant gsm { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant lte { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant nr5g { owned get; set; }
		[NoAccessorMethod]
		public abstract uint rate { get; set; }
		[NoAccessorMethod]
		public abstract uint rssi_threshold { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant umts { owned get; set; }
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_rate);
		public virtual signal bool handle_setup_thresholds (GLib.DBusMethodInvocation invocation, GLib.Variant arg_settings);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimple", type_id = "mm_gdbus_modem_simple_get_type ()")]
	public interface GdbusModemSimple : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_connect (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_bearer) throws GLib.Error;
		public bool call_connect_sync (GLib.Variant arg_properties, out string out_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_disconnect (string arg_bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_disconnect_sync (string arg_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_get_status (GLib.Cancellable? cancellable, out GLib.Variant out_properties) throws GLib.Error;
		public bool call_get_status_sync (out GLib.Variant out_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_connect (owned GLib.DBusMethodInvocation invocation, string bearer);
		public void complete_disconnect (owned GLib.DBusMethodInvocation invocation);
		public void complete_get_status (owned GLib.DBusMethodInvocation invocation, GLib.Variant properties);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		public virtual signal bool handle_connect (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_disconnect (GLib.DBusMethodInvocation invocation, string arg_bearer);
		public virtual signal bool handle_get_status (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTime", type_id = "mm_gdbus_modem_time_get_type ()")]
	public interface GdbusModemTime : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_get_network_time (GLib.Cancellable? cancellable, out string out_time) throws GLib.Error;
		public bool call_get_network_time_sync (out string out_time, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_get_network_time (owned GLib.DBusMethodInvocation invocation, string time);
		public void emit_network_time_changed (string arg_time);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant network_timezone { owned get; set; }
		public virtual signal bool handle_get_network_time (GLib.DBusMethodInvocation invocation);
		public virtual signal void network_time_changed (string arg_time);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoice", type_id = "mm_gdbus_modem_voice_get_type ()")]
	public interface GdbusModemVoice : GLib.Object {
		[CCode (async_result_pos = 2.1)]
		public async bool call_call_waiting_query (GLib.Cancellable? cancellable, out bool out_status) throws GLib.Error;
		public bool call_call_waiting_query_sync (out bool out_status, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_call_waiting_setup (bool arg_enable, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_call_waiting_setup_sync (bool arg_enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_create_call (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_call_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete_call (string arg_path, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_call_sync (string arg_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_hangup_all (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_hangup_all_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_hangup_and_accept (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_hangup_and_accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_hold_and_accept (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_hold_and_accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (async_result_pos = 2.1)]
		public async bool call_list_calls (GLib.Cancellable? cancellable, [CCode (array_length = false, array_null_terminated = true)] out string[] out_result) throws GLib.Error;
		public bool call_list_calls_sync ([CCode (array_length = false, array_null_terminated = true)] out string[] out_result, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_transfer (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_transfer_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_call_waiting_query (owned GLib.DBusMethodInvocation invocation, bool status);
		public void complete_call_waiting_setup (owned GLib.DBusMethodInvocation invocation);
		public void complete_create_call (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete_call (owned GLib.DBusMethodInvocation invocation);
		public void complete_hangup_all (owned GLib.DBusMethodInvocation invocation);
		public void complete_hangup_and_accept (owned GLib.DBusMethodInvocation invocation);
		public void complete_hold_and_accept (owned GLib.DBusMethodInvocation invocation);
		public void complete_list_calls (owned GLib.DBusMethodInvocation invocation, string result);
		public void complete_transfer (owned GLib.DBusMethodInvocation invocation);
		public void emit_call_added (string arg_path);
		public void emit_call_deleted (string arg_path);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] calls { owned get; set; }
		[NoAccessorMethod]
		public abstract bool emergency_only { get; set; }
		public virtual signal void call_added (string arg_path);
		public virtual signal void call_deleted (string arg_path);
		public virtual signal bool handle_call_waiting_query (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_call_waiting_setup (GLib.DBusMethodInvocation invocation, bool arg_enable);
		public virtual signal bool handle_create_call (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete_call (GLib.DBusMethodInvocation invocation, string arg_path);
		public virtual signal bool handle_hangup_all (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_hangup_and_accept (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_hold_and_accept (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_list_calls (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_transfer (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObject", type_id = "mm_gdbus_object_get_type ()")]
	public interface GdbusObject : GLib.DBusObject, GLib.Object {
		public MM.GdbusModem? get_modem ();
		public MM.GdbusModem3gpp? get_modem3gpp ();
		public MM.GdbusModem3gppProfileManager? get_modem3gpp_profile_manager ();
		public MM.GdbusModem3gppUssd? get_modem3gpp_ussd ();
		public MM.GdbusModemCdma? get_modem_cdma ();
		public MM.GdbusModemFirmware? get_modem_firmware ();
		public MM.GdbusModemLocation? get_modem_location ();
		public MM.GdbusModemMessaging? get_modem_messaging ();
		public MM.GdbusModemOma? get_modem_oma ();
		public MM.GdbusModemSar? get_modem_sar ();
		public MM.GdbusModemSignal? get_modem_signal ();
		public MM.GdbusModemSimple? get_modem_simple ();
		public MM.GdbusModemTime? get_modem_time ();
		public MM.GdbusModemVoice? get_modem_voice ();
		[NoAccessorMethod]
		public abstract MM.GdbusModem modem { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModem3gpp modem3gpp { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModem3gppProfileManager modem3gpp_profile_manager { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModem3gppUssd modem3gpp_ussd { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemCdma modem_cdma { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemFirmware modem_firmware { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemLocation modem_location { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemMessaging modem_messaging { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemOma modem_oma { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemSar modem_sar { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemSignal modem_signal { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemSimple modem_simple { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemTime modem_time { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemVoice modem_voice { owned get; set; }
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1", type_id = "mm_gdbus_org_freedesktop_modem_manager1_get_type ()")]
	public interface GdbusOrgFreedesktopModemManager1 : GLib.Object {
		public async bool call_inhibit_device (string arg_uid, bool arg_inhibit, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_inhibit_device_sync (string arg_uid, bool arg_inhibit, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_report_kernel_event (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_report_kernel_event_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_scan_devices (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_scan_devices_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_logging (string arg_level, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_logging_sync (string arg_level, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_inhibit_device (owned GLib.DBusMethodInvocation invocation);
		public void complete_report_kernel_event (owned GLib.DBusMethodInvocation invocation);
		public void complete_scan_devices (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_logging (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract string version { owned get; set; }
		public virtual signal bool handle_inhibit_device (GLib.DBusMethodInvocation invocation, string arg_uid, bool arg_inhibit);
		public virtual signal bool handle_report_kernel_event (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_scan_devices (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_logging (GLib.DBusMethodInvocation invocation, string arg_level);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSim", type_id = "mm_gdbus_sim_get_type ()")]
	public interface GdbusSim : GLib.Object {
		public async bool call_change_pin (string arg_old_pin, string arg_new_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_change_pin_sync (string arg_old_pin, string arg_new_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_enable_pin (string arg_pin, bool arg_enabled, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_enable_pin_sync (string arg_pin, bool arg_enabled, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_send_pin (string arg_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_pin_sync (string arg_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_send_puk (string arg_puk, string arg_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_puk_sync (string arg_puk, string arg_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_preferred_networks (GLib.Variant arg_preferred_networks, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_preferred_networks_sync (GLib.Variant arg_preferred_networks, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_change_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_enable_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_send_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_send_puk (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_preferred_networks (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract bool active { get; set; }
		[NoAccessorMethod]
		public abstract string eid { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] emergency_numbers { owned get; set; }
		[NoAccessorMethod]
		public abstract uint esim_status { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant gid1 { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant gid2 { owned get; set; }
		[NoAccessorMethod]
		public abstract string imsi { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_identifier { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_name { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant preferred_networks { owned get; set; }
		[NoAccessorMethod]
		public abstract uint removability { get; set; }
		[NoAccessorMethod]
		public abstract string sim_identifier { owned get; set; }
		[NoAccessorMethod]
		public abstract uint sim_type { get; set; }
		public virtual signal bool handle_change_pin (GLib.DBusMethodInvocation invocation, string arg_old_pin, string arg_new_pin);
		public virtual signal bool handle_enable_pin (GLib.DBusMethodInvocation invocation, string arg_pin, bool arg_enabled);
		public virtual signal bool handle_send_pin (GLib.DBusMethodInvocation invocation, string arg_pin);
		public virtual signal bool handle_send_puk (GLib.DBusMethodInvocation invocation, string arg_puk, string arg_pin);
		public virtual signal bool handle_set_preferred_networks (GLib.DBusMethodInvocation invocation, GLib.Variant arg_preferred_networks);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSms", type_id = "mm_gdbus_sms_get_type ()")]
	public interface GdbusSms : GLib.Object {
		public async bool call_send (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_store (uint arg_storage, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_store_sync (uint arg_storage, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_send (owned GLib.DBusMethodInvocation invocation);
		public void complete_store (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract int @class { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant data { owned get; set; }
		[NoAccessorMethod]
		public abstract bool delivery_report_request { get; set; }
		[NoAccessorMethod]
		public abstract uint delivery_state { get; set; }
		[NoAccessorMethod]
		public abstract string discharge_timestamp { owned get; set; }
		[NoAccessorMethod]
		public abstract uint message_reference { get; set; }
		[NoAccessorMethod]
		public abstract string number { owned get; set; }
		[NoAccessorMethod]
		public abstract uint pdu_type { get; set; }
		[NoAccessorMethod]
		public abstract uint service_category { get; set; }
		[NoAccessorMethod]
		public abstract string smsc { owned get; set; }
		[NoAccessorMethod]
		public abstract uint state { get; set; }
		[NoAccessorMethod]
		public abstract uint storage { get; set; }
		[NoAccessorMethod]
		public abstract uint teleservice_id { get; set; }
		[NoAccessorMethod]
		public abstract string text { owned get; set; }
		[NoAccessorMethod]
		public abstract string timestamp { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant validity { owned get; set; }
		public virtual signal bool handle_send (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_store (GLib.DBusMethodInvocation invocation, uint arg_storage);
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	[Version (since = "1.0")]
	public struct ModemModeCombination {
		public MM.ModemMode allowed;
		public MM.ModemMode preferred;
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	[Version (since = "1.0")]
	public struct ModemPortInfo {
		public weak string name;
		public MM.ModemPortType type;
		public void array_free (uint array_size);
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	[Version (since = "1.2")]
	public struct OmaPendingNetworkInitiatedSession {
		public MM.OmaSessionType session_type;
		public uint session_id;
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_3GPP_PROFILE_CMP_FLAGS_", has_type_id = false)]
	[Flags]
	public enum @3gppProfileCmpFlags {
		NONE,
		NO_PROFILE_ID,
		NO_PROFILE_NAME,
		NO_AUTH,
		NO_APN_TYPE,
		NO_IP_TYPE,
		NO_ACCESS_TYPE_PREFERENCE,
		NO_ENABLED,
		NO_ROAMING_ALLOWANCE,
		NO_PROFILE_SOURCE
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_ACCESS_TYPE_PREFERENCE_", type_id = "mm_bearer_access_type_preference_get_type ()")]
	public enum BearerAccessTypePreference {
		NONE,
		@3GPP_ONLY,
		@3GPP_PREFERRED,
		NON_3GPP_ONLY;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_ALLOWED_AUTH_", type_id = "mm_bearer_allowed_auth_get_type ()")]
	[Flags]
	public enum BearerAllowedAuth {
		UNKNOWN,
		NONE,
		PAP,
		CHAP,
		MSCHAP,
		MSCHAPV2,
		EAP;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_APN_TYPE_", type_id = "mm_bearer_apn_type_get_type ()")]
	[Flags]
	public enum BearerApnType {
		NONE,
		INITIAL,
		DEFAULT,
		IMS,
		MMS,
		MANAGEMENT,
		VOICE,
		EMERGENCY,
		PRIVATE,
		PURCHASE,
		VIDEO_SHARE,
		LOCAL,
		APP,
		XCAP,
		TETHERING;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_IP_FAMILY_", type_id = "mm_bearer_ip_family_get_type ()")]
	[Flags]
	public enum BearerIpFamily {
		NONE,
		IPV4,
		IPV6,
		IPV4V6,
		NON_IP,
		ANY;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_IP_METHOD_", type_id = "mm_bearer_ip_method_get_type ()")]
	public enum BearerIpMethod {
		UNKNOWN,
		PPP,
		STATIC,
		DHCP;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_MULTIPLEX_SUPPORT_", type_id = "mm_bearer_multiplex_support_get_type ()")]
	public enum BearerMultiplexSupport {
		UNKNOWN,
		NONE,
		REQUESTED,
		REQUIRED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_PROFILE_SOURCE_", type_id = "mm_bearer_profile_source_get_type ()")]
	public enum BearerProfileSource {
		UNKNOWN,
		ADMIN,
		USER,
		OPERATOR,
		MODEM,
		DEVICE;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_PROPERTIES_CMP_FLAGS_", has_type_id = false)]
	[Flags]
	public enum BearerPropertiesCmpFlags {
		NONE,
		LOOSE,
		NO_PASSWORD,
		NO_ALLOW_ROAMING,
		NO_RM_PROTOCOL,
		NO_APN_TYPE,
		NO_PROFILE_ID,
		NO_PROFILE_NAME,
		NO_ACCESS_TYPE_PREFERENCE,
		NO_ROAMING_ALLOWANCE
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_ROAMING_ALLOWANCE_", type_id = "mm_bearer_roaming_allowance_get_type ()")]
	[Flags]
	public enum BearerRoamingAllowance {
		NONE,
		HOME,
		PARTNER,
		NON_PARTNER;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_TYPE_", type_id = "mm_bearer_type_get_type ()")]
	public enum BearerType {
		UNKNOWN,
		DEFAULT,
		DEFAULT_ATTACH,
		DEDICATED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_DIRECTION_", type_id = "mm_call_direction_get_type ()")]
	public enum CallDirection {
		UNKNOWN,
		INCOMING,
		OUTGOING;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_STATE_", type_id = "mm_call_state_get_type ()")]
	public enum CallState {
		UNKNOWN,
		DIALING,
		RINGING_OUT,
		RINGING_IN,
		ACTIVE,
		HELD,
		WAITING,
		TERMINATED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_STATE_REASON_", type_id = "mm_call_state_reason_get_type ()")]
	public enum CallStateReason {
		UNKNOWN,
		OUTGOING_STARTED,
		INCOMING_NEW,
		ACCEPTED,
		TERMINATED,
		REFUSED_OR_BUSY,
		ERROR,
		AUDIO_SETUP_FAILED,
		TRANSFERRED,
		DEFLECTED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CELL_TYPE_", type_id = "mm_cell_type_get_type ()")]
	public enum CellType {
		UNKNOWN,
		CDMA,
		GSM,
		UMTS,
		TDSCDMA,
		LTE,
		@5GNR;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_FIRMWARE_IMAGE_TYPE_", type_id = "mm_firmware_image_type_get_type ()")]
	public enum FirmwareImageType {
		UNKNOWN,
		GENERIC,
		GOBI;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_DRX_CYCLE_", type_id = "mm_modem_3gpp_drx_cycle_get_type ()")]
	public enum Modem3gppDrxCycle {
		UNKNOWN,
		UNSUPPORTED,
		@32,
		@64,
		@128,
		@256;
		[CCode (cname = "mm_modem_3gpp_drx_cycle_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_", type_id = "mm_modem_3gpp_eps_ue_mode_operation_get_type ()")]
	public enum Modem3gppEpsUeModeOperation {
		UNKNOWN,
		PS_1,
		PS_2,
		CSPS_1,
		CSPS_2;
		[CCode (cname = "mm_modem_3gpp_eps_ue_mode_operation_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_FACILITY_", type_id = "mm_modem_3gpp_facility_get_type ()")]
	[Flags]
	public enum Modem3gppFacility {
		NONE,
		SIM,
		FIXED_DIALING,
		PH_SIM,
		PH_FSIM,
		NET_PERS,
		NET_SUB_PERS,
		PROVIDER_PERS,
		CORP_PERS;
		[CCode (cname = "mm_modem_3gpp_facility_build_string_from_mask")]
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_MICO_MODE_", type_id = "mm_modem_3gpp_mico_mode_get_type ()")]
	public enum Modem3gppMicoMode {
		UNKNOWN,
		UNSUPPORTED,
		DISABLED,
		ENABLED;
		[CCode (cname = "mm_modem_3gpp_mico_mode_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_NETWORK_AVAILABILITY_", type_id = "mm_modem_3gpp_network_availability_get_type ()")]
	public enum Modem3gppNetworkAvailability {
		UNKNOWN,
		AVAILABLE,
		CURRENT,
		FORBIDDEN;
		[CCode (cname = "mm_modem_3gpp_network_availability_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_PACKET_SERVICE_STATE_", type_id = "mm_modem_3gpp_packet_service_state_get_type ()")]
	public enum Modem3gppPacketServiceState {
		UNKNOWN,
		DETACHED,
		ATTACHED;
		[CCode (cname = "mm_modem_3gpp_packet_service_state_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_REGISTRATION_STATE_", type_id = "mm_modem_3gpp_registration_state_get_type ()")]
	public enum Modem3gppRegistrationState {
		IDLE,
		HOME,
		SEARCHING,
		DENIED,
		UNKNOWN,
		ROAMING,
		HOME_SMS_ONLY,
		ROAMING_SMS_ONLY,
		EMERGENCY_ONLY,
		HOME_CSFB_NOT_PREFERRED,
		ROAMING_CSFB_NOT_PREFERRED,
		ATTACHED_RLOS;
		[CCode (cname = "mm_modem_3gpp_registration_state_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_SUBSCRIPTION_STATE_", type_id = "mm_modem_3gpp_subscription_state_get_type ()")]
	public enum Modem3gppSubscriptionState {
		UNKNOWN,
		UNPROVISIONED,
		PROVISIONED,
		OUT_OF_DATA;
		[CCode (cname = "mm_modem_3gpp_subscription_state_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_USSD_SESSION_STATE_", type_id = "mm_modem_3gpp_ussd_session_state_get_type ()")]
	public enum Modem3gppUssdSessionState {
		UNKNOWN,
		IDLE,
		ACTIVE,
		USER_RESPONSE;
		[CCode (cname = "mm_modem_3gpp_ussd_session_state_get_string")]
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_ACCESS_TECHNOLOGY_", type_id = "mm_modem_access_technology_get_type ()")]
	[Flags]
	public enum ModemAccessTechnology {
		UNKNOWN,
		POTS,
		GSM,
		GSM_COMPACT,
		GPRS,
		EDGE,
		UMTS,
		HSDPA,
		HSUPA,
		HSPA,
		HSPA_PLUS,
		@1XRTT,
		EVDO0,
		EVDOA,
		EVDOB,
		LTE,
		@5GNR,
		LTE_CAT_M,
		LTE_NB_IOT,
		ANY;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_BAND_", type_id = "mm_modem_band_get_type ()")]
	public enum ModemBand {
		UNKNOWN,
		EGSM,
		DCS,
		PCS,
		G850,
		UTRAN_1,
		UTRAN_3,
		UTRAN_4,
		UTRAN_6,
		UTRAN_5,
		UTRAN_8,
		UTRAN_9,
		UTRAN_2,
		UTRAN_7,
		G450,
		G480,
		G750,
		G380,
		G410,
		G710,
		G810,
		EUTRAN_1,
		EUTRAN_2,
		EUTRAN_3,
		EUTRAN_4,
		EUTRAN_5,
		EUTRAN_6,
		EUTRAN_7,
		EUTRAN_8,
		EUTRAN_9,
		EUTRAN_10,
		EUTRAN_11,
		EUTRAN_12,
		EUTRAN_13,
		EUTRAN_14,
		EUTRAN_17,
		EUTRAN_18,
		EUTRAN_19,
		EUTRAN_20,
		EUTRAN_21,
		EUTRAN_22,
		EUTRAN_23,
		EUTRAN_24,
		EUTRAN_25,
		EUTRAN_26,
		EUTRAN_27,
		EUTRAN_28,
		EUTRAN_29,
		EUTRAN_30,
		EUTRAN_31,
		EUTRAN_32,
		EUTRAN_33,
		EUTRAN_34,
		EUTRAN_35,
		EUTRAN_36,
		EUTRAN_37,
		EUTRAN_38,
		EUTRAN_39,
		EUTRAN_40,
		EUTRAN_41,
		EUTRAN_42,
		EUTRAN_43,
		EUTRAN_44,
		EUTRAN_45,
		EUTRAN_46,
		EUTRAN_47,
		EUTRAN_48,
		EUTRAN_49,
		EUTRAN_50,
		EUTRAN_51,
		EUTRAN_52,
		EUTRAN_53,
		EUTRAN_54,
		EUTRAN_55,
		EUTRAN_56,
		EUTRAN_57,
		EUTRAN_58,
		EUTRAN_59,
		EUTRAN_60,
		EUTRAN_61,
		EUTRAN_62,
		EUTRAN_63,
		EUTRAN_64,
		EUTRAN_65,
		EUTRAN_66,
		EUTRAN_67,
		EUTRAN_68,
		EUTRAN_69,
		EUTRAN_70,
		EUTRAN_71,
		EUTRAN_85,
		CDMA_BC0,
		CDMA_BC1,
		CDMA_BC2,
		CDMA_BC3,
		CDMA_BC4,
		CDMA_BC5,
		CDMA_BC6,
		CDMA_BC7,
		CDMA_BC8,
		CDMA_BC9,
		CDMA_BC10,
		CDMA_BC11,
		CDMA_BC12,
		CDMA_BC13,
		CDMA_BC14,
		CDMA_BC15,
		CDMA_BC16,
		CDMA_BC17,
		CDMA_BC18,
		CDMA_BC19,
		UTRAN_10,
		UTRAN_11,
		UTRAN_12,
		UTRAN_13,
		UTRAN_14,
		UTRAN_19,
		UTRAN_20,
		UTRAN_21,
		UTRAN_22,
		UTRAN_25,
		UTRAN_26,
		UTRAN_32,
		ANY,
		NGRAN_1,
		NGRAN_2,
		NGRAN_3,
		NGRAN_5,
		NGRAN_7,
		NGRAN_8,
		NGRAN_12,
		NGRAN_13,
		NGRAN_14,
		NGRAN_18,
		NGRAN_20,
		NGRAN_25,
		NGRAN_26,
		NGRAN_28,
		NGRAN_29,
		NGRAN_30,
		NGRAN_34,
		NGRAN_38,
		NGRAN_39,
		NGRAN_40,
		NGRAN_41,
		NGRAN_48,
		NGRAN_50,
		NGRAN_51,
		NGRAN_53,
		NGRAN_65,
		NGRAN_66,
		NGRAN_70,
		NGRAN_71,
		NGRAN_74,
		NGRAN_75,
		NGRAN_76,
		NGRAN_77,
		NGRAN_78,
		NGRAN_79,
		NGRAN_80,
		NGRAN_81,
		NGRAN_82,
		NGRAN_83,
		NGRAN_84,
		NGRAN_86,
		NGRAN_89,
		NGRAN_90,
		NGRAN_91,
		NGRAN_92,
		NGRAN_93,
		NGRAN_94,
		NGRAN_95,
		NGRAN_257,
		NGRAN_258,
		NGRAN_260,
		NGRAN_261;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CAPABILITY_", type_id = "mm_modem_capability_get_type ()")]
	[Flags]
	public enum ModemCapability {
		NONE,
		POTS,
		CDMA_EVDO,
		GSM_UMTS,
		LTE,
		IRIDIUM,
		@5GNR,
		TDS,
		ANY;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_ACTIVATION_STATE_", type_id = "mm_modem_cdma_activation_state_get_type ()")]
	public enum ModemCdmaActivationState {
		UNKNOWN,
		NOT_ACTIVATED,
		ACTIVATING,
		PARTIALLY_ACTIVATED,
		ACTIVATED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_REGISTRATION_STATE_", type_id = "mm_modem_cdma_registration_state_get_type ()")]
	public enum ModemCdmaRegistrationState {
		UNKNOWN,
		REGISTERED,
		HOME,
		ROAMING;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_RM_PROTOCOL_", type_id = "mm_modem_cdma_rm_protocol_get_type ()")]
	public enum ModemCdmaRmProtocol {
		UNKNOWN,
		ASYNC,
		PACKET_RELAY,
		PACKET_NETWORK_PPP,
		PACKET_NETWORK_SLIP,
		STU_III;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CONTACTS_STORAGE_", type_id = "mm_modem_contacts_storage_get_type ()")]
	public enum ModemContactsStorage {
		UNKNOWN,
		ME,
		SM,
		MT;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_FIRMWARE_UPDATE_METHOD_", type_id = "mm_modem_firmware_update_method_get_type ()")]
	[Flags]
	public enum ModemFirmwareUpdateMethod {
		NONE,
		FASTBOOT,
		QMI_PDC,
		MBIM_QDU,
		FIREHOSE,
		SAHARA;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_", type_id = "mm_modem_location_assistance_data_type_get_type ()")]
	[Flags]
	public enum ModemLocationAssistanceDataType {
		NONE,
		XTRA;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_LOCATION_SOURCE_", type_id = "mm_modem_location_source_get_type ()")]
	[Flags]
	public enum ModemLocationSource {
		NONE,
		@3GPP_LAC_CI,
		GPS_RAW,
		GPS_NMEA,
		CDMA_BS,
		GPS_UNMANAGED,
		AGPS_MSA,
		AGPS_MSB;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_LOCK_", type_id = "mm_modem_lock_get_type ()")]
	public enum ModemLock {
		UNKNOWN,
		NONE,
		SIM_PIN,
		SIM_PIN2,
		SIM_PUK,
		SIM_PUK2,
		PH_SP_PIN,
		PH_SP_PUK,
		PH_NET_PIN,
		PH_NET_PUK,
		PH_SIM_PIN,
		PH_CORP_PIN,
		PH_CORP_PUK,
		PH_FSIM_PIN,
		PH_FSIM_PUK,
		PH_NETSUB_PIN,
		PH_NETSUB_PUK;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_MODE_", type_id = "mm_modem_mode_get_type ()")]
	[Flags]
	public enum ModemMode {
		NONE,
		CS,
		@2G,
		@3G,
		@4G,
		@5G,
		ANY;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_PORT_TYPE_", type_id = "mm_modem_port_type_get_type ()")]
	public enum ModemPortType {
		UNKNOWN,
		NET,
		AT,
		QCDM,
		GPS,
		QMI,
		MBIM,
		AUDIO,
		IGNORED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_POWER_STATE_", type_id = "mm_modem_power_state_get_type ()")]
	public enum ModemPowerState {
		UNKNOWN,
		OFF,
		LOW,
		ON;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_", type_id = "mm_modem_state_get_type ()")]
	public enum ModemState {
		FAILED,
		UNKNOWN,
		INITIALIZING,
		LOCKED,
		DISABLED,
		DISABLING,
		ENABLING,
		ENABLED,
		SEARCHING,
		REGISTERED,
		DISCONNECTING,
		CONNECTING,
		CONNECTED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_CHANGE_REASON_", type_id = "mm_modem_state_change_reason_get_type ()")]
	public enum ModemStateChangeReason {
		UNKNOWN,
		USER_REQUESTED,
		SUSPEND,
		FAILURE;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_FAILED_REASON_", type_id = "mm_modem_state_failed_reason_get_type ()")]
	public enum ModemStateFailedReason {
		NONE,
		UNKNOWN,
		SIM_MISSING,
		SIM_ERROR,
		UNKNOWN_CAPABILITIES,
		ESIM_WITHOUT_PROFILES;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_FEATURE_", type_id = "mm_oma_feature_get_type ()")]
	[Flags]
	public enum OmaFeature {
		NONE,
		DEVICE_PROVISIONING,
		PRL_UPDATE,
		HANDS_FREE_ACTIVATION;
		public string build_string_from_mask ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_STATE_", type_id = "mm_oma_session_state_get_type ()")]
	public enum OmaSessionState {
		FAILED,
		UNKNOWN,
		STARTED,
		RETRYING,
		CONNECTING,
		CONNECTED,
		AUTHENTICATED,
		MDN_DOWNLOADED,
		MSID_DOWNLOADED,
		PRL_DOWNLOADED,
		MIP_PROFILE_DOWNLOADED,
		COMPLETED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_STATE_FAILED_REASON_", type_id = "mm_oma_session_state_failed_reason_get_type ()")]
	public enum OmaSessionStateFailedReason {
		UNKNOWN,
		NETWORK_UNAVAILABLE,
		SERVER_UNAVAILABLE,
		AUTHENTICATION_FAILED,
		MAX_RETRY_EXCEEDED,
		SESSION_CANCELLED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_TYPE_", type_id = "mm_oma_session_type_get_type ()")]
	public enum OmaSessionType {
		UNKNOWN,
		CLIENT_INITIATED_DEVICE_CONFIGURE,
		CLIENT_INITIATED_PRL_UPDATE,
		CLIENT_INITIATED_HANDS_FREE_ACTIVATION,
		NETWORK_INITIATED_DEVICE_CONFIGURE,
		NETWORK_INITIATED_PRL_UPDATE,
		DEVICE_INITIATED_PRL_UPDATE,
		DEVICE_INITIATED_HANDS_FREE_ACTIVATION;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SERVING_CELL_TYPE_", type_id = "mm_serving_cell_type_get_type ()")]
	public enum ServingCellType {
		UNKNOWN,
		PCELL,
		SCELL,
		PSCELL,
		SSCELL,
		INVALID;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SIM_ESIM_STATUS_", type_id = "mm_sim_esim_status_get_type ()")]
	public enum SimEsimStatus {
		UNKNOWN,
		NO_PROFILES,
		WITH_PROFILES;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SIM_REMOVABILITY_", type_id = "mm_sim_removability_get_type ()")]
	public enum SimRemovability {
		UNKNOWN,
		REMOVABLE,
		NOT_REMOVABLE;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SIM_TYPE_", type_id = "mm_sim_type_get_type ()")]
	public enum SimType {
		UNKNOWN,
		PHYSICAL,
		ESIM;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_CDMA_SERVICE_CATEGORY_", type_id = "mm_sms_cdma_service_category_get_type ()")]
	public enum SmsCdmaServiceCategory {
		UNKNOWN,
		EMERGENCY_BROADCAST,
		ADMINISTRATIVE,
		MAINTENANCE,
		GENERAL_NEWS_LOCAL,
		GENERAL_NEWS_REGIONAL,
		GENERAL_NEWS_NATIONAL,
		GENERAL_NEWS_INTERNATIONAL,
		BUSINESS_NEWS_LOCAL,
		BUSINESS_NEWS_REGIONAL,
		BUSINESS_NEWS_NATIONAL,
		BUSINESS_NEWS_INTERNATIONAL,
		SPORTS_NEWS_LOCAL,
		SPORTS_NEWS_REGIONAL,
		SPORTS_NEWS_NATIONAL,
		SPORTS_NEWS_INTERNATIONAL,
		ENTERTAINMENT_NEWS_LOCAL,
		ENTERTAINMENT_NEWS_REGIONAL,
		ENTERTAINMENT_NEWS_NATIONAL,
		ENTERTAINMENT_NEWS_INTERNATIONAL,
		LOCAL_WEATHER,
		TRAFFIC_REPORT,
		FLIGHT_SCHEDULES,
		RESTAURANTS,
		LODGINGS,
		RETAIL_DIRECTORY,
		ADVERTISEMENTS,
		STOCK_QUOTES,
		EMPLOYMENT,
		HOSPITALS,
		TECHNOLOGY_NEWS,
		MULTICATEGORY,
		CMAS_PRESIDENTIAL_ALERT,
		CMAS_EXTREME_THREAT,
		CMAS_SEVERE_THREAT,
		CMAS_CHILD_ABDUCTION_EMERGENCY,
		CMAS_TEST;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_CDMA_TELESERVICE_ID_", type_id = "mm_sms_cdma_teleservice_id_get_type ()")]
	public enum SmsCdmaTeleserviceId {
		UNKNOWN,
		CMT91,
		WPT,
		WMT,
		VMN,
		WAP,
		WEMT,
		SCPT,
		CATPT;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_DELIVERY_STATE_", type_id = "mm_sms_delivery_state_get_type ()")]
	public enum SmsDeliveryState {
		COMPLETED_RECEIVED,
		COMPLETED_FORWARDED_UNCONFIRMED,
		COMPLETED_REPLACED_BY_SC,
		TEMPORARY_ERROR_CONGESTION,
		TEMPORARY_ERROR_SME_BUSY,
		TEMPORARY_ERROR_NO_RESPONSE_FROM_SME,
		TEMPORARY_ERROR_SERVICE_REJECTED,
		TEMPORARY_ERROR_QOS_NOT_AVAILABLE,
		TEMPORARY_ERROR_IN_SME,
		ERROR_REMOTE_PROCEDURE,
		ERROR_INCOMPATIBLE_DESTINATION,
		ERROR_CONNECTION_REJECTED,
		ERROR_NOT_OBTAINABLE,
		ERROR_QOS_NOT_AVAILABLE,
		ERROR_NO_INTERWORKING_AVAILABLE,
		ERROR_VALIDITY_PERIOD_EXPIRED,
		ERROR_DELETED_BY_ORIGINATING_SME,
		ERROR_DELETED_BY_SC_ADMINISTRATION,
		ERROR_MESSAGE_DOES_NOT_EXIST,
		TEMPORARY_FATAL_ERROR_CONGESTION,
		TEMPORARY_FATAL_ERROR_SME_BUSY,
		TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME,
		TEMPORARY_FATAL_ERROR_SERVICE_REJECTED,
		TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE,
		TEMPORARY_FATAL_ERROR_IN_SME,
		UNKNOWN,
		NETWORK_PROBLEM_ADDRESS_VACANT,
		NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
		NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
		NETWORK_PROBLEM_NETWORK_FAILURE,
		NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
		NETWORK_PROBLEM_OTHER,
		TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
		TERMINAL_PROBLEM_DESTINATION_BUSY,
		TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
		TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
		TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
		TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
		TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
		TERMINAL_PROBLEM_OTHER,
		RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
		RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
		RADIO_INTERFACE_PROBLEM_OTHER,
		GENERAL_PROBLEM_ENCODING,
		GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
		GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
		GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
		GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
		GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
		GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
		GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
		GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
		GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
		GENERAL_PROBLEM_OTHER,
		TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT,
		TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
		TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
		TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE,
		TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
		TEMPORARY_NETWORK_PROBLEM_OTHER,
		TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY,
		TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
		TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
		TEMPORARY_TERMINAL_PROBLEM_OTHER,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER,
		TEMPORARY_GENERAL_PROBLEM_ENCODING,
		TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
		TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
		TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
		TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
		TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
		TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
		TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
		TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
		TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
		TEMPORARY_GENERAL_PROBLEM_OTHER;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_PDU_TYPE_", type_id = "mm_sms_pdu_type_get_type ()")]
	public enum SmsPduType {
		UNKNOWN,
		DELIVER,
		SUBMIT,
		STATUS_REPORT,
		CDMA_DELIVER,
		CDMA_SUBMIT,
		CDMA_CANCELLATION,
		CDMA_DELIVERY_ACKNOWLEDGEMENT,
		CDMA_USER_ACKNOWLEDGEMENT,
		CDMA_READ_ACKNOWLEDGEMENT;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_STATE_", type_id = "mm_sms_state_get_type ()")]
	public enum SmsState {
		UNKNOWN,
		STORED,
		RECEIVING,
		RECEIVED,
		SENDING,
		SENT;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_STORAGE_", type_id = "mm_sms_storage_get_type ()")]
	public enum SmsStorage {
		UNKNOWN,
		SM,
		ME,
		MT,
		SR,
		BM,
		TA;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_VALIDITY_TYPE_", type_id = "mm_sms_validity_type_get_type ()")]
	public enum SmsValidityType {
		UNKNOWN,
		RELATIVE,
		ABSOLUTE,
		ENHANCED;
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CDMA_ACTIVATION_ERROR_", type_id = "mm_cdma_activation_error_get_type ()")]
	public errordomain CdmaActivationError {
		NONE,
		UNKNOWN,
		ROAMING,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_WRONG_RADIO_INTERFACE")]
		WRONGRADIOINTERFACE,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_COULD_NOT_CONNECT")]
		COULDNOTCONNECT,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_SECURITY_AUTHENTICATION_FAILED")]
		SECURITYAUTHENTICATIONFAILED,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_PROVISIONING_FAILED")]
		PROVISIONINGFAILED,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_NO_SIGNAL")]
		NOSIGNAL,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_TIMED_OUT")]
		TIMEDOUT,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_START_FAILED")]
		STARTFAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CONNECTION_ERROR_", type_id = "mm_connection_error_get_type ()")]
	public errordomain ConnectionError {
		UNKNOWN,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_CARRIER")]
		NOCARRIER,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_DIALTONE")]
		NODIALTONE,
		BUSY,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_ANSWER")]
		NOANSWER;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CORE_ERROR_", type_id = "mm_core_error_get_type ()")]
	public errordomain CoreError {
		FAILED,
		CANCELLED,
		ABORTED,
		UNSUPPORTED,
		[CCode (cname = "MM_CORE_ERROR_NO_PLUGINS")]
		NOPLUGINS,
		UNAUTHORIZED,
		[CCode (cname = "MM_CORE_ERROR_INVALID_ARGS")]
		INVALIDARGS,
		[CCode (cname = "MM_CORE_ERROR_IN_PROGRESS")]
		INPROGRESS,
		[CCode (cname = "MM_CORE_ERROR_WRONG_STATE")]
		WRONGSTATE,
		CONNECTED,
		[CCode (cname = "MM_CORE_ERROR_TOO_MANY")]
		TOOMANY,
		[CCode (cname = "MM_CORE_ERROR_NOT_FOUND")]
		NOTFOUND,
		RETRY,
		EXISTS,
		[CCode (cname = "MM_CORE_ERROR_WRONG_SIM_STATE")]
		WRONGSIMSTATE,
		[CCode (cname = "MM_CORE_ERROR_RESET_AND_RETRY")]
		RESETRETRY;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MESSAGE_ERROR_", type_id = "mm_message_error_get_type ()")]
	public errordomain MessageError {
		[CCode (cname = "MM_MESSAGE_ERROR_ME_FAILURE")]
		MEFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_SMS_SERVICE_RESERVED")]
		SMSSERVICERESERVED,
		[CCode (cname = "MM_MESSAGE_ERROR_NOT_ALLOWED")]
		NOTALLOWED,
		[CCode (cname = "MM_MESSAGE_ERROR_NOT_SUPPORTED")]
		NOTSUPPORTED,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_PDU_PARAMETER")]
		INVALIDPDUPARAMETER,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_TEXT_PARAMETER")]
		INVALIDTEXTPARAMETER,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_NOT_INSERTED")]
		SIMNOTINSERTED,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PIN")]
		SIMPIN,
		[CCode (cname = "MM_MESSAGE_ERROR_PH_SIM_PIN")]
		PHSIMPIN,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_FAILURE")]
		SIMFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_BUSY")]
		SIMBUSY,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_WRONG")]
		SIMWRONG,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PUK")]
		SIMPUK,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PIN2")]
		SIMPIN2,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PUK2")]
		SIMPUK2,
		[CCode (cname = "MM_MESSAGE_ERROR_MEMORY_FAILURE")]
		MEMORYFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_INDEX")]
		INVALIDINDEX,
		[CCode (cname = "MM_MESSAGE_ERROR_MEMORY_FULL")]
		MEMORYFULL,
		[CCode (cname = "MM_MESSAGE_ERROR_SMSC_ADDRESS_UNKNOWN")]
		SMSCADDRESSUNKNOWN,
		[CCode (cname = "MM_MESSAGE_ERROR_NO_NETWORK")]
		NONETWORK,
		[CCode (cname = "MM_MESSAGE_ERROR_NETWORK_TIMEOUT")]
		NETWORKTIMEOUT,
		[CCode (cname = "MM_MESSAGE_ERROR_NO_CNMA_ACK_EXPECTED")]
		NOCNMAACKEXPECTED,
		UNKNOWN;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MOBILE_EQUIPMENT_ERROR_", type_id = "mm_mobile_equipment_error_get_type ()")]
	public errordomain MobileEquipmentError {
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PHONE_FAILURE")]
		PHONEFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_CONNECTION")]
		NOCONNECTION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LINK_RESERVED")]
		LINKRESERVED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_ALLOWED")]
		NOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_SUPPORTED")]
		NOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_SIM_PIN")]
		PHSIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PIN")]
		PHFSIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PUK")]
		PHFSIMPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_NOT_INSERTED")]
		SIMNOTINSERTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN")]
		SIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK")]
		SIMPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_FAILURE")]
		SIMFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_BUSY")]
		SIMBUSY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_WRONG")]
		SIMWRONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INCORRECT_PASSWORD")]
		INCORRECTPASSWORD,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN2")]
		SIMPIN2,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK2")]
		SIMPUK2,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FULL")]
		MEMORYFULL,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_INDEX")]
		INVALIDINDEX,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_FOUND")]
		NOTFOUND,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FAILURE")]
		MEMORYFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_TEXT_TOO_LONG")]
		TEXTTOOLONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_CHARS")]
		INVALIDCHARS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_TOO_LONG")]
		DIALSTRINGTOOLONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_INVALID")]
		DIALSTRINGINVALID,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_NETWORK")]
		NONETWORK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_TIMEOUT")]
		NETWORKTIMEOUT,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_NOT_ALLOWED")]
		NETWORKNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PIN")]
		NETWORKPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PUK")]
		NETWORKPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PIN")]
		NETWORKSUBSETPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PUK")]
		NETWORKSUBSETPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PIN")]
		SERVICEPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PUK")]
		SERVICEPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CORP_PIN")]
		CORPPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CORP_PUK")]
		CORPPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_HIDDEN_KEY_REQUIRED")]
		HIDDENKEYREQUIRED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_EAP_METHOD_NOT_SUPPORTED")]
		EAPMETHODNOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INCORRECT_PARAMETERS")]
		INCORRECTPARAMETERS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_COMMAND_DISABLED")]
		COMMANDDISABLED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_COMMAND_ABORTED")]
		COMMANDABORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_ATTACHED_RESTRICTED")]
		NOTATTACHEDRESTRICTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_ALLOWED_EMERGENCY_ONLY")]
		NOTALLOWEDEMERGENCYONLY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_ALLOWED_RESTRICTED")]
		NOTALLOWEDRESTRICTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_FIXED_DIAL_NUMBER_ONLY")]
		FIXEDDIALNUMBERONLY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_TEMPORARILY_OUT_OF_SERVICE")]
		TEMPORARILYOUTOFSERVICE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LANGUAGE_OR_ALPHABET_NOT_SUPPORTED")]
		LANGUAGEORALPHABETNOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNEXPECTED_DATA_VALUE")]
		UNEXPECTEDDATAVALUE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SYSTEM_FAILURE")]
		SYSTEMFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DATA_MISSING")]
		DATAMISSING,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CALL_BARRED")]
		CALLBARRED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MESSAGE_WAITING_INDICATION_SUBSCRIPTION_FAILURE")]
		MESSAGEWAITINGINDICATIONSUBSCRIPTIONFAILURE,
		UNKNOWN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IMSI_UNKNOWN_IN_HSS")]
		IMSIUNKNOWNINHSS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ILLEGAL_UE")]
		ILLEGALUE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IMSI_UNKNOWN_IN_VLR")]
		IMSIUNKNOWNINVLR,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IMEI_NOT_ACCEPTED")]
		IMEINOTACCEPTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ILLEGAL_ME")]
		ILLEGALME,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PS_SERVICES_NOT_ALLOWED")]
		PSSERVICESNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PS_AND_NON_PS_SERVICES_NOT_ALLOWED")]
		PSANDNONPSSERVICESNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UE_IDENTITY_NOT_DERIVED_FROM_NETWORK")]
		UEIDENTITYNOTDERIVEDFROMNETWORK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IMPLICITLY_DETACHED")]
		IMPLICITLYDETACHED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PLMN_NOT_ALLOWED")]
		PLMNNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_AREA_NOT_ALLOWED")]
		AREANOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ROAMING_NOT_ALLOWED_IN_AREA")]
		ROAMINGNOTALLOWEDINAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PS_SERVICES_NOT_ALLOWED_IN_PLMN")]
		PSSERVICESNOTALLOWEDINPLMN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_CELLS_IN_AREA")]
		NOCELLSINAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MSC_TEMPORARILY_NOT_REACHABLE")]
		MSCTEMPORARILYNOTREACHABLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_FAILURE_ATTACH")]
		NETWORKFAILUREATTACH,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CS_DOMAIN_UNAVAILABLE")]
		CSDOMAINUNAVAILABLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ESM_FAILURE")]
		ESMFAILURE,
		CONGESTION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MBMS_BEARER_CAPABILITIES_INSUFFICIENT_FOR_SERVICE")]
		MBMSBEARERCAPABILITIESINSUFFICIENTFORSERVICE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_AUTHORIZED_FOR_CSG")]
		NOTAUTHORIZEDFORCSG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INSUFFICIENT_RESOURCES")]
		INSUFFICIENTRESOURCES,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MISSING_OR_UNKNOWN_APN")]
		MISSINGORUNKNOWNAPN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNKNOWN_PDP_ADDRESS_OR_TYPE")]
		UNKNOWNPDPADDRESSORTYPE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_USER_AUTHENTICATION_FAILED")]
		USERAUTHENTICATIONFAILED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ACTIVATION_REJECTED_BY_GGSN_OR_GW")]
		ACTIVATIONREJECTEDBYGGSNORGW,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ACTIVATION_REJECTED_UNSPECIFIED")]
		ACTIVATIONREJECTEDUNSPECIFIED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_OPTION_NOT_SUPPORTED")]
		SERVICEOPTIONNOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_OPTION_NOT_SUBSCRIBED")]
		SERVICEOPTIONNOTSUBSCRIBED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_OPTION_OUT_OF_ORDER")]
		SERVICEOPTIONOUTOFORDER,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NSAPI_OR_PTI_ALREADY_IN_USE")]
		NSAPIORPTIALREADYINUSE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REGULAR_DEACTIVATION")]
		REGULARDEACTIVATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_QOS_NOT_ACCEPTED")]
		QOSNOTACCEPTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CALL_CANNOT_BE_IDENTIFIED")]
		CALLCANNOTBEIDENTIFIED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CS_SERVICE_TEMPORARILY_UNAVAILABLE")]
		CSSERVICETEMPORARILYUNAVAILABLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_FEATURE_NOT_SUPPORTED")]
		FEATURENOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SEMANTIC_ERROR_IN_TFT_OPERATION")]
		SEMANTICERRORINTFTOPERATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SYNTACTICAL_ERROR_IN_TFT_OPERATION")]
		SYNTACTICALERRORINTFTOPERATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNKNOWN_PDP_CONTEXT")]
		UNKNOWNPDPCONTEXT,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SEMANTIC_ERRORS_IN_PACKET_FILTER")]
		SEMANTICERRORSINPACKETFILTER,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SYNTACTICAL_ERROR_IN_PACKET_FILTER")]
		SYNTACTICALERRORSINPACKETFILTER,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PDP_CONTEXT_WITHOUT_TFT_ALREADY_ACTIVATED")]
		PDPCONTEXTWITHOUTTFTALREADYACTIVATED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MULTICAST_GROUP_MEMBERSHIP_TIMEOUT")]
		MULTICASTGROUPMEMBERSHIPTIMEOUT,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNKNOWN")]
		GPRSUNKNOWN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PDP_AUTH_FAILURE")]
		PDPAUTHFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_MOBILE_CLASS")]
		INVALIDMOBILECLASS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LAST_PDN_DISCONNECTION_NOT_ALLOWED_LEGACY")]
		LASTPDNDISCONNECTIONNOTALLOWEDLEGACY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LAST_PDN_DISCONNECTION_NOT_ALLOWED")]
		LASTPDNDISCONNECTIONNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SEMANTICALLY_INCORRECT_MESSAGE")]
		SEMANTICALLYINCORRECTMESSAGE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_MANDATORY_INFORMATION")]
		INVALIDMANDATORYINFORMATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MESSAGE_TYPE_NOT_IMPLEMENTED")]
		MESSAGETYPENOTIMPLEMENTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CONDITIONAL_IE_ERROR")]
		CONDITIONALIEERROR,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNSPECIFIED_PROTOCOL_ERROR")]
		UNSPECIFIEDPROTOCOLERROR,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_OPERATOR_DETERMINED_BARRING")]
		OPERATORDETERMINEDBARRING,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MAXIMUM_NUMBER_OF_BEARERS_REACHED")]
		MAXIMUMNUMBEROFBEARERSREACHED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REQUESTED_APN_NOT_SUPPORTED")]
		REQUESTEDAPNNOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REQUEST_REJECTED_BCM_VIOLATION")]
		REQUESTREJECTEDBCMVIOLATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNSUPPORTED_QCI_OR_5QI_VALUE")]
		UNSUPPORTEDQCIOR5QIVALUE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_USER_DATA_VIA_CONTROL_PLANE_CONGESTED")]
		USERDATAVIACONTROLPLANECONGESTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SMS_PROVIDED_VIA_GPRS_IN_ROUTING_AREA")]
		SMSPROVIDEDVIAGPRSINROUTINGAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_PTI_VALUE")]
		INVALIDPTIVALUE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_BEARER_ACTIVATED")]
		NOBEARERACTIVATED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE")]
		MESSAGENOTCOMPATIBLEWITHPROTOCOLSTATE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_RECOVERY_ON_TIMER_EXPIRY")]
		RECOVERYONTIMEREXPIRY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_TRANSACTION_ID_VALUE")]
		INVALIDTRANSACTIONIDVALUE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_OPTION_NOT_AUTHORIZED_IN_PLMN")]
		SERVICEOPTIONNOTAUTHORIZEDINPLMN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_FAILURE_ACTIVATION")]
		NETWORKFAILUREACTIVATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REACTIVATION_REQUESTED")]
		REACTIVATIONREQUESTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IPV4_ONLY_ALLOWED")]
		IPV4ONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IPV6_ONLY_ALLOWED")]
		IPV6ONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SINGLE_ADDRESS_BEARERS_ONLY_ALLOWED")]
		SINGLEADDRESSBEARERSONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_COLLISION_WITH_NETWORK_INITIATED_REQUEST")]
		COLLISIONWITHNETWORKINITIATEDREQUEST,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IPV4V6_ONLY_ALLOWED")]
		IPV4V6ONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NON_IP_ONLY_ALLOWED")]
		NONIPONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_BEARER_HANDLING_UNSUPPORTED")]
		BEARERHANDLINGUNSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_APN_RESTRICTION_INCOMPATIBLE")]
		APNRESTRICTIONINCOMPATIBLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MULTIPLE_ACCESS_TO_PDN_CONNECTION_NOT_ALLOWED")]
		MULTIPLEACCESSTOPDNCONNECTIONNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ESM_INFORMATION_NOT_RECEIVED")]
		ESMINFORMATIONNOTRECEIVED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PDN_CONNECTION_NONEXISTENT")]
		PDNCONNECTIONNONEXISTENT,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MULTIPLE_PDN_CONNECTION_SAME_APN_NOT_ALLOWED")]
		MULTIPLEPDNCONNECTIONSAMEAPNNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SEVERE_NETWORK_FAILURE")]
		SEVERENETWORKFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INSUFFICIENT_RESOURCES_FOR_SLICE_AND_DNN")]
		INSUFFICIENTRESOURCESFORSLICEANDDNN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNSUPPORTED_SSC_MODE")]
		UNSUPPORTEDSSCMODE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INSUFFICIENT_RESOURCES_FOR_SLICE")]
		INSUFFICIENTRESOURCESFORSLICE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE")]
		MESSAGETYPENOTCOMPATIBLEWITHPROTOCOLSTATE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_IE_NOT_IMPLEMENTED")]
		IENOTIMPLEMENTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_N1_MODE_NOT_ALLOWED")]
		N1MODENOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_RESTRICTED_SERVICE_AREA")]
		RESTRICTEDSERVICEAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LADN_UNAVAILABLE")]
		LADNUNAVAILABLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MISSING_OR_UNKNOWN_DNN_IN_SLICE")]
		MISSINGORUNKNOWNDNNINSLICE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NGKSI_ALREADY_IN_USE")]
		NKGSIALREADYINUSE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PAYLOAD_NOT_FORWARDED")]
		PAYLOADNOTFORWARDED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NON_3GPP_ACCESS_TO_5GCN_NOT_ALLOWED")]
		NON3GPPACCESSTO5GCNNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVING_NETWORK_NOT_AUTHORIZED")]
		SERVINGNETWORKNOTAUTHORIZED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DNN_NOT_SUPPORTED_IN_SLICE")]
		DNNNOTSUPPORTEDINSLICE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INSUFFICIENT_USER_PLANE_RESOURCES_FOR_PDU_SESSION")]
		INSUFFICIENTUSERPLANERESOURCESFORPDUSESSION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_OUT_OF_LADN_SERVICE_AREA")]
		OUTOFLADNSERVICEAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PTI_MISMATCH")]
		PTIMISMATCH,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MAX_DATA_RATE_FOR_USER_PLANE_INTEGRITY_TOO_LOW")]
		MAXDATARATEFORUSERPLANEINTEGRITYTOOLOW,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SEMANTIC_ERROR_IN_QOS_OPERATION")]
		SEMANTICERRORINQOSOPERATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SYNTACTICAL_ERROR_IN_QOS_OPERATION")]
		SYNTACTICALERRORINQOSOPERATION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_MAPPED_EPS_BEARER_IDENTITY")]
		INVALIDMAPPEDEPSBEARERIDENTITY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REDIRECTION_TO_5GCN_REQUIRED")]
		REDIRECTIONTO5GCNREQUIRED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_REDIRECTION_TO_EPC_REQUIRED")]
		REDIRECTIONTOEPCREQUIRED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_TEMPORARILY_UNAUTHORIZED_FOR_SNPN")]
		TEMPORARILYUNAUTHORIZEDFORSNPN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PERMANENTLY_UNAUTHORIZED_FOR_SNPN")]
		PERMANENTLYUNAUTHORIZEDFORSNPN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_ETHERNET_ONLY_ALLOWED")]
		ETHERNETONLYALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_UNAUTHORIZED_FOR_CAG")]
		UNAUTHORIZEDFORCAG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_NETWORK_SLICES_AVAILABLE")]
		NONETWORKSLICESAVAILABLE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_WIRELINE_ACCESS_AREA_NOT_ALLOWED")]
		WIRELINEACCESSAREANOTALLOWED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SERIAL_ERROR_", type_id = "mm_serial_error_get_type ()")]
	public errordomain SerialError {
		UNKNOWN,
		[CCode (cname = "MM_SERIAL_ERROR_OPEN_FAILED")]
		OPENFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_SEND_FAILED")]
		SENDFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_RESPONSE_TIMEOUT")]
		RESPONSETIMEOUT,
		[CCode (cname = "MM_SERIAL_ERROR_OPEN_FAILED_NO_DEVICE")]
		OPENFAILEDNODEVICE,
		[CCode (cname = "MM_SERIAL_ERROR_FLASH_FAILED")]
		FLASHFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_NOT_OPEN")]
		NOTOPEN,
		[CCode (cname = "MM_SERIAL_ERROR_PARSE_FAILED")]
		PARSEFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_FRAME_NOT_FOUND")]
		FRAMENOTFOUND;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", instance_pos = 2.9)]
	[Version (since = "1.0")]
	public delegate void UnlockRetriesForeachCb (MM.ModemLock @lock, uint count);
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_3GPP_PROFILE_ID_UNKNOWN")]
	public const int @3GPP_PROFILE_ID_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_METHOD_CONNECT")]
	public const string BEARER_METHOD_CONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_METHOD_DISCONNECT")]
	public const string BEARER_METHOD_DISCONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_BEARERTYPE")]
	public const string BEARER_PROPERTY_BEARERTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_CONNECTED")]
	public const string BEARER_PROPERTY_CONNECTED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_CONNECTIONERROR")]
	public const string BEARER_PROPERTY_CONNECTIONERROR;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_INTERFACE")]
	public const string BEARER_PROPERTY_INTERFACE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IP4CONFIG")]
	public const string BEARER_PROPERTY_IP4CONFIG;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IP6CONFIG")]
	public const string BEARER_PROPERTY_IP6CONFIG;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IPTIMEOUT")]
	public const string BEARER_PROPERTY_IPTIMEOUT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_MULTIPLEXED")]
	public const string BEARER_PROPERTY_MULTIPLEXED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_PROFILEID")]
	public const string BEARER_PROPERTY_PROFILEID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_PROPERTIES")]
	public const string BEARER_PROPERTY_PROPERTIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_RELOADSTATSSUPPORTED")]
	public const string BEARER_PROPERTY_RELOADSTATSSUPPORTED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_STATS")]
	public const string BEARER_PROPERTY_STATS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_SUSPENDED")]
	public const string BEARER_PROPERTY_SUSPENDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_ACCEPT")]
	public const string CALL_METHOD_ACCEPT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_DEFLECT")]
	public const string CALL_METHOD_DEFLECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_HANGUP")]
	public const string CALL_METHOD_HANGUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_JOINMULTIPARTY")]
	public const string CALL_METHOD_JOINMULTIPARTY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_LEAVEMULTIPARTY")]
	public const string CALL_METHOD_LEAVEMULTIPARTY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_SENDDTMF")]
	public const string CALL_METHOD_SENDDTMF;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_START")]
	public const string CALL_METHOD_START;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_AUDIOFORMAT")]
	public const string CALL_PROPERTY_AUDIOFORMAT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_AUDIOPORT")]
	public const string CALL_PROPERTY_AUDIOPORT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_DIRECTION")]
	public const string CALL_PROPERTY_DIRECTION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_MULTIPARTY")]
	public const string CALL_PROPERTY_MULTIPARTY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_NUMBER")]
	public const string CALL_PROPERTY_NUMBER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_STATE")]
	public const string CALL_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_STATEREASON")]
	public const string CALL_PROPERTY_STATEREASON;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_SIGNAL_DTMFRECEIVED")]
	public const string CALL_SIGNAL_DTMFRECEIVED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_SIGNAL_STATECHANGED")]
	public const string CALL_SIGNAL_STATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_ERROR_PREFIX")]
	public const string DBUS_ERROR_PREFIX;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE")]
	public const string DBUS_INTERFACE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_BEARER")]
	public const string DBUS_INTERFACE_BEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_CALL")]
	public const string DBUS_INTERFACE_CALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM")]
	public const string DBUS_INTERFACE_MODEM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_FIRMWARE")]
	public const string DBUS_INTERFACE_MODEM_FIRMWARE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_LOCATION")]
	public const string DBUS_INTERFACE_MODEM_LOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MESSAGING")]
	public const string DBUS_INTERFACE_MODEM_MESSAGING;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEM3GPP")]
	public const string DBUS_INTERFACE_MODEM_MODEM3GPP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEM3GPP_PROFILEMANAGER")]
	public const string DBUS_INTERFACE_MODEM_MODEM3GPP_PROFILEMANAGER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEM3GPP_USSD")]
	public const string DBUS_INTERFACE_MODEM_MODEM3GPP_USSD;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEMCDMA")]
	public const string DBUS_INTERFACE_MODEM_MODEMCDMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_OMA")]
	public const string DBUS_INTERFACE_MODEM_OMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_SAR")]
	public const string DBUS_INTERFACE_MODEM_SAR;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_SIGNAL")]
	public const string DBUS_INTERFACE_MODEM_SIGNAL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_SIMPLE")]
	public const string DBUS_INTERFACE_MODEM_SIMPLE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_TIME")]
	public const string DBUS_INTERFACE_MODEM_TIME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_VOICE")]
	public const string DBUS_INTERFACE_MODEM_VOICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_SIM")]
	public const string DBUS_INTERFACE_SIM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_SMS")]
	public const string DBUS_INTERFACE_SMS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_PATH")]
	public const string DBUS_PATH;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_SERVICE")]
	public const string DBUS_SERVICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MAJOR_VERSION")]
	[Version (since = "1.0")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_INHIBITDEVICE")]
	public const string MANAGER_METHOD_INHIBITDEVICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_REPORTKERNELEVENT")]
	public const string MANAGER_METHOD_REPORTKERNELEVENT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_SCANDEVICES")]
	public const string MANAGER_METHOD_SCANDEVICES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_SETLOGGING")]
	public const string MANAGER_METHOD_SETLOGGING;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_PROPERTY_VERSION")]
	public const string MANAGER_PROPERTY_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MICRO_VERSION")]
	[Version (since = "1.0")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MINOR_VERSION")]
	[Version (since = "1.0")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_CDMA_NID_UNKNOWN")]
	public const int MODEM_CDMA_NID_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_CDMA_SID_UNKNOWN")]
	public const int MODEM_CDMA_SID_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_FIRMWARE_METHOD_LIST")]
	public const string MODEM_FIRMWARE_METHOD_LIST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_FIRMWARE_METHOD_SELECT")]
	public const string MODEM_FIRMWARE_METHOD_SELECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_FIRMWARE_PROPERTY_UPDATESETTINGS")]
	public const string MODEM_FIRMWARE_PROPERTY_UPDATESETTINGS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_GETLOCATION")]
	public const string MODEM_LOCATION_METHOD_GETLOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_INJECTASSISTANCEDATA")]
	public const string MODEM_LOCATION_METHOD_INJECTASSISTANCEDATA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETGPSREFRESHRATE")]
	public const string MODEM_LOCATION_METHOD_SETGPSREFRESHRATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETSUPLSERVER")]
	public const string MODEM_LOCATION_METHOD_SETSUPLSERVER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETUP")]
	public const string MODEM_LOCATION_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_ASSISTANCEDATASERVERS")]
	public const string MODEM_LOCATION_PROPERTY_ASSISTANCEDATASERVERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_CAPABILITIES")]
	public const string MODEM_LOCATION_PROPERTY_CAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_ENABLED")]
	public const string MODEM_LOCATION_PROPERTY_ENABLED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_GPSREFRESHRATE")]
	public const string MODEM_LOCATION_PROPERTY_GPSREFRESHRATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_LOCATION")]
	public const string MODEM_LOCATION_PROPERTY_LOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_SIGNALSLOCATION")]
	public const string MODEM_LOCATION_PROPERTY_SIGNALSLOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_SUPLSERVER")]
	public const string MODEM_LOCATION_PROPERTY_SUPLSERVER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_SUPPORTEDASSISTANCEDATA")]
	public const string MODEM_LOCATION_PROPERTY_SUPPORTEDASSISTANCEDATA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_CREATE")]
	public const string MODEM_MESSAGING_METHOD_CREATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_DELETE")]
	public const string MODEM_MESSAGING_METHOD_DELETE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_LIST")]
	public const string MODEM_MESSAGING_METHOD_LIST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE")]
	public const string MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_MESSAGES")]
	public const string MODEM_MESSAGING_PROPERTY_MESSAGES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES")]
	public const string MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_SIGNAL_ADDED")]
	public const string MODEM_MESSAGING_SIGNAL_ADDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_SIGNAL_DELETED")]
	public const string MODEM_MESSAGING_SIGNAL_DELETED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_COMMAND")]
	public const string MODEM_METHOD_COMMAND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_CREATEBEARER")]
	public const string MODEM_METHOD_CREATEBEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_DELETEBEARER")]
	public const string MODEM_METHOD_DELETEBEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_ENABLE")]
	public const string MODEM_METHOD_ENABLE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_FACTORYRESET")]
	public const string MODEM_METHOD_FACTORYRESET;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_GETCELLINFO")]
	public const string MODEM_METHOD_GETCELLINFO;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_LISTBEARERS")]
	public const string MODEM_METHOD_LISTBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_RESET")]
	public const string MODEM_METHOD_RESET;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTBANDS")]
	public const string MODEM_METHOD_SETCURRENTBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTCAPABILITIES")]
	public const string MODEM_METHOD_SETCURRENTCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTMODES")]
	public const string MODEM_METHOD_SETCURRENTMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETPOWERSTATE")]
	public const string MODEM_METHOD_SETPOWERSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETPRIMARYSIMSLOT")]
	public const string MODEM_METHOD_SETPRIMARYSIMSLOT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_DISABLEFACILITYLOCK")]
	public const string MODEM_MODEM3GPP_METHOD_DISABLEFACILITYLOCK;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_REGISTER")]
	public const string MODEM_MODEM3GPP_METHOD_REGISTER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SCAN")]
	public const string MODEM_MODEM3GPP_METHOD_SCAN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SETCARRIERLOCK")]
	public const string MODEM_MODEM3GPP_METHOD_SETCARRIERLOCK;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SETEPSUEMODEOPERATION")]
	public const string MODEM_MODEM3GPP_METHOD_SETEPSUEMODEOPERATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SETINITIALEPSBEARERSETTINGS")]
	public const string MODEM_MODEM3GPP_METHOD_SETINITIALEPSBEARERSETTINGS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SETNR5GREGISTRATIONSETTINGS")]
	public const string MODEM_MODEM3GPP_METHOD_SETNR5GREGISTRATIONSETTINGS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SETPACKETSERVICESTATE")]
	public const string MODEM_MODEM3GPP_METHOD_SETPACKETSERVICESTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_DELETE")]
	public const string MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_DELETE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_LIST")]
	public const string MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_LIST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_SET")]
	public const string MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_SET;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROFILEMANAGER_PROPERTY_INDEXFIELD")]
	public const string MODEM_MODEM3GPP_PROFILEMANAGER_PROPERTY_INDEXFIELD;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROFILEMANAGER_SIGNAL_UPDATED")]
	public const string MODEM_MODEM3GPP_PROFILEMANAGER_SIGNAL_UPDATED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS")]
	public const string MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_EPSUEMODEOPERATION")]
	public const string MODEM_MODEM3GPP_PROPERTY_EPSUEMODEOPERATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_IMEI")]
	public const string MODEM_MODEM3GPP_PROPERTY_IMEI;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARER")]
	public const string MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARERSETTINGS")]
	public const string MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARERSETTINGS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_NR5GREGISTRATIONSETTINGS")]
	public const string MODEM_MODEM3GPP_PROPERTY_NR5GREGISTRATIONSETTINGS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_OPERATORCODE")]
	public const string MODEM_MODEM3GPP_PROPERTY_OPERATORCODE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_OPERATORNAME")]
	public const string MODEM_MODEM3GPP_PROPERTY_OPERATORNAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_PACKETSERVICESTATE")]
	public const string MODEM_MODEM3GPP_PROPERTY_PACKETSERVICESTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_PCO")]
	public const string MODEM_MODEM3GPP_PROPERTY_PCO;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE")]
	public const string MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE")]
	public const string MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_CANCEL")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_CANCEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_INITIATE")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_INITIATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_RESPOND")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_RESPOND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_STATE")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_METHOD_ACTIVATE")]
	public const string MODEM_MODEMCDMA_METHOD_ACTIVATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL")]
	public const string MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_ESN")]
	public const string MODEM_MODEMCDMA_PROPERTY_ESN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_MEID")]
	public const string MODEM_MODEMCDMA_PROPERTY_MEID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_NID")]
	public const string MODEM_MODEMCDMA_PROPERTY_NID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_SID")]
	public const string MODEM_MODEMCDMA_PROPERTY_SID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED")]
	public const string MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION")]
	public const string MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_CANCELSESSION")]
	public const string MODEM_OMA_METHOD_CANCELSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_SETUP")]
	public const string MODEM_OMA_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION")]
	public const string MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_FEATURES")]
	public const string MODEM_OMA_PROPERTY_FEATURES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS")]
	public const string MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_SESSIONSTATE")]
	public const string MODEM_OMA_PROPERTY_SESSIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_SESSIONTYPE")]
	public const string MODEM_OMA_PROPERTY_SESSIONTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_SIGNAL_SESSIONSTATECHANGED")]
	public const string MODEM_OMA_SIGNAL_SESSIONSTATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_ACCESSTECHNOLOGIES")]
	public const string MODEM_PROPERTY_ACCESSTECHNOLOGIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_BEARERS")]
	public const string MODEM_PROPERTY_BEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CARRIERCONFIGURATION")]
	public const string MODEM_PROPERTY_CARRIERCONFIGURATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CARRIERCONFIGURATIONREVISION")]
	public const string MODEM_PROPERTY_CARRIERCONFIGURATIONREVISION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTBANDS")]
	public const string MODEM_PROPERTY_CURRENTBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTCAPABILITIES")]
	public const string MODEM_PROPERTY_CURRENTCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTMODES")]
	public const string MODEM_PROPERTY_CURRENTMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DEVICE")]
	public const string MODEM_PROPERTY_DEVICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DEVICEIDENTIFIER")]
	public const string MODEM_PROPERTY_DEVICEIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DRIVERS")]
	public const string MODEM_PROPERTY_DRIVERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_EQUIPMENTIDENTIFIER")]
	public const string MODEM_PROPERTY_EQUIPMENTIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_HARDWAREREVISION")]
	public const string MODEM_PROPERTY_HARDWAREREVISION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MANUFACTURER")]
	public const string MODEM_PROPERTY_MANUFACTURER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MAXACTIVEBEARERS")]
	public const string MODEM_PROPERTY_MAXACTIVEBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MAXACTIVEMULTIPLEXEDBEARERS")]
	public const string MODEM_PROPERTY_MAXACTIVEMULTIPLEXEDBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MAXBEARERS")]
	public const string MODEM_PROPERTY_MAXBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MODEL")]
	public const string MODEM_PROPERTY_MODEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_OWNNUMBERS")]
	public const string MODEM_PROPERTY_OWNNUMBERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PLUGIN")]
	public const string MODEM_PROPERTY_PLUGIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PORTS")]
	public const string MODEM_PROPERTY_PORTS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_POWERSTATE")]
	public const string MODEM_PROPERTY_POWERSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PRIMARYPORT")]
	public const string MODEM_PROPERTY_PRIMARYPORT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PRIMARYSIMSLOT")]
	public const string MODEM_PROPERTY_PRIMARYSIMSLOT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_REVISION")]
	public const string MODEM_PROPERTY_REVISION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SIGNALQUALITY")]
	public const string MODEM_PROPERTY_SIGNALQUALITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SIM")]
	public const string MODEM_PROPERTY_SIM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SIMSLOTS")]
	public const string MODEM_PROPERTY_SIMSLOTS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_STATE")]
	public const string MODEM_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_STATEFAILEDREASON")]
	public const string MODEM_PROPERTY_STATEFAILEDREASON;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDBANDS")]
	public const string MODEM_PROPERTY_SUPPORTEDBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDCAPABILITIES")]
	public const string MODEM_PROPERTY_SUPPORTEDCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDIPFAMILIES")]
	public const string MODEM_PROPERTY_SUPPORTEDIPFAMILIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDMODES")]
	public const string MODEM_PROPERTY_SUPPORTEDMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_UNLOCKREQUIRED")]
	public const string MODEM_PROPERTY_UNLOCKREQUIRED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_UNLOCKRETRIES")]
	public const string MODEM_PROPERTY_UNLOCKRETRIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SAR_METHOD_ENABLE")]
	public const string MODEM_SAR_METHOD_ENABLE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SAR_METHOD_SETPOWERLEVEL")]
	public const string MODEM_SAR_METHOD_SETPOWERLEVEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SAR_PROPERTY_POWERLEVEL")]
	public const string MODEM_SAR_PROPERTY_POWERLEVEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SAR_PROPERTY_STATE")]
	public const string MODEM_SAR_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_METHOD_SETUP")]
	public const string MODEM_SIGNAL_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_METHOD_SETUPTHRESHOLDS")]
	public const string MODEM_SIGNAL_METHOD_SETUPTHRESHOLDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_CDMA")]
	public const string MODEM_SIGNAL_PROPERTY_CDMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_ERRORRATETHRESHOLD")]
	public const string MODEM_SIGNAL_PROPERTY_ERRORRATETHRESHOLD;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_EVDO")]
	public const string MODEM_SIGNAL_PROPERTY_EVDO;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_GSM")]
	public const string MODEM_SIGNAL_PROPERTY_GSM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_LTE")]
	public const string MODEM_SIGNAL_PROPERTY_LTE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_NR5G")]
	public const string MODEM_SIGNAL_PROPERTY_NR5G;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_RATE")]
	public const string MODEM_SIGNAL_PROPERTY_RATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_RSSITHRESHOLD")]
	public const string MODEM_SIGNAL_PROPERTY_RSSITHRESHOLD;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_UMTS")]
	public const string MODEM_SIGNAL_PROPERTY_UMTS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_STATECHANGED")]
	public const string MODEM_SIGNAL_STATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIMPLE_METHOD_CONNECT")]
	public const string MODEM_SIMPLE_METHOD_CONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIMPLE_METHOD_DISCONNECT")]
	public const string MODEM_SIMPLE_METHOD_DISCONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIMPLE_METHOD_GETSTATUS")]
	public const string MODEM_SIMPLE_METHOD_GETSTATUS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_METHOD_GETNETWORKTIME")]
	public const string MODEM_TIME_METHOD_GETNETWORKTIME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_PROPERTY_NETWORKTIMEZONE")]
	public const string MODEM_TIME_PROPERTY_NETWORKTIMEZONE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_SIGNAL_NETWORKTIMECHANGED")]
	public const string MODEM_TIME_SIGNAL_NETWORKTIMECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_CALLWAITINGQUERY")]
	public const string MODEM_VOICE_METHOD_CALLWAITINGQUERY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_CALLWAITINGSETUP")]
	public const string MODEM_VOICE_METHOD_CALLWAITINGSETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_CREATECALL")]
	public const string MODEM_VOICE_METHOD_CREATECALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_DELETECALL")]
	public const string MODEM_VOICE_METHOD_DELETECALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_HANGUPALL")]
	public const string MODEM_VOICE_METHOD_HANGUPALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_HANGUPANDACCEPT")]
	public const string MODEM_VOICE_METHOD_HANGUPANDACCEPT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_HOLDANDACCEPT")]
	public const string MODEM_VOICE_METHOD_HOLDANDACCEPT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_LISTCALLS")]
	public const string MODEM_VOICE_METHOD_LISTCALLS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_TRANSFER")]
	public const string MODEM_VOICE_METHOD_TRANSFER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_PROPERTY_CALLS")]
	public const string MODEM_VOICE_PROPERTY_CALLS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_PROPERTY_EMERGENCYONLY")]
	public const string MODEM_VOICE_PROPERTY_EMERGENCYONLY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_SIGNAL_CALLADDED")]
	public const string MODEM_VOICE_SIGNAL_CALLADDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_SIGNAL_CALLDELETED")]
	public const string MODEM_VOICE_SIGNAL_CALLDELETED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_OPERATOR_CODE")]
	public const string SIMPLE_PROPERTY_3GPP_OPERATOR_CODE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_OPERATOR_NAME")]
	public const string SIMPLE_PROPERTY_3GPP_OPERATOR_NAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE")]
	public const string SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES")]
	public const string SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_NID")]
	public const string SIMPLE_PROPERTY_CDMA_NID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_SID")]
	public const string SIMPLE_PROPERTY_CDMA_SID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CURRENT_BANDS")]
	public const string SIMPLE_PROPERTY_CURRENT_BANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_SIGNAL_QUALITY")]
	public const string SIMPLE_PROPERTY_SIGNAL_QUALITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_STATE")]
	public const string SIMPLE_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_CHANGEPIN")]
	public const string SIM_METHOD_CHANGEPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_ENABLEPIN")]
	public const string SIM_METHOD_ENABLEPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_SENDPIN")]
	public const string SIM_METHOD_SENDPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_SENDPUK")]
	public const string SIM_METHOD_SENDPUK;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_SETPREFERREDNETWORKS")]
	public const string SIM_METHOD_SETPREFERREDNETWORKS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_ACTIVE")]
	public const string SIM_PROPERTY_ACTIVE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_EID")]
	public const string SIM_PROPERTY_EID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_EMERGENCYNUMBERS")]
	public const string SIM_PROPERTY_EMERGENCYNUMBERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_ESIMSTATUS")]
	public const string SIM_PROPERTY_ESIMSTATUS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_GID1")]
	public const string SIM_PROPERTY_GID1;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_GID2")]
	public const string SIM_PROPERTY_GID2;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_IMSI")]
	public const string SIM_PROPERTY_IMSI;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_OPERATORIDENTIFIER")]
	public const string SIM_PROPERTY_OPERATORIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_OPERATORNAME")]
	public const string SIM_PROPERTY_OPERATORNAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_PREFERREDNETWORKS")]
	public const string SIM_PROPERTY_PREFERREDNETWORKS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_REMOVABILITY")]
	public const string SIM_PROPERTY_REMOVABILITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_SIMIDENTIFIER")]
	public const string SIM_PROPERTY_SIMIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_SIMTYPE")]
	public const string SIM_PROPERTY_SIMTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_METHOD_SEND")]
	public const string SMS_METHOD_SEND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_METHOD_STORE")]
	public const string SMS_METHOD_STORE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_CLASS")]
	public const string SMS_PROPERTY_CLASS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DATA")]
	public const string SMS_PROPERTY_DATA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DELIVERYREPORTREQUEST")]
	public const string SMS_PROPERTY_DELIVERYREPORTREQUEST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DELIVERYSTATE")]
	public const string SMS_PROPERTY_DELIVERYSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DISCHARGETIMESTAMP")]
	public const string SMS_PROPERTY_DISCHARGETIMESTAMP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_MESSAGEREFERENCE")]
	public const string SMS_PROPERTY_MESSAGEREFERENCE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_NUMBER")]
	public const string SMS_PROPERTY_NUMBER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_PDUTYPE")]
	public const string SMS_PROPERTY_PDUTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_SERVICECATEGORY")]
	public const string SMS_PROPERTY_SERVICECATEGORY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_SMSC")]
	public const string SMS_PROPERTY_SMSC;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_STATE")]
	public const string SMS_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_STORAGE")]
	public const string SMS_PROPERTY_STORAGE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TELESERVICEID")]
	public const string SMS_PROPERTY_TELESERVICEID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TEXT")]
	public const string SMS_PROPERTY_TEXT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TIMESTAMP")]
	public const string SMS_PROPERTY_TIMESTAMP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_VALIDITY")]
	public const string SMS_PROPERTY_VALIDITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_UNLOCK_RETRIES_UNKNOWN")]
	[Version (since = "1.0")]
	public const int UNLOCK_RETRIES_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerAccessTypePreference.get_string")]
	public static unowned string bearer_access_type_preference_get_string (MM.BearerAccessTypePreference val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerAllowedAuth.build_string_from_mask")]
	public static string bearer_allowed_auth_build_string_from_mask (MM.BearerAllowedAuth mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerApnType.build_string_from_mask")]
	public static string bearer_apn_type_build_string_from_mask (MM.BearerApnType mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerIpFamily.build_string_from_mask")]
	public static string bearer_ip_family_build_string_from_mask (MM.BearerIpFamily mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerIpMethod.get_string")]
	public static unowned string bearer_ip_method_get_string (MM.BearerIpMethod val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerMultiplexSupport.get_string")]
	public static unowned string bearer_multiplex_support_get_string (MM.BearerMultiplexSupport val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerProfileSource.get_string")]
	public static unowned string bearer_profile_source_get_string (MM.BearerProfileSource val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerRoamingAllowance.build_string_from_mask")]
	public static string bearer_roaming_allowance_build_string_from_mask (MM.BearerRoamingAllowance mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "BearerType.get_string")]
	public static unowned string bearer_type_get_string (MM.BearerType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CallDirection.get_string")]
	public static unowned string call_direction_get_string (MM.CallDirection val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CallState.get_string")]
	public static unowned string call_state_get_string (MM.CallState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CallStateReason.get_string")]
	public static unowned string call_state_reason_get_string (MM.CallStateReason val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CdmaActivationError.quark")]
	public static GLib.Quark cdma_activation_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CellType.get_string")]
	public static unowned string cell_type_get_string (MM.CellType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ConnectionError.quark")]
	public static GLib.Quark connection_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "CoreError.quark")]
	public static GLib.Quark core_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "FirmwareImageType.get_string")]
	public static unowned string firmware_image_type_get_string (MM.FirmwareImageType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusBearer.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_bearer_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusBearer.override_properties")]
	public static uint gdbus_bearer_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusCall.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_call_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusCall.override_properties")]
	public static uint gdbus_call_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gpp.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem3gpp_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gpp.override_properties")]
	public static uint gdbus_modem3gpp_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gppProfileManager.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem3gpp_profile_manager_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gppProfileManager.override_properties")]
	public static uint gdbus_modem3gpp_profile_manager_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gppUssd.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem3gpp_ussd_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem3gppUssd.override_properties")]
	public static uint gdbus_modem3gpp_ussd_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemCdma.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_cdma_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemCdma.override_properties")]
	public static uint gdbus_modem_cdma_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemFirmware.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_firmware_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemFirmware.override_properties")]
	public static uint gdbus_modem_firmware_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemLocation.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_location_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemLocation.override_properties")]
	public static uint gdbus_modem_location_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemMessaging.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_messaging_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemMessaging.override_properties")]
	public static uint gdbus_modem_messaging_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemOma.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_oma_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemOma.override_properties")]
	public static uint gdbus_modem_oma_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModem.override_properties")]
	public static uint gdbus_modem_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSar.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_sar_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSar.override_properties")]
	public static uint gdbus_modem_sar_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSignal.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_signal_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSignal.override_properties")]
	public static uint gdbus_modem_signal_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSimple.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_simple_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemSimple.override_properties")]
	public static uint gdbus_modem_simple_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemTime.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_time_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemTime.override_properties")]
	public static uint gdbus_modem_time_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemVoice.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_voice_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusModemVoice.override_properties")]
	public static uint gdbus_modem_voice_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusOrgFreedesktopModemManager1.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_org_freedesktop_modem_manager1_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusOrgFreedesktopModemManager1.override_properties")]
	public static uint gdbus_org_freedesktop_modem_manager1_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusSim.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_sim_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusSim.override_properties")]
	public static uint gdbus_sim_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusSms.interface_info")]
	public static unowned GLib.DBusInterfaceInfo gdbus_sms_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "GdbusSms.override_properties")]
	public static uint gdbus_sms_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "MessageError.quark")]
	public static GLib.Quark message_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "MobileEquipmentError.quark")]
	public static GLib.Quark mobile_equipment_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemAccessTechnology.build_string_from_mask")]
	public static string modem_access_technology_build_string_from_mask (MM.ModemAccessTechnology mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemBand.get_string")]
	public static unowned string modem_band_get_string (MM.ModemBand val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemCapability.build_string_from_mask")]
	public static string modem_capability_build_string_from_mask (MM.ModemCapability mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemCdmaActivationState.get_string")]
	public static unowned string modem_cdma_activation_state_get_string (MM.ModemCdmaActivationState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemCdmaRegistrationState.get_string")]
	public static unowned string modem_cdma_registration_state_get_string (MM.ModemCdmaRegistrationState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemCdmaRmProtocol.get_string")]
	public static unowned string modem_cdma_rm_protocol_get_string (MM.ModemCdmaRmProtocol val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemContactsStorage.get_string")]
	public static unowned string modem_contacts_storage_get_string (MM.ModemContactsStorage val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemFirmwareUpdateMethod.build_string_from_mask")]
	public static string modem_firmware_update_method_build_string_from_mask (MM.ModemFirmwareUpdateMethod mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemLocationAssistanceDataType.build_string_from_mask")]
	public static string modem_location_assistance_data_type_build_string_from_mask (MM.ModemLocationAssistanceDataType mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemLocationSource.build_string_from_mask")]
	public static string modem_location_source_build_string_from_mask (MM.ModemLocationSource mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemLock.get_string")]
	public static unowned string modem_lock_get_string (MM.ModemLock val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemMode.build_string_from_mask")]
	public static string modem_mode_build_string_from_mask (MM.ModemMode mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemPortType.get_string")]
	public static unowned string modem_port_type_get_string (MM.ModemPortType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemPowerState.get_string")]
	public static unowned string modem_power_state_get_string (MM.ModemPowerState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemStateChangeReason.get_string")]
	public static unowned string modem_state_change_reason_get_string (MM.ModemStateChangeReason val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemStateFailedReason.get_string")]
	public static unowned string modem_state_failed_reason_get_string (MM.ModemStateFailedReason val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ModemState.get_string")]
	public static unowned string modem_state_get_string (MM.ModemState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "OmaFeature.build_string_from_mask")]
	public static string oma_feature_build_string_from_mask (MM.OmaFeature mask);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "OmaSessionStateFailedReason.get_string")]
	public static unowned string oma_session_state_failed_reason_get_string (MM.OmaSessionStateFailedReason val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "OmaSessionState.get_string")]
	public static unowned string oma_session_state_get_string (MM.OmaSessionState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "OmaSessionType.get_string")]
	public static unowned string oma_session_type_get_string (MM.OmaSessionType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SerialError.quark")]
	public static GLib.Quark serial_error_quark ();
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "ServingCellType.get_string")]
	public static unowned string serving_cell_type_get_string (MM.ServingCellType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SimEsimStatus.get_string")]
	public static unowned string sim_esim_status_get_string (MM.SimEsimStatus val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SimRemovability.get_string")]
	public static unowned string sim_removability_get_string (MM.SimRemovability val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SimType.get_string")]
	public static unowned string sim_type_get_string (MM.SimType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsCdmaServiceCategory.get_string")]
	public static unowned string sms_cdma_service_category_get_string (MM.SmsCdmaServiceCategory val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsCdmaTeleserviceId.get_string")]
	public static unowned string sms_cdma_teleservice_id_get_string (MM.SmsCdmaTeleserviceId val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsDeliveryState.get_string")]
	public static unowned string sms_delivery_state_get_string (MM.SmsDeliveryState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsPduType.get_string")]
	public static unowned string sms_pdu_type_get_string (MM.SmsPduType val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsState.get_string")]
	public static unowned string sms_state_get_string (MM.SmsState val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsStorage.get_string")]
	public static unowned string sms_storage_get_string (MM.SmsStorage val);
	[CCode (cheader_filename = "libmm-glib.h")]
	[Version (replacement = "SmsValidityType.get_string")]
	public static unowned string sms_validity_type_get_string (MM.SmsValidityType val);
}

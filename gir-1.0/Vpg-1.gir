<?xml version="1.0"?>
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="GObject" version="2.0"/>
<include name="GCalc" version="1"/>
<package name="vpg-1"/>
<c:include name="vpg.h"/>
<namespace name="Vpg" version="1" c:prefix="Vpg">
	<enumeration name="QueryError" c:type="VpgQueryError" glib:error-domain="vpg-query-error-quark">
		<member name="server_fatal_error" c:identifier="VPG_QUERY_ERROR_SERVER_FATAL_ERROR" value="0"/>
	</enumeration>
	<class name="Connection" c:type="VpgConnection" glib:type-name="VpgConnection" glib:get-type="vpg_connection_get_type" glib:type-struct="ConnectionClass" parent="GObject.Object">
		<implements name="GCalc.Connection"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="ConnectionPrivate" c:type="VpgConnectionPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vpg_connection_new">
			<return-value transfer-ownership="full">
				<type name="Vpg.Connection" c:type="VpgConnection*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionClass" c:type="VpgConnectionClass" glib:is-gtype-struct-for="Connection">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="ConnectionPrivate" c:type="VpgConnectionPrivate" disguised="1"/>
	<class name="Query" c:type="VpgQuery" glib:type-name="VpgQuery" glib:get-type="vpg_query_get_type" glib:type-struct="QueryClass" parent="GObject.Object">
		<implements name="GCalc.Query"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="QueryPrivate" c:type="VpgQueryPrivate*"/>
		</field>
		<field name="_sql">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="cnc">
			<type name="GCalc.Connection" c:type="VdaConnection*"/>
		</field>
		<constructor name="new" c:identifier="vpg_query_new">
			<return-value transfer-ownership="full">
				<type name="Vpg.Query" c:type="VpgQuery*"/>
			</return-value>
			<parameters>
				<parameter name="con" transfer-ownership="none">
					<type name="GCalc.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="from_sql" c:identifier="vpg_query_new_from_sql">
			<return-value transfer-ownership="full">
				<type name="Vpg.Query" c:type="VpgQuery*"/>
			</return-value>
			<parameters>
				<parameter name="con" transfer-ownership="none">
					<type name="GCalc.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="render_sql" c:identifier="vpg_query_render_sql">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</method>
		<virtual-method name="render_sql" invoker="render_sql">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</virtual-method>
	</class>
	<record name="QueryClass" c:type="VpgQueryClass" glib:is-gtype-struct-for="Query">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="render_sql">
			<callback name="render_sql" c:type="render_sql">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Vpg.Query" c:type="VpgQuery*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="QueryPrivate" c:type="VpgQueryPrivate" disguised="1"/>
	<class name="PostgresRole" c:type="VpgPostgresRole" glib:type-name="VpgPostgresRole" glib:get-type="vpg_postgres_role_get_type" glib:type-struct="PostgresRoleClass" parent="GObject.Object">
		<implements name="GCalc.Role"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="PostgresRolePrivate" c:type="VpgPostgresRolePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vpg_postgres_role_new">
			<return-value transfer-ownership="full">
				<type name="Vpg.PostgresRole" c:type="VpgPostgresRole*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="GCalc.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="user_oid" c:identifier="vpg_postgres_role_new_user_oid">
			<return-value transfer-ownership="full">
				<type name="Vpg.PostgresRole" c:type="VpgPostgresRole*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="GCalc.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="oid" transfer-ownership="none">
					<type name="gint64" c:type="gint64"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="PostgresRoleClass" c:type="VpgPostgresRoleClass" glib:is-gtype-struct-for="PostgresRole">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="PostgresRolePrivate" c:type="VpgPostgresRolePrivate" disguised="1"/>
	<class name="ParsedQuery" c:type="VpgParsedQuery" glib:type-name="VpgParsedQuery" glib:get-type="vpg_parsed_query_get_type" glib:type-struct="ParsedQueryClass" parent="Vpg.Query">
		<implements name="GCalc.PreparedQuery"/>
		<implements name="GCalc.ParsedQuery"/>
		<field name="parent_instance">
			<type name="Vpg.Query" c:type="VpgQuery"/>
		</field>
		<field name="priv">
			<type name="ParsedQueryPrivate" c:type="VpgParsedQueryPrivate*"/>
		</field>
		<field name="_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="_command">
			<type name="GCalc.SqlCommand" c:type="VdaSqlCommand*"/>
		</field>
		<field name="_dummy_params">
			<type name="GCalc.SqlParameters" c:type="VdaSqlParameters*"/>
		</field>
		<field name="_connection">
			<type name="GCalc.Connection" c:type="VdaConnection*"/>
		</field>
		<constructor name="new" c:identifier="vpg_parsed_query_new">
			<return-value transfer-ownership="full">
				<type name="Vpg.ParsedQuery" c:type="VpgParsedQuery*"/>
			</return-value>
			<parameters>
				<parameter name="con" transfer-ownership="none">
					<type name="GCalc.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="from_command" c:identifier="vpg_parsed_query_new_from_command">
			<return-value transfer-ownership="full">
				<type name="Vpg.ParsedQuery" c:type="VpgParsedQuery*"/>
			</return-value>
			<parameters>
				<parameter name="cmd" transfer-ownership="none">
					<type name="GCalc.SqlCommand" c:type="VdaSqlCommand*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="parse" c:identifier="vpg_parsed_query_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ParsedQueryClass" c:type="VpgParsedQueryClass" glib:is-gtype-struct-for="ParsedQuery">
		<field name="parent_class">
			<type name="Vpg.QueryClass" c:type="VpgQueryClass"/>
		</field>
	</record>
	<record name="ParsedQueryPrivate" c:type="VpgParsedQueryPrivate" disguised="1"/>
</namespace>
<c:include name="gcalc/gcalc.h"/>
<namespace name="Vpg" version="1" c:prefix="GCalc">
</namespace>
</repository>

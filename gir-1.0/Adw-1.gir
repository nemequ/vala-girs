<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="4.0"/>
  <package name="libadwaita-1"/>
  <c:include name="adwaita.h"/>
  <namespace name="Adw"
             version="1"
             shared-library="libadwaita-1.so.0"
             c:identifier-prefixes="Adw"
             c:symbol-prefixes="adw">
    <class name="AboutWindow"
           c:symbol-prefix="about_window"
           c:type="AdwAboutWindow"
           version="1.2"
           parent="Window"
           final="1"
           glib:type-name="AdwAboutWindow"
           glib:get-type="adw_about_window_get_type"
           glib:type-struct="AboutWindowClass">
      <doc xml:space="preserve"
           filename="src/adw-about-window.c"
           line="18">A window showing information about the application.

&lt;picture&gt;
  &lt;source srcset="about-window-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="about-window.png" alt="about-window"&gt;
&lt;/picture&gt;

An about window is typically opened when the user activates the `About …`
item in the application's primary menu. All parts of the window are optional.

## Main page

`AdwAboutWindow` prominently displays the application's icon, name, developer
name and version. They can be set with the [property@AboutWindow:application-icon],
[property@AboutWindow:application-name],
[property@AboutWindow:developer-name] and [property@AboutWindow:version]
respectively.

## What's New

`AdwAboutWindow` provides a way for applications to display their release
notes, set with the [property@AboutWindow:release-notes] property.

Release notes are formatted the same way as
[AppStream descriptions](https://freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-description).

The supported formatting options are:

* Paragraph (`&lt;p&gt;`)
* Ordered list (`&lt;ol&gt;`), with list items (`&lt;li&gt;`)
* Unordered list (`&lt;ul&gt;`), with list items (`&lt;li&gt;`)

Within paragraphs and list items, emphasis (`&lt;em&gt;`) and inline code
(`&lt;code&gt;`) text styles are supported. The emphasis is rendered in italic,
while inline code is shown in a monospaced font.

Any text outside paragraphs or list items is ignored.

Nested lists are not supported.

Only one version can be shown at a time. By default, the displayed version
number matches [property@AboutWindow:version]. Use
[property@AboutWindow:release-notes-version] to override it.

## Details

The Details page displays the application comments and links.

The comments can be set with the [property@AboutWindow:comments] property.
Unlike [property@Gtk.AboutDialog:comments], this string can be long and
detailed. It can also contain links and Pango markup.

To set the application website, use [property@AboutWindow:website].
To add extra links below the website, use [method@AboutWindow.add_link].

If the Details page doesn't have any other content besides website, the
website will be displayed on the main page instead.

## Troubleshooting

`AdwAboutWindow` displays the following two links on the main page:

* Support Questions, set with the [property@AboutWindow:support-url] property,
* Report an Issue, set with the [property@AboutWindow:issue-url] property.

Additionally, applications can provide debugging information. It will be
shown separately on the Troubleshooting page. Use the
[property@AboutWindow:debug-info] property to specify it.

It's intended to be attached to issue reports when reporting issues against
the application. As such, it cannot contain markup or links.

`AdwAboutWindow` provides a quick way to save debug information to a file.
When saving, [property@AboutWindow:debug-info-filename] would be used as
the suggested filename.

## Credits and Acknowledgements

The Credits page has the following default sections:

* Developers, set with the [property@AboutWindow:developers] property,
* Designers, set with the [property@AboutWindow:designers] property,
* Artists, set with the [property@AboutWindow:artists] property,
* Documenters, set with the [property@AboutWindow:documenters] property,
* Translators, set with the [property@AboutWindow:translator-credits] property.

When setting translator credits, use the strings `"translator-credits"` or
`"translator_credits"` and mark them as translatable.

The default sections that don't contain any names won't be displayed.

The Credits page can also contain an arbitrary number of extra sections below
the default ones. Use [method@AboutWindow.add_credit_section] to add them.

The Acknowledgements page can be used to acknowledge additional people and
organizations for their non-development contributions. Use
[method@AboutWindow.add_acknowledgement_section] to add sections to it. For
example, it can be used to list backers in a crowdfunded project or to give
special thanks.

Each of the people or organizations can have an email address or a website
specified. To add a email address, use a string like
`Edgar Allan Poe &lt;edgar@poe.com&gt;`. To specify a website with a title, use a
string like `The GNOME Project https://www.gnome.org`:

&lt;picture&gt;
  &lt;source srcset="about-window-credits-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="about-window-credits.png" alt="about-window-credits"&gt;
&lt;/picture&gt;

## Legal

The Legal page displays the copyright and licensing information for the
application and other modules.

The copyright string is set with the [property@AboutWindow:copyright]
property and should be a short string of one or two lines, for example:
`© 2022 Example`.

Licensing information can be quickly set from a list of known licenses with
the [property@AboutWindow:license-type] property. If the application's
license is not in the list, [property@AboutWindow:license] can be used
instead.

To add information about other modules, such as application dependencies or
data, use [method@AboutWindow.add_legal_section].

## Constructing

To make constructing an `AdwAboutWindow` as convenient as possible, you can
use the function [func@show_about_window] which constructs and shows a
window.

```c
static void
show_about (GtkApplication *app)
{
  const char *developers[] = {
    "Angela Avery",
    NULL
  };

  const char *designers[] = {
    "GNOME Design Team",
    NULL
  };

  adw_show_about_window (gtk_application_get_active_window (app),
                         "application-name", _("Example"),
                         "application-icon", "org.example.App",
                         "version", "1.2.3",
                         "copyright", "© 2022 Angela Avery",
                         "issue-url", "https://gitlab.gnome.org/example/example/-/issues/new",
                         "license-type", GTK_LICENSE_GPL_3_0,
                         "developers", developers,
                         "designers", designers,
                         "translator-credits", _("translator-credits"),
                         NULL);
}
```

## CSS nodes

`AdwAboutWindow` has a main CSS node with the name `window` and the
style class `.about`.</doc>
      <source-position filename="src/adw-about-window.h" line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new"
                   c:identifier="adw_about_window_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1936">Creates a new `AdwAboutWindow`.</doc>
        <source-position filename="src/adw-about-window.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="1941">the newly created `AdwAboutWindow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_acknowledgement_section"
              c:identifier="adw_about_window_add_acknowledgement_section"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2957">Adds a section to the Acknowledgements page.

This can be used to acknowledge additional people and organizations for their
non-development contributions - for example, backers in a crowdfunded
project.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]</doc>
        <source-position filename="src/adw-about-window.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2959">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2960">the section name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="people" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2961">the list of names</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_credit_section"
              c:identifier="adw_about_window_add_credit_section"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2914">Adds an extra section to the Credits page.

Extra sections are displayed below the standard categories.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2916">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2917">the section name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="people" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2918">the list of names</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_legal_section"
              c:identifier="adw_about_window_add_legal_section"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3183">Adds an extra section to the Legal page.

Extra sections will be displayed below the application's own information.

The parameters @copyright, @license_type and @license will be used to present
the it the same way as [property@AboutWindow:copyright],
[property@AboutWindow:license-type] and [property@AboutWindow:license] are
for the application's own information.

See those properties for more details.

This can be useful to attribute the application dependencies or data.

Examples:

```c
adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
                                    _("Copyright and a known license"),
                                    "© 2022 Example",
                                    GTK_LICENSE_LGPL_2_1,
                                    NULL);

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
                                    _("Copyright and custom license"),
                                    "© 2022 Example",
                                    GTK_LICENSE_CUSTOM,
                                    "Custom license text");

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
                                    _("Copyright only"),
                                    "© 2022 Example",
                                    GTK_LICENSE_UNKNOWN,
                                    NULL);

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
                                    _("Custom license only"),
                                    NULL,
                                    GTK_LICENSE_CUSTOM,
                                    "Something completely custom here.");
```</doc>
        <source-position filename="src/adw-about-window.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3185">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3186">the name of the section</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="copyright"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3187">a copyright string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="license_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3188">the type of license</doc>
            <type name="Gtk.License" c:type="GtkLicense"/>
          </parameter>
          <parameter name="license"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3189">custom license information</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_link"
              c:identifier="adw_about_window_add_link"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2470">Adds an extra link to the Details page.

Extra links are displayed under the comment and website.

Underlines in @title will be interpreted as indicating a mnemonic.

See [property@AboutWindow:website].</doc>
        <source-position filename="src/adw-about-window.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2472">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2473">the link title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2474">the link URL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_application_icon"
              c:identifier="adw_about_window_get_application_icon"
              glib:get-property="application-icon"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="application-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1951">Gets the name of the application icon for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="1957">the application icon name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="1953">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_application_name"
              c:identifier="adw_about_window_get_application_name"
              glib:get-property="application-name"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="application-name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1999">Gets the application name for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2005">the application name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2001">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_artists"
              c:identifier="adw_about_window_get_artists"
              glib:get-property="artists"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="artists"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2736">Gets the list of artists of the application.</doc>
        <source-position filename="src/adw-about-window.h" line="118"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2742">The list of artists</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2738">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_comments"
              c:identifier="adw_about_window_get_comments"
              glib:get-property="comments"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="comments"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2276">Gets the comments about the application.</doc>
        <source-position filename="src/adw-about-window.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2282">the comments</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2278">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_copyright"
              c:identifier="adw_about_window_get_copyright"
              glib:get-property="copyright"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="copyright"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2998">Gets the copyright information for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3004">the copyright information</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3000">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_debug_info"
              c:identifier="adw_about_window_get_debug_info"
              glib:get-property="debug-info"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="debug-info"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2517">Gets the debug information for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2523">the debug information</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2519">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_debug_info_filename"
              c:identifier="adw_about_window_get_debug_info_filename"
              glib:get-property="debug-info-filename"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="debug-info-filename"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2572">Gets the debug information filename for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2578">the debug information filename</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2574">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_designers"
              c:identifier="adw_about_window_get_designers"
              glib:get-property="designers"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="designers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2678">Gets the list of designers of the application.</doc>
        <source-position filename="src/adw-about-window.h" line="112"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2684">The list of designers</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2680">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_developer_name"
              c:identifier="adw_about_window_get_developer_name"
              glib:get-property="developer-name"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="developer-name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2047">Gets the developer name for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2053">the developer_name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2049">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_developers"
              c:identifier="adw_about_window_get_developers"
              glib:get-property="developers"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="developers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2620">Gets the list of developers of the application.</doc>
        <source-position filename="src/adw-about-window.h" line="106"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2626">The list of developers</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2622">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documenters"
              c:identifier="adw_about_window_get_documenters"
              glib:get-property="documenters"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="documenters"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2794">Gets the list of documenters of the application.</doc>
        <source-position filename="src/adw-about-window.h" line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2800">The list of documenters</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2796">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_issue_url"
              c:identifier="adw_about_window_get_issue_url"
              glib:get-property="issue-url"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="issue-url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2423">Gets the issue tracker URL for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2429">the issue tracker URL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2425">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="adw_about_window_get_license"
              glib:get-property="license"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="license"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3118">Gets the license for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3124">the license</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3120">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_type"
              c:identifier="adw_about_window_get_license_type"
              glib:get-property="license-type"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="license-type"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3052">Gets the license type for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3058">the license type</doc>
          <type name="Gtk.License" c:type="GtkLicense"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3054">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_release_notes"
              c:identifier="adw_about_window_get_release_notes"
              glib:get-property="release-notes"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="release-notes"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2207">Gets the release notes for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2213">the release notes</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2209">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_release_notes_version"
              c:identifier="adw_about_window_get_release_notes_version"
              glib:get-property="release-notes-version"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="release-notes-version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2150">Gets the version described by the application's release notes.</doc>
        <source-position filename="src/adw-about-window.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2156">the release notes version</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2152">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_support_url"
              c:identifier="adw_about_window_get_support_url"
              glib:get-property="support-url"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="support-url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2376">Gets the URL of the support page for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2382">the support page URL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2378">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_translator_credits"
              c:identifier="adw_about_window_get_translator_credits"
              glib:get-property="translator-credits"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="translator-credits"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2852">Gets the translator credits string.</doc>
        <source-position filename="src/adw-about-window.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2858">The translator credits string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2854">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="adw_about_window_get_version"
              glib:get-property="version"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2100">Gets the version for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2106">the version</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2102">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_website"
              c:identifier="adw_about_window_get_website"
              glib:get-property="website"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="website"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2326">Gets the application website URL for @self.</doc>
        <source-position filename="src/adw-about-window.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="2332">the website URL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2328">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_application_icon"
              c:identifier="adw_about_window_set_application_icon"
              glib:set-property="application-icon"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="application-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1969">Sets the name of the application icon for @self.

The icon is displayed at the top of the main page.</doc>
        <source-position filename="src/adw-about-window.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="1971">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="application_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="1972">the application icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_application_name"
              c:identifier="adw_about_window_set_application_name"
              glib:set-property="application-name"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="application-name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2017">Sets the application name for @self.

The name is displayed at the top of the main page.</doc>
        <source-position filename="src/adw-about-window.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2019">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="application_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2020">the application name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_artists"
              c:identifier="adw_about_window_set_artists"
              glib:set-property="artists"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="artists"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2754">Sets the list of artists of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2756">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="artists"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2757">the list of artists</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_comments"
              c:identifier="adw_about_window_set_comments"
              glib:set-property="comments"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="comments"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2294">Sets the comments about the application.

Comments will be shown on the Details page, above links.

Unlike [property@Gtk.AboutDialog:comments], this string can be long and
detailed. It can also contain links and Pango markup.</doc>
        <source-position filename="src/adw-about-window.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2296">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="comments" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2297">the comments</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_copyright"
              c:identifier="adw_about_window_set_copyright"
              glib:set-property="copyright"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="copyright"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3016">Sets the copyright information for @self.

This should be a short string of one or two lines, for example:
`© 2022 Example`.

The copyright information will be displayed on the Legal page, before the
application license.

[method@AboutWindow.add_legal_section] can be used to add copyright
information for the application dependencies or other components.</doc>
        <source-position filename="src/adw-about-window.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3018">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="copyright" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3019">the copyright information</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_debug_info"
              c:identifier="adw_about_window_set_debug_info"
              glib:set-property="debug-info"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="debug-info"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2535">Sets the debug information for @self.

Debug information will be shown on the Troubleshooting page. It's intended
to be attached to issue reports when reporting issues against the
application.

`AdwAboutWindow` provides a quick way to save debug information to a file.
When saving, [property@AboutWindow:debug-info-filename] would be used as
the suggested filename.

Debug information cannot contain markup or links.</doc>
        <source-position filename="src/adw-about-window.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2537">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="debug_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2538">the debug information</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_debug_info_filename"
              c:identifier="adw_about_window_set_debug_info_filename"
              glib:set-property="debug-info-filename"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="debug-info"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2590">Sets the debug information filename for @self.

It will be used as the suggested filename when saving debug information to a
file.

See [property@AboutWindow:debug-info].</doc>
        <source-position filename="src/adw-about-window.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2592">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2593">the debug info filename</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_designers"
              c:identifier="adw_about_window_set_designers"
              glib:set-property="designers"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="designers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2696">Sets the list of designers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2698">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="designers"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2699">the list of designers</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_developer_name"
              c:identifier="adw_about_window_set_developer_name"
              glib:set-property="developer-name"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="developer-name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2065">Sets the developer name for @self.

The developer name is displayed on the main page, under the application name.

If the application is developed by multiple people, the developer name can be
set to values like "AppName team", "AppName developers" or
"The AppName project", and the individual contributors can be listed on the
Credits page, with [property@AboutWindow:developers] and related properties.</doc>
        <source-position filename="src/adw-about-window.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2067">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="developer_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2068">the developer name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_developers"
              c:identifier="adw_about_window_set_developers"
              glib:set-property="developers"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="developers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2638">Sets the list of developers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2640">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="developers"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2641">the list of developers</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_documenters"
              c:identifier="adw_about_window_set_documenters"
              glib:set-property="documenters"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="documenters"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2812">Sets the list of documenters of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2814">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="documenters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2815">the list of documenters</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_issue_url"
              c:identifier="adw_about_window_set_issue_url"
              glib:set-property="issue-url"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="issue-url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2441">Sets the issue tracker URL for @self.

The issue tracker link is displayed on the main page.</doc>
        <source-position filename="src/adw-about-window.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2443">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="issue_url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2444">the issue tracker URL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license"
              c:identifier="adw_about_window_set_license"
              glib:set-property="license"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="license"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3136">Sets the license for @self.

This can be used to set a custom text for the license if it can't be set via
[property@AboutWindow:license-type].

When set, [property@AboutWindow:license-type] will be set to
`GTK_LICENSE_CUSTOM`.

The license text will be displayed on the Legal page, below the copyright
information.

License text can contain Pango markup and links.

[method@AboutWindow.add_legal_section] can be used to add license information
for the application dependencies or other components.</doc>
        <source-position filename="src/adw-about-window.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3138">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="license" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3139">the license</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license_type"
              c:identifier="adw_about_window_set_license_type"
              glib:set-property="license-type"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="license-type"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="3070">Sets the license for @self from a list of known licenses.

If the application's license is not in the list,
[property@AboutWindow:license] can be used instead. The license type will be
automatically set to `GTK_LICENSE_CUSTOM` in that case.

If @license_type is `GTK_LICENSE_UNKNOWN`, no information will be displayed.

If @license_type is different from `GTK_LICENSE_CUSTOM`.
[property@AboutWindow:license] will be cleared out.

The license description will be displayed on the Legal page, below the
copyright information.

[method@AboutWindow.add_legal_section] can be used to add license information
for the application dependencies or other components.</doc>
        <source-position filename="src/adw-about-window.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3072">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="license_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="3073">the license type</doc>
            <type name="Gtk.License" c:type="GtkLicense"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_release_notes"
              c:identifier="adw_about_window_set_release_notes"
              glib:set-property="release-notes"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="release-notes"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2225">Sets the release notes for @self.

Release notes are displayed on the the What's New page.

Release notes are formatted the same way as
[AppStream descriptions](https://freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-description).

The supported formatting options are:

* Paragraph (`&lt;p&gt;`)
* Ordered list (`&lt;ol&gt;`), with list items (`&lt;li&gt;`)
* Unordered list (`&lt;ul&gt;`), with list items (`&lt;li&gt;`)

Within paragraphs and list items, emphasis (`&lt;em&gt;`) and inline code
(`&lt;code&gt;`) text styles are supported. The emphasis is rendered in italic,
while inline code is shown in a monospaced font.

Any text outside paragraphs or list items is ignored.

Nested lists are not supported.

`AdwAboutWindow` displays the version above the release notes. If set, the
[property@AboutWindow:release-notes-version] of the property will be used
as the version; otherwise, [property@AboutWindow:version] is used.</doc>
        <source-position filename="src/adw-about-window.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2227">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="release_notes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2228">the release notes</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_release_notes_version"
              c:identifier="adw_about_window_set_release_notes_version"
              glib:set-property="release-notes-version"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="release-notes-version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2168">Sets the version described by the application's release notes.

The release notes version is displayed on the What's New page, above the
release notes.

If not set, [property@AboutWindow:version] will be used instead.

For example, an application with the current version 2.0.2 might want to
keep the release notes from 2.0.0, and set the release notes version
accordingly.

See [property@AboutWindow:release-notes].</doc>
        <source-position filename="src/adw-about-window.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2170">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2171">the release notes version</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_support_url"
              c:identifier="adw_about_window_set_support_url"
              glib:set-property="support-url"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="support-url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2394">Sets the URL of the support page for @self.

The support page link is displayed on the main page.</doc>
        <source-position filename="src/adw-about-window.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2396">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="support_url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2397">the support page URL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translator_credits"
              c:identifier="adw_about_window_set_translator_credits"
              glib:set-property="translator-credits"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="translator-credits"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2870">Sets the translator credits string.

It will be displayed on the Credits page.

This string should be `"translator-credits"` or `"translator_credits"` and
should be marked as translatable.

The string may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <source-position filename="src/adw-about-window.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2872">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="translator_credits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2873">the translator credits</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="adw_about_window_set_version"
              glib:set-property="version"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2118">Sets the version for @self.

The version is displayed on the main page.

If [property@AboutWindow:release-notes-version] is not set, the version will
also be displayed above the release notes on the What's New page.</doc>
        <source-position filename="src/adw-about-window.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2120">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2121">the version</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_website"
              c:identifier="adw_about_window_set_website"
              glib:set-property="website"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="website"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="2344">Sets the application website URL for @self.

Website is displayed on the Details page, below comments, or on the main page
if the Details page doesn't have any other content.

Applications can add other links below, see [method@AboutWindow.add_link].</doc>
        <source-position filename="src/adw-about-window.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2346">an about window</doc>
            <type name="AboutWindow" c:type="AdwAboutWindow*"/>
          </instance-parameter>
          <parameter name="website" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="2347">the website URL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="application-icon"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_application_icon"
                getter="get_application_icon">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_application_icon"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_application_icon"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1371">The name of the application icon.

The icon is displayed at the top of the main page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="application-name"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_application_name"
                getter="get_application_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_application_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_application_name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1385">The name of the application.

The name is displayed at the top of the main page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="artists"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_artists"
                getter="get_artists">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_artists"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_artists"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1648">The list of artists of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="comments"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_comments"
                getter="get_comments">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_comments"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_comments"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1495">The comments about the application.

Comments will be shown on the Details page, above links.

Unlike [property@Gtk.AboutDialog:comments], this string can be long and
detailed. It can also contain links and Pango markup.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="copyright"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_copyright"
                getter="get_copyright">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_copyright"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_copyright"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1729">The copyright information.

This should be a short string of one or two lines, for example:
`© 2022 Example`.

The copyright information will be displayed on the Legal page, above the
application license.

[method@AboutWindow.add_legal_section] can be used to add copyright
information for the application dependencies or other components.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="debug-info"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_debug_info"
                getter="get_debug_info">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_debug_info"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_debug_info"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1557">The debug information.

Debug information will be shown on the Troubleshooting page. It's intended
to be attached to issue reports when reporting issues against the
application.

`AdwAboutWindow` provides a quick way to save debug information to a file.
When saving, [property@AboutWindow:debug-info-filename] would be used as
the suggested filename.

Debug information cannot contain markup or links.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="debug-info-filename"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_debug_info_filename"
                getter="get_debug_info_filename">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_debug_info_filename"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_debug_info_filename"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1579">The debug information filename.

It will be used as the suggested filename when saving debug information to
a file.

See [property@AboutWindow:debug-info].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="designers"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_designers"
                getter="get_designers">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_designers"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_designers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1622">The list of designers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="developer-name"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_developer_name"
                getter="get_developer_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_developer_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_developer_name"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1399">The developer name.

The developer name is displayed on the main page, under the application
name.

If the application is developed by multiple people, the developer name can
be set to values like "AppName team", "AppName developers" or
"The AppName project", and the individual contributors can be listed on the
Credits page, with [property@AboutWindow:developers] and related
properties.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="developers"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_developers"
                getter="get_developers">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_developers"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_developers"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1596">The list of developers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="documenters"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_documenters"
                getter="get_documenters">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_documenters"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_documenters"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1674">The list of documenters of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="issue-url"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_issue_url"
                getter="get_issue_url">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_issue_url"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_issue_url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1543">The URL for the application's issue tracker.

The issue tracker link is displayed on the main page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="license"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_license"
                getter="get_license">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_license"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_license"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1780">The license text.

This can be used to set a custom text for the license if it can't be set
via [property@AboutWindow:license-type].

When set, [property@AboutWindow:license-type] will be set to
`GTK_LICENSE_CUSTOM`.

The license text will be displayed on the Legal page, below the copyright
information.

License text can contain Pango markup and links.

[method@AboutWindow.add_legal_section] can be used to add license
information for the application dependencies or other components.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="license-type"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_license_type"
                getter="get_license_type"
                default-value="GTK_LICENSE_UNKNOWN">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_license_type"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_license_type"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1750">The license type.

Allows to set the application's license froma list of known licenses.

If the application's license is not in the list,
[property@AboutWindow:license] can be used instead. The license type will
be automatically set to `GTK_LICENSE_CUSTOM` in that case.

If set to `GTK_LICENSE_UNKNOWN`, no information will be displayed.

If the license type is different from `GTK_LICENSE_CUSTOM`.
[property@AboutWindow:license] will be cleared out.

The license description will be displayed on the Legal page, below the
copyright information.

[method@AboutWindow.add_legal_section] can be used to add license
information for the application dependencies or other components.</doc>
        <type name="Gtk.License"/>
      </property>
      <property name="release-notes"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_release_notes"
                getter="get_release_notes">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_release_notes"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_release_notes"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1460">The release notes of the application.

Release notes are displayed on the the What's New page.

Release notes are formatted the same way as
[AppStream descriptions](https://freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-description).

The supported formatting options are:

* Paragraph (`&lt;p&gt;`)
* Ordered list (`&lt;ol&gt;`), with list items (`&lt;li&gt;`)
* Unordered list (`&lt;ul&gt;`), with list items (`&lt;li&gt;`)

Within paragraphs and list items, emphasis (`&lt;em&gt;`) and inline code
(`&lt;code&gt;`) text styles are supported. The emphasis is rendered in italic,
while inline code is shown in a monospaced font.

Any text outside paragraphs or list items is ignored.

Nested lists are not supported.

`AdwAboutWindow` displays the version above the release notes. If set, the
[property@AboutWindow:release-notes-version] of the property will be used
as the version; otherwise, [property@AboutWindow:version] is used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="release-notes-version"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_release_notes_version"
                getter="get_release_notes_version">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_release_notes_version"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_release_notes_version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1437">The version described by the application's release notes.

The release notes version is displayed on the What's New page, above the
release notes.

If not set, [property@AboutWindow:version] will be used instead.

For example, an application with the current version 2.0.2 might want to
keep the release notes from 2.0.0, and set the release notes version
accordingly.

See [property@AboutWindow:release-notes].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="support-url"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_support_url"
                getter="get_support_url">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_support_url"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_support_url"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1529">The URL of the application's support page.

The support page link is displayed on the main page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="translator-credits"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_translator_credits"
                getter="get_translator_credits">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_translator_credits"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_translator_credits"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1700">The translator credits string.

It will be displayed on the Credits page.

This string should be `"translator-credits"` or `"translator_credits"` and
should be marked as translatable.

The string may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_version"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_version"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1420">The version of the application.

The version is displayed on the main page.

If [property@AboutWindow:release-notes-version] is not set, the version
will also be displayed above the release notes on the What's New page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="website"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_website"
                getter="get_website">
        <attribute name="org.gtk.Property.get"
                   value="adw_about_window_get_website"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_about_window_set_website"/>
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1512">The URL of the application's website.

Website is displayed on the Details page, below comments, or on the main
page if the Details page doesn't have any other content.

Applications can add other links below, see [method@AboutWindow.add_link].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activate-link" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-about-window.c"
             line="1808">Emitted when a URL is activated.

Applications may connect to it to override the default behavior, which is
to call [func@Gtk.show_uri].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="1818">`TRUE` if the link has been activated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-about-window.c"
                 line="1811">the URI to activate</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AboutWindowClass"
            c:type="AdwAboutWindowClass"
            glib:is-gtype-struct-for="AboutWindow">
      <source-position filename="src/adw-about-window.h" line="23"/>
      <field name="parent_class">
        <type name="WindowClass" c:type="AdwWindowClass"/>
      </field>
    </record>
    <class name="ActionRow"
           c:symbol-prefix="action_row"
           c:type="AdwActionRow"
           parent="PreferencesRow"
           glib:type-name="AdwActionRow"
           glib:get-type="adw_action_row_get_type"
           glib:type-struct="ActionRowClass">
      <doc xml:space="preserve"
           filename="src/adw-action-row.c"
           line="12">A [class@Gtk.ListBoxRow] used to present actions.

&lt;picture&gt;
  &lt;source srcset="action-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="action-row.png" alt="action-row"&gt;
&lt;/picture&gt;

The `AdwActionRow` widget can have a title, a subtitle and an icon. The row
can receive additional widgets at its end, or prefix widgets at its start.

It is convenient to present a preference and its related actions.

`AdwActionRow` is unactivatable by default, giving it an activatable widget
will automatically make it activatable, but unsetting it won't change the
row's activatability.

## AdwActionRow as GtkBuildable

The `AdwActionRow` implementation of the [iface@Gtk.Buildable] interface
supports adding a child at its end by specifying “suffix” or omitting the
“type” attribute of a &lt;child&gt; element.

It also supports adding a child as a prefix widget by specifying “prefix” as
the “type” attribute of a &lt;child&gt; element.

## CSS nodes

`AdwActionRow` has a main CSS node with name `row`.

It contains the subnode `box.header` for its main horizontal box, and
`box.title` for the vertical box containing the title and subtitle labels.

It contains subnodes `label.title` and `label.subtitle` representing
respectively the title label and subtitle label.</doc>
      <source-position filename="src/adw-action-row.h" line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_action_row_new">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="384">Creates a new `AdwActionRow`.</doc>
        <source-position filename="src/adw-action-row.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="389">the newly created `AdwActionRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="822">Activates @self.</doc>
        <source-position filename="src/adw-action-row.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="824">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="adw_action_row_activate">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="822">Activates @self.</doc>
        <source-position filename="src/adw-action-row.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="824">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_prefix" c:identifier="adw_action_row_add_prefix">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="397">Adds a prefix widget to @self.</doc>
        <source-position filename="src/adw-action-row.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="399">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="400">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_suffix" c:identifier="adw_action_row_add_suffix">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="419">Adds a suffix widget to @self.</doc>
        <source-position filename="src/adw-action-row.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="421">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="422">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activatable_widget"
              c:identifier="adw_action_row_get_activatable_widget"
              glib:get-property="activatable-widget">
        <attribute name="org.gtk.Method.get_property"
                   value="activatable-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="570">Gets the widget activated when @self is activated.</doc>
        <source-position filename="src/adw-action-row.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="576">the activatable widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="572">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_action_row_get_icon_name"
              glib:get-property="icon-name"
              deprecated="1"
              deprecated-version="1.3">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="519">Gets the icon name for @self.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ActionRow.add_prefix] to add an icon.</doc-deprecated>
        <source-position filename="src/adw-action-row.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="525">the icon name for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="521">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="adw_action_row_get_subtitle"
              glib:get-property="subtitle">
        <attribute name="org.gtk.Method.get_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="471">Gets the subtitle for @self.</doc>
        <source-position filename="src/adw-action-row.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="477">the subtitle for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="473">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_lines"
              c:identifier="adw_action_row_get_subtitle_lines"
              glib:get-property="subtitle-lines">
        <attribute name="org.gtk.Method.get_property" value="subtitle-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="719">Gets the number of lines at the end of which the subtitle label will be
ellipsized.</doc>
        <source-position filename="src/adw-action-row.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="726">the number of lines at the end of which the subtitle label will be
  ellipsized</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="721">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_selectable"
              c:identifier="adw_action_row_get_subtitle_selectable"
              glib:get-property="subtitle-selectable"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="subtitle-selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="773">Gets whether the user can copy the subtitle from the label</doc>
        <source-position filename="src/adw-action-row.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="779">whether the user can copy the subtitle from the label</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="775">a `AdwActionRow`</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_lines"
              c:identifier="adw_action_row_get_title_lines"
              glib:get-property="title-lines">
        <attribute name="org.gtk.Method.get_property" value="title-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="665">Gets the number of lines at the end of which the title label will be
ellipsized.</doc>
        <source-position filename="src/adw-action-row.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-action-row.c"
               line="672">the number of lines at the end of which the title label will be
  ellipsized</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="667">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_action_row_remove">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="441">Removes a child from @self.</doc>
        <source-position filename="src/adw-action-row.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="443">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="444">the child to be removed</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_activatable_widget"
              c:identifier="adw_action_row_set_activatable_widget"
              glib:set-property="activatable-widget">
        <attribute name="org.gtk.Method.set_property"
                   value="activatable-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="603">Sets the widget to activate when @self is activated.

The row can be activated either by clicking on it, calling
[method@ActionRow.activate], or via mnemonics in the title or the subtitle.
See the [property@PreferencesRow:use-underline] property to enable mnemonics.

The target widget will be activated by emitting the
[signal@Gtk.Widget::mnemonic-activate] signal on it.</doc>
        <source-position filename="src/adw-action-row.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="605">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="606">the target widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_action_row_set_icon_name"
              glib:set-property="icon-name"
              deprecated="1"
              deprecated-version="1.3">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="541">Sets the icon name for @self.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ActionRow.add_prefix] to add an icon.</doc-deprecated>
        <source-position filename="src/adw-action-row.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="543">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="544">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="adw_action_row_set_subtitle"
              glib:set-property="subtitle">
        <attribute name="org.gtk.Method.set_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="491">Sets the subtitle for @self.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <source-position filename="src/adw-action-row.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="493">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="494">the subtitle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_lines"
              c:identifier="adw_action_row_set_subtitle_lines"
              glib:set-property="subtitle-lines">
        <attribute name="org.gtk.Method.set_property" value="subtitle-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="741">Sets the number of lines at the end of which the subtitle label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="src/adw-action-row.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="743">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="744">the number of lines at the end of which the subtitle label will be ellipsized</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_selectable"
              c:identifier="adw_action_row_set_subtitle_selectable"
              glib:set-property="subtitle-selectable"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="subtitle-selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="793">Sets whether the user can copy the subtitle from the label

See also [property@Gtk.Label:selectable].</doc>
        <source-position filename="src/adw-action-row.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="795">a `AdwActionRow`</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle_selectable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="796">`TRUE` if the user can copy the subtitle from the label</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title_lines"
              c:identifier="adw_action_row_set_title_lines"
              glib:set-property="title-lines">
        <attribute name="org.gtk.Method.set_property" value="title-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="687">Sets the number of lines at the end of which the title label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="src/adw-action-row.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="689">an action row</doc>
            <type name="ActionRow" c:type="AdwActionRow*"/>
          </instance-parameter>
          <parameter name="title_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-action-row.c"
                 line="690">the number of lines at the end of which the title label will be ellipsized</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="activatable-widget"
                writable="1"
                transfer-ownership="none"
                setter="set_activatable_widget"
                getter="get_activatable_widget">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_activatable_widget"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_activatable_widget"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="261">The widget to activate when the row is activated.

The row can be activated either by clicking on it, calling
[method@ActionRow.activate], or via mnemonics in the title or the subtitle.
See the [property@PreferencesRow:use-underline] property to enable
mnemonics.

The target widget will be activated by emitting the
[signal@Gtk.Widget::mnemonic-activate] signal on it.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon-name"
                deprecated="1"
                deprecated-version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="249">The icon name for this row.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ActionRow.add_prefix] to add an icon.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_subtitle"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="236">The subtitle for this row.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle-lines"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_lines"
                getter="get_subtitle_lines"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_subtitle_lines"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_subtitle_lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="292">The number of lines at the end of which the subtitle label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="subtitle-selectable"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_selectable"
                getter="get_subtitle_selectable"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_subtitle_selectable"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_subtitle_selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="306">Whether the user can copy the subtitle from the label.

See also [property@Gtk.Label:selectable].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title-lines"
                writable="1"
                transfer-ownership="none"
                setter="set_title_lines"
                getter="get_title_lines"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_action_row_get_title_lines"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_action_row_set_title_lines"/>
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="279">The number of lines at the end of which the title label will be ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="AdwPreferencesRow"/>
      </field>
      <glib:signal name="activated" when="last">
        <doc xml:space="preserve"
             filename="src/adw-action-row.c"
             line="322">This signal is emitted after the row has been activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ActionRowClass"
            c:type="AdwActionRowClass"
            glib:is-gtype-struct-for="ActionRow">
      <source-position filename="src/adw-action-row.h" line="37"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-action-row.h"
             line="26">The parent class</doc>
        <type name="PreferencesRowClass" c:type="AdwPreferencesRowClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/adw-action-row.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-action-row.c"
                   line="824">an action row</doc>
              <type name="ActionRow" c:type="AdwActionRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Animation"
           c:symbol-prefix="animation"
           c:type="AdwAnimation"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="AdwAnimation"
           glib:get-type="adw_animation_get_type"
           glib:type-struct="AnimationClass">
      <doc xml:space="preserve"
           filename="src/adw-animation.c"
           line="15">A base class for animations.

`AdwAnimation` represents an animation on a widget. It has a target that
provides a value to animate, and a state indicating whether the
animation hasn't been started yet, is playing, paused or finished.

Currently there are two concrete animation types:
[class@TimedAnimation] and [class@SpringAnimation].

`AdwAnimation` will automatically skip the animation if
[property@Animation:widget] is unmapped, or if
[property@Gtk.Settings:gtk-enable-animations] is `FALSE`.

The [signal@Animation::done] signal can be used to perform an action after
the animation ends, for example hiding a widget after animating its
[property@Gtk.Widget:opacity] to 0.

`AdwAnimation` will be kept alive while the animation is playing. As such,
it's safe to create an animation, start it and immediately unref it:
A fire-and-forget animation:

```c
static void
animation_cb (double    value,
              MyObject *self)
{
  // Do something with @value
}

static void
my_object_animate (MyObject *self)
{
  AdwAnimationTarget *target =
    adw_callback_animation_target_new ((AdwAnimationTargetFunc) animation_cb,
                                       self, NULL);
  g_autoptr (AdwAnimation) animation =
    adw_timed_animation_new (widget, 0, 1, 250, target);

  adw_animation_play (animation);
}
```

If there's a chance the previous animation for the same target hasn't yet
finished, the previous animation should be stopped first, or the existing
`AdwAnimation` object can be reused.</doc>
      <source-position filename="src/adw-animation.h" line="36"/>
      <method name="get_follow_enable_animations_setting"
              c:identifier="adw_animation_get_follow_enable_animations_setting"
              glib:get-property="follow-enable-animations-setting"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="follow-enable-animations-setting"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="757">Gets whether @self should be skipped when animations are globally disabled.</doc>
        <source-position filename="src/adw-animation.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation.c"
               line="763">whether to follow the global setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="759">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="adw_animation_get_state"
              glib:get-property="state">
        <attribute name="org.gtk.Method.get_property" value="state"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="544">Gets the current value of @self.

The state indicates whether @self is currently playing, paused, finished or
hasn't been started yet.</doc>
        <source-position filename="src/adw-animation.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation.c"
               line="553">the animation value</doc>
          <type name="AnimationState" c:type="AdwAnimationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="546">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="adw_animation_get_target"
              glib:get-property="target">
        <attribute name="org.gtk.Method.get_property" value="target"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="478">Gets the target @self animates.</doc>
        <source-position filename="src/adw-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation.c"
               line="484">the animation target</doc>
          <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="480">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="adw_animation_get_value"
              glib:get-property="value">
        <attribute name="org.gtk.Method.get_property" value="value"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="524">Gets the current value of @self.</doc>
        <source-position filename="src/adw-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation.c"
               line="530">the current value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="526">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget"
              c:identifier="adw_animation_get_widget"
              glib:get-property="widget">
        <attribute name="org.gtk.Method.get_property" value="widget"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="451">Gets the widget @self was created for.

It provides the frame clock for the animation. It's not strictly necessary
for this widget to be same as the one being animated.

The widget must be mapped in order for the animation to work. If it's not
mapped, or if it gets unmapped during an ongoing animation, the animation
will be automatically skipped.</doc>
        <source-position filename="src/adw-animation.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation.c"
               line="464">the animation widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="453">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="adw_animation_pause">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="605">Pauses a playing animation for @self.

Does nothing if the current state of @self isn't `ADW_ANIMATION_PLAYING`.

Sets [property@Animation:state] to `ADW_ANIMATION_PAUSED`.</doc>
        <source-position filename="src/adw-animation.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="607">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="play" c:identifier="adw_animation_play">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="567">Starts the animation for @self.

If the animation is playing, paused or has been completed, restarts it from
the beginning. This allows to easily play an animation regardless of whether
it's already playing or not.

Sets [property@Animation:state] to `ADW_ANIMATION_PLAYING`.

The animation will be automatically skipped if [property@Animation:widget] is
unmapped, or if [property@Gtk.Settings:gtk-enable-animations] is `FALSE`.

As such, it's not guaranteed that the animation will actually run. For
example, when using [func@GLib.idle_add] and starting an animation
immediately afterwards, it's entirely possible that the idle callback will
run after the animation has already finished, and not while it's playing.</doc>
        <source-position filename="src/adw-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="569">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="adw_animation_reset">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="717">Resets the animation for @self.

Sets [property@Animation:state] to `ADW_ANIMATION_IDLE`.</doc>
        <source-position filename="src/adw-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="719">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resume" c:identifier="adw_animation_resume">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="641">Resumes a paused animation for @self.

This function must only be used if the animation has been paused with
[method@Animation.pause].

Sets [property@Animation:state] to `ADW_ANIMATION_PLAYING`.</doc>
        <source-position filename="src/adw-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="643">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_follow_enable_animations_setting"
              c:identifier="adw_animation_set_follow_enable_animations_setting"
              glib:set-property="follow-enable-animations-setting"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="follow-enable-animations-setting"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="779">Sets whether to skip @self when animations are globally disabled.

The default behavior is to skip the animation. Set to `FALSE` to disable this
behavior.

This can be useful for cases where animation is essential, like spinners, or
in demo applications. Most other animations should keep it enabled.

See [property@Gtk.Settings:gtk-enable-animations].</doc>
        <source-position filename="src/adw-animation.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="781">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="782">whether to follow the global setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target"
              c:identifier="adw_animation_set_target"
              glib:set-property="target">
        <attribute name="org.gtk.Method.set_property" value="target"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="498">Sets the target @self animates to @target.</doc>
        <source-position filename="src/adw-animation.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="500">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="501">an animation target</doc>
            <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="skip" c:identifier="adw_animation_skip">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="670">Skips the animation for @self.

If the animation hasn't been started yet, is playing, or is paused, instantly
skips the animation to the end and causes [signal@Animation::done] to be
emitted.

Sets [property@Animation:state] to `ADW_ANIMATION_FINISHED`.</doc>
        <source-position filename="src/adw-animation.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation.c"
                 line="672">an animation</doc>
            <type name="Animation" c:type="AdwAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="follow-enable-animations-setting"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_follow_enable_animations_setting"
                getter="get_follow_enable_animations_setting"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_animation_get_follow_enable_animations_setting"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_animation_set_follow_enable_animations_setting"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="404">Whether to skip the animation when animations are globally disabled.

The default behavior is to skip the animation. Set to `FALSE` to disable
this behavior.

This can be useful for cases where animation is essential, like spinners,
or in demo applications. Most other animations should keep it enabled.

See [property@Gtk.Settings:gtk-enable-animations].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="ADW_ANIMATION_IDLE">
        <attribute name="org.gtk.Property.get"
                   value="adw_animation_get_state"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="390">The animation state.

The state indicates whether the animation is currently playing, paused,
finished or hasn't been started yet.</doc>
        <type name="AnimationState"/>
      </property>
      <property name="target"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_target"
                getter="get_target">
        <attribute name="org.gtk.Property.get"
                   value="adw_animation_get_target"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_animation_set_target"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="368">The target to animate.</doc>
        <type name="AnimationTarget"/>
      </property>
      <property name="value"
                transfer-ownership="none"
                getter="get_value"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_animation_get_value"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="378">The current value of the animation.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="widget"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_widget">
        <attribute name="org.gtk.Property.get"
                   value="adw_animation_get_widget"/>
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="351">The animation widget.

It provides the frame clock for the animation. It's not strictly necessary
for this widget to be same as the one being animated.

The widget must be mapped in order for the animation to work. If it's not
mapped, or if it gets unmapped during an ongoing animation, the animation
will be automatically skipped.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="done" when="last">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="426">This signal is emitted when the animation has been completed, either on its
own or via calling [method@Animation.skip].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AnimationClass"
            c:type="AdwAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Animation">
      <source-position filename="src/adw-animation.h" line="36"/>
    </record>
    <enumeration name="AnimationState"
                 glib:type-name="AdwAnimationState"
                 glib:get-type="adw_animation_state_get_type"
                 c:type="AdwAnimationState">
      <doc xml:space="preserve"
           filename="src/adw-animation.c"
           line="65">Describes the possible states of an [class@Animation].

The state can be controlled with [method@Animation.play],
[method@Animation.pause], [method@Animation.resume],
[method@Animation.reset] and [method@Animation.skip].</doc>
      <member name="idle"
              value="0"
              c:identifier="ADW_ANIMATION_IDLE"
              glib:nick="idle"
              glib:name="ADW_ANIMATION_IDLE">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="67">The animation hasn't started yet.</doc>
      </member>
      <member name="paused"
              value="1"
              c:identifier="ADW_ANIMATION_PAUSED"
              glib:nick="paused"
              glib:name="ADW_ANIMATION_PAUSED">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="68">The animation has been paused.</doc>
      </member>
      <member name="playing"
              value="2"
              c:identifier="ADW_ANIMATION_PLAYING"
              glib:nick="playing"
              glib:name="ADW_ANIMATION_PLAYING">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="69">The animation is currently playing.</doc>
      </member>
      <member name="finished"
              value="3"
              c:identifier="ADW_ANIMATION_FINISHED"
              glib:nick="finished"
              glib:name="ADW_ANIMATION_FINISHED">
        <doc xml:space="preserve"
             filename="src/adw-animation.c"
             line="70">The animation has finished.</doc>
      </member>
    </enumeration>
    <class name="AnimationTarget"
           c:symbol-prefix="animation_target"
           c:type="AdwAnimationTarget"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="AdwAnimationTarget"
           glib:get-type="adw_animation_target_get_type"
           glib:type-struct="AnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/adw-animation-target.c"
           line="11">Represents a value [class@Animation] can animate.</doc>
      <source-position filename="src/adw-animation-target.h" line="22"/>
    </class>
    <record name="AnimationTargetClass"
            c:type="AdwAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="AnimationTarget">
      <source-position filename="src/adw-animation-target.h" line="22"/>
    </record>
    <callback name="AnimationTargetFunc" c:type="AdwAnimationTargetFunc">
      <doc xml:space="preserve"
           filename="src/adw-animation-target.h"
           line="25">Prototype for animation targets based on user callbacks.</doc>
      <source-position filename="src/adw-animation-target.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.h"
               line="27">The animation value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.h"
               line="28">The user data provided when creating the target</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Application"
           c:symbol-prefix="application"
           c:type="AdwApplication"
           parent="Gtk.Application"
           glib:type-name="AdwApplication"
           glib:get-type="adw_application_get_type"
           glib:type-struct="ApplicationClass">
      <doc xml:space="preserve"
           filename="src/adw-application.c"
           line="11">A base class for Adwaita applications.

`AdwApplication` handles library initialization by calling [func@init] in the
default [signal@Gio.Application::startup] signal handler, in turn chaining up
as required by [class@Gtk.Application]. Therefore, any subclass of
`AdwApplication` should always chain up its `startup` handler before using
any Adwaita or GTK API.

## Automatic Resources

`AdwApplication` will automatically load stylesheets located in the
application's resource base path (see
[method@Gio.Application.set_resource_base_path], if they're present.

They can be used to add custom styles to the application, as follows:

- `style.css` contains styles that are always present.

- `style-dark.css` contains styles only used when
[property@StyleManager:dark] is `TRUE`.

- `style-hc.css` contains styles used when the system high contrast
  preference is enabled.

- `style-hc-dark.css` contains styles used when the system high contrast
  preference is enabled and [property@StyleManager:dark] is `TRUE`.</doc>
      <source-position filename="src/adw-application.h" line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <constructor name="new" c:identifier="adw_application_new">
        <doc xml:space="preserve"
             filename="src/adw-application.c"
             line="246">Creates a new `AdwApplication`.

If `application_id` is not `NULL`, then it must be valid. See
[func@Gio.Application.id_is_valid].

If no application ID is given then some features (most notably application
uniqueness) will be disabled.</doc>
        <source-position filename="src/adw-application.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-application.c"
               line="259">the newly created `AdwApplication`</doc>
          <type name="Application" c:type="AdwApplication*"/>
        </return-value>
        <parameters>
          <parameter name="application_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-application.c"
                 line="248">The application ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-application.c"
                 line="249">The application flags</doc>
            <type name="Gio.ApplicationFlags" c:type="GApplicationFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_style_manager"
              c:identifier="adw_application_get_style_manager"
              glib:get-property="style-manager">
        <attribute name="org.gtk.Method.get_property" value="style-manager"/>
        <doc xml:space="preserve"
             filename="src/adw-application.c"
             line="271">Gets the style manager for @self.

This is a convenience property allowing to access `AdwStyleManager` through
property bindings or expressions.</doc>
        <source-position filename="src/adw-application.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-application.c"
               line="280">the style manager</doc>
          <type name="StyleManager" c:type="AdwStyleManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-application.c"
                 line="273">an application</doc>
            <type name="Application" c:type="AdwApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="style-manager"
                transfer-ownership="none"
                getter="get_style_manager">
        <attribute name="org.gtk.Property.get"
                   value="adw_application_get_style_manager"/>
        <doc xml:space="preserve"
             filename="src/adw-application.c"
             line="225">The style manager for this application.

This is a convenience property allowing to access `AdwStyleManager` through
property bindings or expressions.</doc>
        <type name="StyleManager"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Application" c:type="GtkApplication"/>
      </field>
    </class>
    <record name="ApplicationClass"
            c:type="AdwApplicationClass"
            glib:is-gtype-struct-for="Application">
      <source-position filename="src/adw-application.h" line="36"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-application.h"
             line="28">The parent class</doc>
        <type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ApplicationWindow"
           c:symbol-prefix="application_window"
           c:type="AdwApplicationWindow"
           parent="Gtk.ApplicationWindow"
           glib:type-name="AdwApplicationWindow"
           glib:get-type="adw_application_window_get_type"
           glib:type-struct="ApplicationWindowClass">
      <doc xml:space="preserve"
           filename="src/adw-application-window.c"
           line="12">A freeform application window.

&lt;picture&gt;
  &lt;source srcset="application-window-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="application-window.png" alt="application-window"&gt;
&lt;/picture&gt;

`AdwApplicationWindow` is a [class@Gtk.ApplicationWindow] subclass providing
the same features as [class@Window].

See [class@Window] for details.

Using [property@Gtk.Application:menubar] is not supported and may result in
visual glitches.</doc>
      <source-position filename="src/adw-application-window.h" line="30"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="adw_application_window_new">
        <doc xml:space="preserve"
             filename="src/adw-application-window.c"
             line="169">Creates a new `AdwApplicationWindow` for @app.</doc>
        <source-position filename="src/adw-application-window.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-application-window.c"
               line="175">the newly created `AdwApplicationWindow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-application-window.c"
                 line="171">an application instance</doc>
            <type name="Gtk.Application" c:type="GtkApplication*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_content"
              c:identifier="adw_application_window_get_content"
              glib:get-property="content">
        <attribute name="org.gtk.Method.get_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-application-window.c"
             line="209">Gets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.get_child].</doc>
        <source-position filename="src/adw-application-window.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-application-window.c"
               line="217">the content widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-application-window.c"
                 line="211">an application window</doc>
            <type name="ApplicationWindow" c:type="AdwApplicationWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="adw_application_window_set_content"
              glib:set-property="content">
        <attribute name="org.gtk.Method.set_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-application-window.c"
             line="185">Sets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.set_child].</doc>
        <source-position filename="src/adw-application-window.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-application-window.c"
                 line="187">an application window</doc>
            <type name="ApplicationWindow" c:type="AdwApplicationWindow*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-application-window.c"
                 line="188">the content widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <attribute name="org.gtk.Property.get"
                   value="adw_application_window_get_content"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_application_window_set_content"/>
        <doc xml:space="preserve"
             filename="src/adw-application-window.c"
             line="122">The content widget.

This property should always be used instead of [property@Gtk.Window:child].</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
      </field>
    </class>
    <record name="ApplicationWindowClass"
            c:type="AdwApplicationWindowClass"
            glib:is-gtype-struct-for="ApplicationWindow">
      <source-position filename="src/adw-application-window.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.ApplicationWindowClass"
              c:type="GtkApplicationWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Avatar"
           c:symbol-prefix="avatar"
           c:type="AdwAvatar"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwAvatar"
           glib:get-type="adw_avatar_get_type"
           glib:type-struct="AvatarClass">
      <doc xml:space="preserve"
           filename="src/adw-avatar.c"
           line="21">A widget displaying an image, with a generated fallback.

&lt;picture&gt;
  &lt;source srcset="avatar-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="avatar.png" alt="avatar"&gt;
&lt;/picture&gt;

`AdwAvatar` is a widget that shows a round avatar.

`AdwAvatar` generates an avatar with the initials of  the
[property@Avatar:text] on top of a colored background.

The color is picked based on the hash of the [property@Avatar:text].

If [property@Avatar:show-initials] is set to `FALSE`,
[property@Avatar:icon-name] or `avatar-default-symbolic` is shown instead of
the initials.

Use [property@Avatar:custom-image] to set a custom image.

## CSS nodes

`AdwAvatar` has a single CSS node with name `avatar`.</doc>
      <source-position filename="src/adw-avatar.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_avatar_new">
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="432">Creates a new `AdwAvatar`.</doc>
        <source-position filename="src/adw-avatar.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="440">the newly created `AdwAvatar`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="434">The size of the avatar</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="435">the text used to get the initials and color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="show_initials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="436">whether to use initials instead of an icon as fallback</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="draw_to_texture" c:identifier="adw_avatar_draw_to_texture">
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="703">Renders @self into a [class@Gdk.Texture] at @scale_factor.

This can be used to export the fallback avatar.</doc>
        <source-position filename="src/adw-avatar.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="712">the texture</doc>
          <type name="Gdk.Texture" c:type="GdkTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="705">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="scale_factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="706">The scale factor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_custom_image"
              c:identifier="adw_avatar_get_custom_image"
              glib:get-property="custom-image">
        <attribute name="org.gtk.Method.get_property" value="custom-image"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="587">Gets the custom image paintable.</doc>
        <source-position filename="src/adw-avatar.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="593">the custom image</doc>
          <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="589">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_avatar_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="454">Gets the name of an icon to use as a fallback.</doc>
        <source-position filename="src/adw-avatar.h" line="30"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="460">the icon name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="456">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_initials"
              c:identifier="adw_avatar_get_show_initials"
              glib:get-property="show-initials">
        <attribute name="org.gtk.Method.get_property" value="show-initials"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="544">Gets whether initials are used instead of an icon on the fallback avatar.</doc>
        <source-position filename="src/adw-avatar.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="550">whether initials are used instead of an icon as fallback</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="546">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="adw_avatar_get_size"
              glib:get-property="size">
        <attribute name="org.gtk.Method.get_property" value="size"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="654">Gets the size of the avatar.</doc>
        <source-position filename="src/adw-avatar.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="660">the size of the avatar</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="656">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="adw_avatar_get_text"
              glib:get-property="text">
        <attribute name="org.gtk.Method.get_property" value="text"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="496">Gets the text used to generate the fallback initials and color.</doc>
        <source-position filename="src/adw-avatar.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-avatar.c"
               line="502">the text used to generate the fallback initials and
  color</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="498">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_custom_image"
              c:identifier="adw_avatar_set_custom_image"
              glib:set-property="custom-image">
        <attribute name="org.gtk.Method.set_property" value="custom-image"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="603">Sets the custom image paintable.

Custom image is displayed instead of initials or icon.</doc>
        <source-position filename="src/adw-avatar.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="605">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="custom_image"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="606">a custom image</doc>
            <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_avatar_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="470">Sets the name of an icon to use as a fallback.

If no name is set, `avatar-default-symbolic` will be used.</doc>
        <source-position filename="src/adw-avatar.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="472">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="473">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_initials"
              c:identifier="adw_avatar_set_show_initials"
              glib:set-property="show-initials">
        <attribute name="org.gtk.Method.set_property" value="show-initials"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="560">Sets whether to use initials instead of an icon on the fallback avatar.

See [property@Avatar:icon-name] for how to change the fallback icon.</doc>
        <source-position filename="src/adw-avatar.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="562">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="show_initials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="563">whether to use initials instead of an icon as fallback</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="adw_avatar_set_size"
              glib:set-property="size">
        <attribute name="org.gtk.Method.set_property" value="size"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="670">Sets the size of the avatar.</doc>
        <source-position filename="src/adw-avatar.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="672">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="673">The size of the avatar</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="adw_avatar_set_text"
              glib:set-property="text">
        <attribute name="org.gtk.Method.set_property" value="text"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="513">Sets the text used to generate the fallback initials and color.

It's only used to generate the color if [property@Avatar:show-initials] is
`FALSE`.</doc>
        <source-position filename="src/adw-avatar.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="515">an avatar</doc>
            <type name="Avatar" c:type="AdwAvatar*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-avatar.c"
                 line="516">the text used to get the initials and color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="custom-image"
                writable="1"
                transfer-ownership="none"
                setter="set_custom_image"
                getter="get_custom_image">
        <attribute name="org.gtk.Property.get"
                   value="adw_avatar_get_custom_image"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_avatar_set_custom_image"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="375">A custom image paintable.

Custom image is displayed instead of initials or icon.</doc>
        <type name="Gdk.Paintable"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_avatar_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_avatar_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="338">The name of an icon to use as a fallback.

If no name is set, `avatar-default-symbolic` will be used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-initials"
                writable="1"
                transfer-ownership="none"
                setter="set_show_initials"
                getter="get_show_initials"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_avatar_get_show_initials"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_avatar_set_show_initials"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="363">Whether initials are used instead of an icon on the fallback avatar.

See [property@Avatar:icon-name] for how to change the fallback icon.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="-1">
        <attribute name="org.gtk.Property.get" value="adw_avatar_get_size"/>
        <attribute name="org.gtk.Property.set" value="adw_avatar_set_size"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="387">The size of the avatar.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text">
        <attribute name="org.gtk.Property.get" value="adw_avatar_get_text"/>
        <attribute name="org.gtk.Property.set" value="adw_avatar_set_text"/>
        <doc xml:space="preserve"
             filename="src/adw-avatar.c"
             line="350">Sets the text used to generate the fallback initials and color.

It's only used to generate the color if [property@Avatar:show-initials] is
`FALSE`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AvatarClass"
            c:type="AdwAvatarClass"
            glib:is-gtype-struct-for="Avatar">
      <source-position filename="src/adw-avatar.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Banner"
           c:symbol-prefix="banner"
           c:type="AdwBanner"
           version="1.3"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwBanner"
           glib:get-type="adw_banner_get_type"
           glib:type-struct="BannerClass">
      <doc xml:space="preserve"
           filename="src/adw-banner.c"
           line="22">A bar with contextual information.

&lt;picture&gt;
  &lt;source srcset="banner-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="banner.png" alt="banner"&gt;
&lt;/picture&gt;

Banners are hidden by default, use [property@Banner:revealed] to show them.

Banners have a title, set with [property@Banner:title]. Titles can be marked
up with Pango markup, use [property@Banner:use-markup] to enable it.

Title can be shown centered or left-aligned depending on available space.

Banners can optionally have a button with text on it, set through
[property@Banner:button-label]. The button can be used with a `GAction`,
or with the [signal@Banner::button-clicked] signal.

## CSS nodes

`AdwBanner` has a main CSS node with the name `banner`.</doc>
      <source-position filename="src/adw-banner.h" line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_banner_new" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="501">Creates a new `AdwBanner`.</doc>
        <source-position filename="src/adw-banner.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-banner.c"
               line="507">the newly created `AdwBanner`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="503">the banner title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_button_label"
              c:identifier="adw_banner_get_button_label"
              glib:get-property="button-label"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="button-label"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="565">Gets the button label for @self.</doc>
        <source-position filename="src/adw-banner.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-banner.c"
               line="571">the button label for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="567">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revealed"
              c:identifier="adw_banner_get_revealed"
              glib:get-property="revealed"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="revealed"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="658">Gets if a banner is revealed</doc>
        <source-position filename="src/adw-banner.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-banner.c"
               line="664">Whether a banner is revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="660">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_banner_get_title"
              glib:get-property="title"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="521">Gets the title for @self.</doc>
        <source-position filename="src/adw-banner.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-banner.c"
               line="527">the title for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="523">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="adw_banner_get_use_markup"
              glib:get-property="use-markup"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="613">Gets whether to use Pango markup for the banner title.</doc>
        <source-position filename="src/adw-banner.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-banner.c"
               line="619">whether to use markup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="615">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_button_label"
              c:identifier="adw_banner_set_button_label"
              glib:set-property="button-label"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="button-label"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="583">Sets the button label for @self.

If set to `""` or `NULL`, the button won't be shown.

The button can be used with a `GAction`, or with the
[signal@Banner::button-clicked] signal.</doc>
        <source-position filename="src/adw-banner.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="585">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
          <parameter name="label"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="586">the label</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revealed"
              c:identifier="adw_banner_set_revealed"
              glib:set-property="revealed"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="revealed"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="676">Sets whether a banner should be revealed</doc>
        <source-position filename="src/adw-banner.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="678">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
          <parameter name="revealed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="679">whether a banner should be revealed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_banner_set_title"
              glib:set-property="title"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="539">Sets the title for this banner.

See also: [property@Banner:use-markup].</doc>
        <source-position filename="src/adw-banner.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="541">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="542">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="adw_banner_set_use_markup"
              glib:set-property="use-markup"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="631">Sets whether to use Pango markup for the banner title.

See also [func@Pango.parse_markup].</doc>
        <source-position filename="src/adw-banner.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="633">a banner</doc>
            <type name="Banner" c:type="AdwBanner*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-banner.c"
                 line="634">whether to use markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="button-label"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_button_label"
                getter="get_button_label">
        <attribute name="org.gtk.Property.get"
                   value="adw_banner_get_button_label"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_banner_set_button_label"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="365">The label to show on the button.

If set to `""` or `NULL`, the button won't be shown.

The button can be used with a `GAction`, or with the
[signal@Banner::button-clicked] signal.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="revealed"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_revealed"
                getter="get_revealed"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_banner_get_revealed"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_banner_set_revealed"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="396">Whether the banner is currently revealed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get" value="adw_banner_get_title"/>
        <attribute name="org.gtk.Property.set" value="adw_banner_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="351">The title for this banner.

See also: [property@Banner:use-markup].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_banner_get_use_markup"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_banner_set_use_markup"/>
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="382">Whether to use Pango markup for the banner title.

See also [func@Pango.parse_markup].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="button-clicked" when="last" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-banner.c"
             line="408">This signal is emitted after the action button has been clicked.

It can be used as an alternative to setting an action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BannerClass"
            c:type="AdwBannerClass"
            glib:is-gtype-struct-for="Banner">
      <source-position filename="src/adw-banner.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Bin"
           c:symbol-prefix="bin"
           c:type="AdwBin"
           parent="Gtk.Widget"
           glib:type-name="AdwBin"
           glib:get-type="adw_bin_get_type"
           glib:type-struct="BinClass">
      <doc xml:space="preserve"
           filename="src/adw-bin.c"
           line="14">A widget with one child.

&lt;picture&gt;
  &lt;source srcset="bin-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="bin.png" alt="bin"&gt;
&lt;/picture&gt;

The `AdwBin` widget has only one child, set with the [property@Bin:child]
property.

It is useful for deriving subclasses, since it provides common code needed
for handling a single child widget.</doc>
      <source-position filename="src/adw-bin.h" line="29"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_bin_new">
        <doc xml:space="preserve"
             filename="src/adw-bin.c"
             line="149">Creates a new `AdwBin`.</doc>
        <source-position filename="src/adw-bin.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-bin.c"
               line="154">the new created `AdwBin`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_bin_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-bin.c"
             line="162">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-bin.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-bin.c"
               line="168">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-bin.c"
                 line="164">a bin</doc>
            <type name="Bin" c:type="AdwBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_bin_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-bin.c"
             line="182">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-bin.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-bin.c"
                 line="184">a bin</doc>
            <type name="Bin" c:type="AdwBin*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-bin.c"
                 line="185">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get" value="adw_bin_get_child"/>
        <attribute name="org.gtk.Property.set" value="adw_bin_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-bin.c"
             line="109">The child widget of the `AdwBin`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="BinClass"
            c:type="AdwBinClass"
            glib:is-gtype-struct-for="Bin">
      <source-position filename="src/adw-bin.h" line="29"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="ButtonContent"
           c:symbol-prefix="button_content"
           c:type="AdwButtonContent"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwButtonContent"
           glib:get-type="adw_button_content_get_type"
           glib:type-struct="ButtonContentClass">
      <doc xml:space="preserve"
           filename="src/adw-button-content.c"
           line="14">A helper widget for creating buttons.

&lt;picture&gt;
  &lt;source srcset="button-content-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="button-content.png" alt="button-content"&gt;
&lt;/picture&gt;

`AdwButtonContent` is a box-like widget with an icon and a label.

It's intended to be used as a direct child of [class@Gtk.Button],
[class@Gtk.MenuButton] or [class@SplitButton], when they need to have both an
icon and a label, as follows:

```xml
&lt;object class="GtkButton"&gt;
  &lt;property name="child"&gt;
    &lt;object class="AdwButtonContent"&gt;
      &lt;property name="icon-name"&gt;document-open-symbolic&lt;/property&gt;
      &lt;property name="label" translatable="yes"&gt;_Open&lt;/property&gt;
      &lt;property name="use-underline"&gt;True&lt;/property&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```

`AdwButtonContent` handles style classes and connecting the mnemonic to the
button automatically.

## CSS nodes

```
buttoncontent
├── image
╰── label
```

`AdwButtonContent`'s CSS node is called `buttoncontent`. It contains the
subnodes `image` and `label`.

When inside a `GtkButton` or `AdwSplitButton`, the button will receive the
`.image-text-button` style class. When inside a `GtkMenuButton`, the
internal `GtkButton` will receive it instead.

## Accessibility

`AdwButtonContent` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.</doc>
      <source-position filename="src/adw-button-content.h" line="24"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_button_content_new">
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="276">Creates a new `AdwButtonContent`.</doc>
        <source-position filename="src/adw-button-content.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-button-content.c"
               line="281">the new created `AdwButtonContent`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="adw_button_content_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="289">Gets the name of the displayed icon.</doc>
        <source-position filename="src/adw-button-content.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-button-content.c"
               line="295">the icon name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="291">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="adw_button_content_get_label"
              glib:get-property="label">
        <attribute name="org.gtk.Method.get_property" value="label"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="335">Gets the displayed label.</doc>
        <source-position filename="src/adw-button-content.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-button-content.c"
               line="341">the label</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="337">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="adw_button_content_get_use_underline"
              glib:get-property="use-underline">
        <attribute name="org.gtk.Method.get_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="376">Gets whether an underline in the text indicates a mnemonic.</doc>
        <source-position filename="src/adw-button-content.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-button-content.c"
               line="382">whether an underline in the text indicates a mnemonic</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="378">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_button_content_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="305">Sets the name of the displayed icon.

If empty, the icon is not shown.</doc>
        <source-position filename="src/adw-button-content.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="307">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="308">the new icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="adw_button_content_set_label"
              glib:set-property="label">
        <attribute name="org.gtk.Method.set_property" value="label"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="351">Sets the displayed label.</doc>
        <source-position filename="src/adw-button-content.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="353">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="354">the new label</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="adw_button_content_set_use_underline"
              glib:set-property="use-underline">
        <attribute name="org.gtk.Method.set_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="392">Sets whether an underline in the text indicates a mnemonic.

The mnemonic can be used to activate the parent button.

See [property@ButtonContent:label].</doc>
        <source-position filename="src/adw-button-content.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="394">a button content</doc>
            <type name="ButtonContent" c:type="AdwButtonContent*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-button-content.c"
                 line="395">whether an underline in the text indicates a mnemonic</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_button_content_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_button_content_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="211">The name of the displayed icon.

If empty, the icon is not shown.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label">
        <attribute name="org.gtk.Property.get"
                   value="adw_button_content_get_label"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_button_content_set_label"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="223">The displayed label.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_button_content_get_use_underline"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_button_content_set_use_underline"/>
        <doc xml:space="preserve"
             filename="src/adw-button-content.c"
             line="233">Whether an underline in the text indicates a mnemonic.

The mnemonic can be used to activate the parent button.

See [property@ButtonContent:label].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ButtonContentClass"
            c:type="AdwButtonContentClass"
            glib:is-gtype-struct-for="ButtonContent">
      <source-position filename="src/adw-button-content.h" line="24"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="ADW_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/adw-version.h"
           line="65">Compile-time version checking. Evaluates to `TRUE` if the version
of Adwaita is greater than the required one.</doc>
      <source-position filename="src/adw-version.h" line="73"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="src/adw-version.h"
               line="67">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="src/adw-version.h"
               line="68">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="src/adw-version.h"
               line="69">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="CallbackAnimationTarget"
           c:symbol-prefix="callback_animation_target"
           c:type="AdwCallbackAnimationTarget"
           parent="AnimationTarget"
           final="1"
           glib:type-name="AdwCallbackAnimationTarget"
           glib:get-type="adw_callback_animation_target_get_type"
           glib:type-struct="CallbackAnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/adw-animation-target.c"
           line="17">An [class@AnimationTarget] that calls a given callback during the
animation.</doc>
      <source-position filename="src/adw-animation-target.h" line="38"/>
      <constructor name="new" c:identifier="adw_callback_animation_target_new">
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="119">Creates a new `AdwAnimationTarget` that calls the given @callback during
the animation.</doc>
        <source-position filename="src/adw-animation-target.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.c"
               line="129">the newly created callback target</doc>
          <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="121">the callback to call</doc>
            <type name="AnimationTargetFunc" c:type="AdwAnimationTargetFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="0">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="122">the data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     scope="async"
                     destroy="1">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="123">the function to be called when the
  callback action is finalized</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="CallbackAnimationTargetClass"
            c:type="AdwCallbackAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="CallbackAnimationTarget">
      <source-position filename="src/adw-animation-target.h" line="38"/>
    </record>
    <class name="Carousel"
           c:symbol-prefix="carousel"
           c:type="AdwCarousel"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwCarousel"
           glib:get-type="adw_carousel_get_type"
           glib:type-struct="CarouselClass">
      <doc xml:space="preserve"
           filename="src/adw-carousel.c"
           line="23">A paginated scrolling widget.

&lt;picture&gt;
  &lt;source srcset="carousel-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel.png" alt="carousel"&gt;
&lt;/picture&gt;

The `AdwCarousel` widget can be used to display a set of pages with
swipe-based navigation between them.

[class@CarouselIndicatorDots] and [class@CarouselIndicatorLines] can be used
to provide page indicators for `AdwCarousel`.

## CSS nodes

`AdwCarousel` has a single CSS node with name `carousel`.</doc>
      <source-position filename="src/adw-carousel.h" line="24"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_carousel_new">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1145">Creates a new `AdwCarousel`.</doc>
        <source-position filename="src/adw-carousel.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1150">the newly created `AdwCarousel`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="adw_carousel_append">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1175">Appends @child to @self.</doc>
        <source-position filename="src/adw-carousel.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1177">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1178">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_long_swipes"
              c:identifier="adw_carousel_get_allow_long_swipes"
              glib:get-property="allow-long-swipes">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1663">Gets whether to allow swiping for more than one page at a time.</doc>
        <source-position filename="src/adw-carousel.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1669">`TRUE` if long swipes are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1665">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="adw_carousel_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1581">Sets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/adw-carousel.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1587">whether @self can be dragged with mouse pointer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1583">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_scroll_wheel"
              c:identifier="adw_carousel_get_allow_scroll_wheel"
              glib:get-property="allow-scroll-wheel">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-scroll-wheel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1622">Gets whether @self will respond to scroll wheel events.</doc>
        <source-position filename="src/adw-carousel.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1628">`TRUE` if @self will respond to scroll wheel events</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1624">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interactive"
              c:identifier="adw_carousel_get_interactive"
              glib:get-property="interactive">
        <attribute name="org.gtk.Method.get_property" value="interactive"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1457">Gets whether @self can be navigated.</doc>
        <source-position filename="src/adw-carousel.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1463">whether @self can be navigated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1459">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="adw_carousel_get_n_pages"
              glib:get-property="n-pages">
        <attribute name="org.gtk.Method.get_property" value="n-pages"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1412">Gets the number of pages in @self.</doc>
        <source-position filename="src/adw-carousel.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1418">the number of pages in @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1414">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_page" c:identifier="adw_carousel_get_nth_page">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1389">Gets the page at position @n.</doc>
        <source-position filename="src/adw-carousel.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1396">the page</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1391">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1392">index of the page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="adw_carousel_get_position"
              glib:get-property="position">
        <attribute name="org.gtk.Method.get_property" value="position"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1439">Gets current scroll position in @self, unitless.

1 matches 1 page. Use [method@Carousel.scroll_to] for changing it.</doc>
        <source-position filename="src/adw-carousel.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1447">the scroll position</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1441">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_duration"
              c:identifier="adw_carousel_get_reveal_duration"
              glib:get-property="reveal-duration">
        <attribute name="org.gtk.Method.get_property" value="reveal-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1705">Gets the page reveal duration, in milliseconds.</doc>
        <source-position filename="src/adw-carousel.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1711">the duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1707">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_params"
              c:identifier="adw_carousel_get_scroll_params"
              glib:get-property="scroll-params">
        <attribute name="org.gtk.Method.get_property" value="scroll-params"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1537">Gets the scroll animation spring parameters for @self.</doc>
        <source-position filename="src/adw-carousel.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1543">the animation parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1539">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="adw_carousel_get_spacing"
              glib:get-property="spacing">
        <attribute name="org.gtk.Method.get_property" value="spacing"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1499">Gets spacing between pages in pixels.</doc>
        <source-position filename="src/adw-carousel.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel.c"
               line="1505">spacing between pages</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1501">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="adw_carousel_insert">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1192">Inserts @child into @self at position @position.

If position is -1, or larger than the number of pages,
@child will be appended to the end.</doc>
        <source-position filename="src/adw-carousel.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1194">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1195">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1196">the position to insert @child at</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="adw_carousel_prepend">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1158">Prepends @child to @self.</doc>
        <source-position filename="src/adw-carousel.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1160">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1161">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_carousel_remove">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1331">Removes @child from @self.</doc>
        <source-position filename="src/adw-carousel.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1333">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1334">a widget to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder" c:identifier="adw_carousel_reorder">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1239">Moves @child into position @position.

If position is -1, or larger than the number of pages, @child will be moved
at the end.</doc>
        <source-position filename="src/adw-carousel.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1241">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1242">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1243">the position to move @child to</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to" c:identifier="adw_carousel_scroll_to">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1364">Scrolls to @widget.

If @animate is `TRUE`, the transition will be animated.</doc>
        <source-position filename="src/adw-carousel.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1366">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1367">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="animate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1368">whether to animate the transition</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="adw_carousel_set_allow_long_swipes"
              glib:set-property="allow-long-swipes">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1679">Sets whether to allow swiping for more than one page at a time.

If @allow_long_swipes is `FALSE`, each swipe can only move to the adjacent
pages.</doc>
        <source-position filename="src/adw-carousel.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1681">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1682">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="adw_carousel_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1597">Sets whether @self can be dragged with mouse pointer.

If @allow_mouse_drag is `FALSE`, dragging is only available on touch.</doc>
        <source-position filename="src/adw-carousel.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1599">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1600">whether @self can be dragged with mouse pointer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_scroll_wheel"
              c:identifier="adw_carousel_set_allow_scroll_wheel"
              glib:set-property="allow-scroll-wheel">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-scroll-wheel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1638">Sets whether @self will respond to scroll wheel events.

If @allow_scroll_wheel is `FALSE`, wheel events will be ignored.</doc>
        <source-position filename="src/adw-carousel.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1640">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="allow_scroll_wheel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1641">whether @self will respond to scroll wheel events</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interactive"
              c:identifier="adw_carousel_set_interactive"
              glib:set-property="interactive">
        <attribute name="org.gtk.Method.set_property" value="interactive"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1473">Sets whether @self can be navigated.

This can be used to temporarily disable the carousel to only allow navigating
it in a certain state.</doc>
        <source-position filename="src/adw-carousel.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1475">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1476">whether @self can be navigated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_duration"
              c:identifier="adw_carousel_set_reveal_duration"
              glib:set-property="reveal-duration">
        <attribute name="org.gtk.Method.set_property" value="reveal-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1721">Sets the page reveal duration, in milliseconds.

Reveal duration is used when animating adding or removing pages.</doc>
        <source-position filename="src/adw-carousel.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1723">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="reveal_duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1724">the new reveal duration value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scroll_params"
              c:identifier="adw_carousel_set_scroll_params"
              glib:set-property="scroll-params">
        <attribute name="org.gtk.Method.set_property" value="scroll-params"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1553">Sets the scroll animation spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/adw-carousel.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1555">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1556">the new parameters</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="adw_carousel_set_spacing"
              glib:set-property="spacing">
        <attribute name="org.gtk.Method.set_property" value="spacing"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1515">Sets spacing between pages in pixels.</doc>
        <source-position filename="src/adw-carousel.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1517">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1518">the new spacing value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_allow_long_swipes"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_allow_long_swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="974">Whether to allow swiping for more than one page at a time.

If the value is `FALSE`, each swipe can only move to the adjacent pages.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_allow_mouse_drag"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_allow_mouse_drag"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="950">Sets whether the `AdwCarousel` can be dragged with mouse pointer.

If the value is `FALSE`, dragging is only available on touch.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-scroll-wheel"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_scroll_wheel"
                getter="get_allow_scroll_wheel"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_allow_scroll_wheel"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_allow_scroll_wheel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="962">Whether the widget will respond to scroll wheel events.

If the value is `FALSE`, wheel events will be ignored.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interactive"
                writable="1"
                transfer-ownership="none"
                setter="set_interactive"
                getter="get_interactive"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_interactive"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_interactive"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="909">Whether the carousel can be navigated.

This can be used to temporarily disable the carousel to only allow
navigating it in a certain state.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-pages"
                transfer-ownership="none"
                getter="get_n_pages"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_n_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="883">The number of pages in a `AdwCarousel`.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position"
                transfer-ownership="none"
                getter="get_position"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_position"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="895">Current scrolling position, unitless.

1 matches 1 page. Use [method@Carousel.scroll_to] for changing it.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reveal-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_duration"
                getter="get_reveal_duration"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="986">Page reveal duration, in milliseconds.

Reveal duration is used when animating adding or removing pages.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="scroll-params"
                writable="1"
                transfer-ownership="none"
                setter="set_scroll_params"
                getter="get_scroll_params">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_scroll_params"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_scroll_params"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="934">Scroll animation spring parameters.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="spacing"
                writable="1"
                transfer-ownership="none"
                setter="set_spacing"
                getter="get_spacing"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_get_spacing"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_set_spacing"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="922">Spacing between pages in pixels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="page-changed" when="last">
        <doc xml:space="preserve"
             filename="src/adw-carousel.c"
             line="1006">This signal is emitted after a page has been changed.

It can be used to implement "infinite scrolling" by amending the pages
after every scroll.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel.c"
                 line="1009">current page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CarouselClass"
            c:type="AdwCarouselClass"
            glib:is-gtype-struct-for="Carousel">
      <source-position filename="src/adw-carousel.h" line="24"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorDots"
           c:symbol-prefix="carousel_indicator_dots"
           c:type="AdwCarouselIndicatorDots"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwCarouselIndicatorDots"
           glib:get-type="adw_carousel_indicator_dots_get_type"
           glib:type-struct="CarouselIndicatorDotsClass">
      <doc xml:space="preserve"
           filename="src/adw-carousel-indicator-dots.c"
           line="24">A dots indicator for [class@Carousel].

&lt;picture&gt;
  &lt;source srcset="carousel-indicator-dots-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel-indicator-dots.png" alt="carousel-indicator-dots"&gt;
&lt;/picture&gt;

The `AdwCarouselIndicatorDots` widget shows a set of dots for each page of a
given [class@Carousel]. The dot representing the carousel's active page is
larger and more opaque than the others, the transition to the active and
inactive state is gradual to match the carousel's position.

See also [class@CarouselIndicatorLines].

## CSS nodes

`AdwCarouselIndicatorDots` has a single CSS node with name
`carouselindicatordots`.</doc>
      <source-position filename="src/adw-carousel-indicator-dots.h" line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_carousel_indicator_dots_new">
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-dots.c"
             line="364">Creates a new `AdwCarouselIndicatorDots`.</doc>
        <source-position filename="src/adw-carousel-indicator-dots.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel-indicator-dots.c"
               line="369">the newly created `AdwCarouselIndicatorDots`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="adw_carousel_indicator_dots_get_carousel"
              glib:get-property="carousel">
        <attribute name="org.gtk.Method.get_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-dots.c"
             line="377">Gets the displayed carousel.</doc>
        <source-position filename="src/adw-carousel-indicator-dots.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-carousel-indicator-dots.c"
               line="383">the displayed carousel</doc>
          <type name="Carousel" c:type="AdwCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-dots.c"
                 line="379">an indicator</doc>
            <type name="CarouselIndicatorDots"
                  c:type="AdwCarouselIndicatorDots*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="adw_carousel_indicator_dots_set_carousel"
              glib:set-property="carousel">
        <attribute name="org.gtk.Method.set_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-dots.c"
             line="393">Sets the displayed carousel.</doc>
        <source-position filename="src/adw-carousel-indicator-dots.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-dots.c"
                 line="395">an indicator</doc>
            <type name="CarouselIndicatorDots"
                  c:type="AdwCarouselIndicatorDots*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-dots.c"
                 line="396">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_indicator_dots_get_carousel"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_indicator_dots_set_carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-dots.c"
             line="334">The displayed carousel.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorDotsClass"
            c:type="AdwCarouselIndicatorDotsClass"
            glib:is-gtype-struct-for="CarouselIndicatorDots">
      <source-position filename="src/adw-carousel-indicator-dots.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorLines"
           c:symbol-prefix="carousel_indicator_lines"
           c:type="AdwCarouselIndicatorLines"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwCarouselIndicatorLines"
           glib:get-type="adw_carousel_indicator_lines_get_type"
           glib:type-struct="CarouselIndicatorLinesClass">
      <doc xml:space="preserve"
           filename="src/adw-carousel-indicator-lines.c"
           line="23">A lines indicator for [class@Carousel].

&lt;picture&gt;
  &lt;source srcset="carousel-indicator-dots-lines.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel-indicator-lines.png" alt="carousel-indicator-lines"&gt;
&lt;/picture&gt;

The `AdwCarouselIndicatorLines` widget shows a set of lines for each page of
a given [class@Carousel]. The carousel's active page is shown as another line
that moves between them to match the carousel's position.

See also [class@CarouselIndicatorDots].

## CSS nodes

`AdwCarouselIndicatorLines` has a single CSS node with name
`carouselindicatorlines`.</doc>
      <source-position filename="src/adw-carousel-indicator-lines.h"
                       line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_carousel_indicator_lines_new">
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-lines.c"
             line="349">Creates a new `AdwCarouselIndicatorLines`.</doc>
        <source-position filename="src/adw-carousel-indicator-lines.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-carousel-indicator-lines.c"
               line="354">the newly created `AdwCarouselIndicatorLines`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="adw_carousel_indicator_lines_get_carousel"
              glib:get-property="carousel">
        <attribute name="org.gtk.Method.get_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-lines.c"
             line="362">Gets the displayed carousel.</doc>
        <source-position filename="src/adw-carousel-indicator-lines.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-carousel-indicator-lines.c"
               line="368">the displayed carousel</doc>
          <type name="Carousel" c:type="AdwCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-lines.c"
                 line="364">an indicator</doc>
            <type name="CarouselIndicatorLines"
                  c:type="AdwCarouselIndicatorLines*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="adw_carousel_indicator_lines_set_carousel"
              glib:set-property="carousel">
        <attribute name="org.gtk.Method.set_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-lines.c"
             line="378">Sets the displayed carousel.</doc>
        <source-position filename="src/adw-carousel-indicator-lines.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-lines.c"
                 line="380">an indicator</doc>
            <type name="CarouselIndicatorLines"
                  c:type="AdwCarouselIndicatorLines*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-carousel-indicator-lines.c"
                 line="381">a carousel</doc>
            <type name="Carousel" c:type="AdwCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <attribute name="org.gtk.Property.get"
                   value="adw_carousel_indicator_lines_get_carousel"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_carousel_indicator_lines_set_carousel"/>
        <doc xml:space="preserve"
             filename="src/adw-carousel-indicator-lines.c"
             line="319">The displayed carousel.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorLinesClass"
            c:type="AdwCarouselIndicatorLinesClass"
            glib:is-gtype-struct-for="CarouselIndicatorLines">
      <source-position filename="src/adw-carousel-indicator-lines.h"
                       line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="CenteringPolicy"
                 glib:type-name="AdwCenteringPolicy"
                 glib:get-type="adw_centering_policy_get_type"
                 c:type="AdwCenteringPolicy">
      <doc xml:space="preserve"
           filename="src/adw-header-bar.c"
           line="120">Describes title centering behavior of a [class@HeaderBar] widget.</doc>
      <member name="loose"
              value="0"
              c:identifier="ADW_CENTERING_POLICY_LOOSE"
              glib:nick="loose"
              glib:name="ADW_CENTERING_POLICY_LOOSE">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="122">Keep the title centered when possible</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="ADW_CENTERING_POLICY_STRICT"
              glib:nick="strict"
              glib:name="ADW_CENTERING_POLICY_STRICT">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="123">Keep the title centered at all cost</doc>
      </member>
    </enumeration>
    <class name="Clamp"
           c:symbol-prefix="clamp"
           c:type="AdwClamp"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwClamp"
           glib:get-type="adw_clamp_get_type"
           glib:type-struct="ClampClass">
      <doc xml:space="preserve"
           filename="src/adw-clamp.c"
           line="13">A widget constraining its child to a given size.

&lt;picture&gt;
  &lt;source srcset="clamp-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="clamp-wide.png" alt="clamp-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="clamp-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="clamp-narrow.png" alt="clamp-narrow"&gt;
&lt;/picture&gt;

The `AdwClamp` widget constrains the size of the widget it contains to a
given maximum size. It will constrain the width if it is horizontal, or the
height if it is vertical. The expansion of the child from its minimum to its
maximum size is eased out for a smooth transition.

If the child requires more than the requested maximum size, it will be
allocated the minimum size it can fit in instead.

## CSS nodes

`AdwClamp` has a single CSS node with name `clamp`.

Its children will receive the style classes `.large` when the child reached
its maximum size, `.small` when the clamp allocates its full size to the
child, `.medium` in-between, or none if it hasn't computed its size yet.</doc>
      <source-position filename="src/adw-clamp.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_clamp_new">
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="246">Creates a new `AdwClamp`.</doc>
        <source-position filename="src/adw-clamp.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp.c"
               line="251">the newly created `AdwClamp`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_clamp_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="259">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-clamp.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-clamp.c"
               line="265">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="261">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximum_size"
              c:identifier="adw_clamp_get_maximum_size"
              glib:get-property="maximum-size">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="302">Gets the maximum size allocated to the child.</doc>
        <source-position filename="src/adw-clamp.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp.c"
               line="308">the maximum size to allocate to the child</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="304">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="adw_clamp_get_tightening_threshold"
              glib:get-property="tightening-threshold">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="349">Gets the size above which the child is clamped.</doc>
        <source-position filename="src/adw-clamp.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp.c"
               line="355">the size above which the child is clamped</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="351">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_clamp_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="275">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-clamp.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="277">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="278">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="adw_clamp_set_maximum_size"
              glib:set-property="maximum-size">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="322">Sets the maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/adw-clamp.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="324">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="325">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="adw_clamp_set_tightening_threshold"
              glib:set-property="tightening-threshold">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="369">Sets the size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum size, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the size up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/adw-clamp.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="371">a clamp</doc>
            <type name="Clamp" c:type="AdwClamp*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp.c"
                 line="372">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get" value="adw_clamp_get_child"/>
        <attribute name="org.gtk.Property.set" value="adw_clamp_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="169">The child widget of the `AdwClamp`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="maximum-size"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="179">The maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp.c"
             line="191">The size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the child
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the size up to the maximum.
If the threshold is lower than the minimum size to allocate to the child,
that size will be used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ClampClass"
            c:type="AdwClampClass"
            glib:is-gtype-struct-for="Clamp">
      <source-position filename="src/adw-clamp.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="ClampLayout"
           c:symbol-prefix="clamp_layout"
           c:type="AdwClampLayout"
           parent="Gtk.LayoutManager"
           final="1"
           glib:type-name="AdwClampLayout"
           glib:get-type="adw_clamp_layout_get_type"
           glib:type-struct="ClampLayoutClass">
      <doc xml:space="preserve"
           filename="src/adw-clamp-layout.c"
           line="15">A layout manager constraining its children to a given size.

&lt;picture&gt;
  &lt;source srcset="clamp-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="clamp-wide.png" alt="clamp-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="clamp-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="clamp-narrow.png" alt="clamp-narrow"&gt;
&lt;/picture&gt;

`AdwClampLayout` constraints the size of the widgets it contains to a given
maximum size. It will constrain the width if it is horizontal, or the height
if it is vertical. The expansion of the children from their minimum to their
maximum size is eased out for a smooth transition.

If a child requires more than the requested maximum size, it will be
allocated the minimum size it can fit in instead.

Each child will get the style  classes .large when it reached its maximum
size, .small when it's allocated the full size, .medium in-between, or none
if it hasn't been allocated yet.</doc>
      <source-position filename="src/adw-clamp-layout.h" line="22"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_clamp_layout_new">
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="388">Creates a new `AdwClampLayout`.</doc>
        <source-position filename="src/adw-clamp-layout.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-clamp-layout.c"
               line="393">the newly created `AdwClampLayout`</doc>
          <type name="Gtk.LayoutManager" c:type="GtkLayoutManager*"/>
        </return-value>
      </constructor>
      <method name="get_maximum_size"
              c:identifier="adw_clamp_layout_get_maximum_size"
              glib:get-property="maximum-size">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="401">Gets the maximum size allocated to the children.</doc>
        <source-position filename="src/adw-clamp-layout.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp-layout.c"
               line="407">the maximum size to allocate to the children</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="403">a clamp layout</doc>
            <type name="ClampLayout" c:type="AdwClampLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="adw_clamp_layout_get_tightening_threshold"
              glib:get-property="tightening-threshold">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="442">Gets the size above which the children are clamped.</doc>
        <source-position filename="src/adw-clamp-layout.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp-layout.c"
               line="448">the size above which the children are clamped</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="444">a clamp layout</doc>
            <type name="ClampLayout" c:type="AdwClampLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="adw_clamp_layout_set_maximum_size"
              glib:set-property="maximum-size">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="417">Sets the maximum size allocated to the children.

It is the width if the layout is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/adw-clamp-layout.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="419">a clamp layout</doc>
            <type name="ClampLayout" c:type="AdwClampLayout*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="420">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="adw_clamp_layout_set_tightening_threshold"
              glib:set-property="tightening-threshold">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="458">Sets the size above which the children are clamped.

Starting from this size, the layout will tighten its grip on the children,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the children
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the
children, they will be allocated the whole size up to the maximum. If the
threshold is lower than the minimum size to allocate to the children, that
size will be used as the tightening threshold.

Effectively, tightening the grip on a child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/adw-clamp-layout.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="460">a clamp layout</doc>
            <type name="ClampLayout" c:type="AdwClampLayout*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-layout.c"
                 line="461">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="maximum-size"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_layout_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_layout_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="342">The maximum size to allocate to the children.

It is the width if the layout is horizontal, or the height if it is
vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_layout_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_layout_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-layout.c"
             line="355">The size above which the children are clamped.

Starting from this size, the layout will tighten its grip on the children,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the
children will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the
children, they will be allocated the whole size up to the maximum. If the
threshold is lower than the minimum size to allocate to the children, that
size will be used as the tightening threshold.

Effectively, tightening the grip on a child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ClampLayoutClass"
            c:type="AdwClampLayoutClass"
            glib:is-gtype-struct-for="ClampLayout">
      <source-position filename="src/adw-clamp-layout.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.LayoutManagerClass" c:type="GtkLayoutManagerClass"/>
      </field>
    </record>
    <class name="ClampScrollable"
           c:symbol-prefix="clamp_scrollable"
           c:type="AdwClampScrollable"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwClampScrollable"
           glib:get-type="adw_clamp_scrollable_get_type"
           glib:type-struct="ClampScrollableClass">
      <doc xml:space="preserve"
           filename="src/adw-clamp-scrollable.c"
           line="13">A scrollable [class@Clamp].

`AdwClampScrollable` is a variant of [class@Clamp] that implements the
[iface@Gtk.Scrollable] interface.

The primary use case for `AdwClampScrollable` is clamping
[class@Gtk.ListView].</doc>
      <source-position filename="src/adw-clamp-scrollable.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="adw_clamp_scrollable_new">
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="329">Creates a new `AdwClampScrollable`.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp-scrollable.c"
               line="334">the newly created `AdwClampScrollable`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_clamp_scrollable_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="342">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-clamp-scrollable.c"
               line="348">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="344">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximum_size"
              c:identifier="adw_clamp_scrollable_get_maximum_size"
              glib:get-property="maximum-size">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="410">Gets the maximum size allocated to the child.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp-scrollable.c"
               line="416">the maximum size to allocate to the child</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="412">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="adw_clamp_scrollable_get_tightening_threshold"
              glib:get-property="tightening-threshold">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="457">Gets the size above which the child is clamped.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-clamp-scrollable.c"
               line="463">the size above which the child is clamped</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="459">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_clamp_scrollable_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="358">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="360">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="361">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="adw_clamp_scrollable_set_maximum_size"
              glib:set-property="maximum-size">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="430">Sets the maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="432">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="433">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="adw_clamp_scrollable_set_tightening_threshold"
              glib:set-property="tightening-threshold">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="477">Sets the size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum width, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/adw-clamp-scrollable.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="479">a clamp scrollable</doc>
            <type name="ClampScrollable" c:type="AdwClampScrollable*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-clamp-scrollable.c"
                 line="480">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_scrollable_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_scrollable_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="253">The child widget of the `AdwClampScrollable`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="maximum-size"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_scrollable_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_scrollable_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="263">The maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="adw_clamp_scrollable_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_clamp_scrollable_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/adw-clamp-scrollable.c"
             line="275">The size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum width, the child
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum.
If the threshold is lower than the minimum size to allocate to the child,
that size will be used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ClampScrollableClass"
            c:type="AdwClampScrollableClass"
            glib:is-gtype-struct-for="ClampScrollable">
      <source-position filename="src/adw-clamp-scrollable.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="ColorScheme"
                 glib:type-name="AdwColorScheme"
                 glib:get-type="adw_color_scheme_get_type"
                 c:type="AdwColorScheme">
      <doc xml:space="preserve"
           filename="src/adw-style-manager.c"
           line="18">Application color schemes for [property@StyleManager:color-scheme].</doc>
      <member name="default"
              value="0"
              c:identifier="ADW_COLOR_SCHEME_DEFAULT"
              glib:nick="default"
              glib:name="ADW_COLOR_SCHEME_DEFAULT">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="20">Inherit the parent color-scheme. When set on the
  `AdwStyleManager` returned by [func@StyleManager.get_default], it's
  equivalent to `ADW_COLOR_SCHEME_PREFER_LIGHT`.</doc>
      </member>
      <member name="force_light"
              value="1"
              c:identifier="ADW_COLOR_SCHEME_FORCE_LIGHT"
              glib:nick="force-light"
              glib:name="ADW_COLOR_SCHEME_FORCE_LIGHT">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="23">Always use light appearance.</doc>
      </member>
      <member name="prefer_light"
              value="2"
              c:identifier="ADW_COLOR_SCHEME_PREFER_LIGHT"
              glib:nick="prefer-light"
              glib:name="ADW_COLOR_SCHEME_PREFER_LIGHT">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="24">Use light appearance unless the system
  prefers dark colors.</doc>
      </member>
      <member name="prefer_dark"
              value="3"
              c:identifier="ADW_COLOR_SCHEME_PREFER_DARK"
              glib:nick="prefer-dark"
              glib:name="ADW_COLOR_SCHEME_PREFER_DARK">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="26">Use dark appearance unless the system prefers
  prefers light colors.</doc>
      </member>
      <member name="force_dark"
              value="4"
              c:identifier="ADW_COLOR_SCHEME_FORCE_DARK"
              glib:nick="force-dark"
              glib:name="ADW_COLOR_SCHEME_FORCE_DARK">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="28">Always use dark appearance.</doc>
      </member>
    </enumeration>
    <class name="ComboRow"
           c:symbol-prefix="combo_row"
           c:type="AdwComboRow"
           parent="ActionRow"
           glib:type-name="AdwComboRow"
           glib:get-type="adw_combo_row_get_type"
           glib:type-struct="ComboRowClass">
      <doc xml:space="preserve"
           filename="src/adw-combo-row.c"
           line="16">A [class@Gtk.ListBoxRow] used to choose from a list of items.

&lt;picture&gt;
  &lt;source srcset="combo-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="combo-row.png" alt="combo-row"&gt;
&lt;/picture&gt;

The `AdwComboRow` widget allows the user to choose from a list of valid
choices. The row displays the selected choice. When activated, the row
displays a popover which allows the user to make a new choice.

Example of an `AdwComboRow` UI definition:
```xml
&lt;object class="AdwComboRow"&gt;
  &lt;property name="title" translatable="yes"&gt;Combo Row&lt;/property&gt;
  &lt;property name="model"&gt;
    &lt;object class="GtkStringList"&gt;
      &lt;items&gt;
        &lt;item translatable="yes"&gt;Foo&lt;/item&gt;
        &lt;item translatable="yes"&gt;Bar&lt;/item&gt;
        &lt;item translatable="yes"&gt;Baz&lt;/item&gt;
      &lt;/items&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```

The [property@ComboRow:selected] and [property@ComboRow:selected-item]
properties can be used to keep track of the selected item and react to their
changes.

`AdwComboRow` mirrors [class@Gtk.DropDown], see that widget for details.

`AdwComboRow` is [property@Gtk.ListBoxRow:activatable] if a model is set.

## CSS nodes

`AdwComboRow` has a main CSS node with name `row` and the `.combo` style
class.

Its popover has the node named `popover` with the `.menu` style class, it
contains a [class@Gtk.ScrolledWindow], which in turn contains a
[class@Gtk.ListView], both are accessible via their regular nodes.

## Accessibility

`AdwComboRow` uses the `GTK_ACCESSIBLE_ROLE_COMBO_BOX` role.</doc>
      <source-position filename="src/adw-combo-row.h" line="35"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_combo_row_new">
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="553">Creates a new `AdwComboRow`.</doc>
        <source-position filename="src/adw-combo-row.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="558">the newly created `AdwComboRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_expression"
              c:identifier="adw_combo_row_get_expression"
              glib:get-property="expression">
        <attribute name="org.gtk.Method.get_property" value="expression"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="825">Gets the expression used to obtain strings from items.</doc>
        <source-position filename="src/adw-combo-row.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="831">the expression used to obtain strings from items</doc>
          <type name="Gtk.Expression" c:type="GtkExpression*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="827">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_factory"
              c:identifier="adw_combo_row_get_factory"
              glib:get-property="factory">
        <attribute name="org.gtk.Method.get_property" value="factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="722">Gets the factory for populating list items.</doc>
        <source-position filename="src/adw-combo-row.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="728">the factory in use</doc>
          <type name="Gtk.ListItemFactory" c:type="GtkListItemFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="724">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_list_factory"
              c:identifier="adw_combo_row_get_list_factory"
              glib:get-property="list-factory">
        <attribute name="org.gtk.Method.get_property" value="list-factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="774">Gets the factory for populating list items in the popup.</doc>
        <source-position filename="src/adw-combo-row.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="780">the factory in use</doc>
          <type name="Gtk.ListItemFactory" c:type="GtkListItemFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="776">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="adw_combo_row_get_model"
              glib:get-property="model">
        <attribute name="org.gtk.Method.get_property" value="model"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="640">Gets the model that provides the displayed items.</doc>
        <source-position filename="src/adw-combo-row.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="646">The model in use</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="642">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="adw_combo_row_get_selected"
              glib:get-property="selected">
        <attribute name="org.gtk.Method.get_property" value="selected"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="593">Gets the position of the selected item.</doc>
        <source-position filename="src/adw-combo-row.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="599">the position of the selected item, or
  [const@Gtk.INVALID_LIST_POSITION] if no item is selected</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="595">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_item"
              c:identifier="adw_combo_row_get_selected_item"
              glib:get-property="selected-item">
        <attribute name="org.gtk.Method.get_property" value="selected-item"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="617">Gets the selected item.</doc>
        <source-position filename="src/adw-combo-row.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="623">the selected item</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="619">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_subtitle"
              c:identifier="adw_combo_row_get_use_subtitle"
              glib:get-property="use-subtitle">
        <attribute name="org.gtk.Method.get_property" value="use-subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="884">Gets whether to use the current value as the subtitle.</doc>
        <source-position filename="src/adw-combo-row.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-combo-row.c"
               line="890">whether to use the current value as the subtitle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="886">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_expression"
              c:identifier="adw_combo_row_set_expression"
              glib:set-property="expression">
        <attribute name="org.gtk.Method.set_property" value="expression"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="845">Sets the expression used to obtain strings from items.

The expression must have a value type of `G_TYPE_STRING`.

It's used to bind strings to labels produced by the default factory if
[property@ComboRow:factory] is not set, or when
[property@ComboRow:use-subtitle] is set to `TRUE`.</doc>
        <source-position filename="src/adw-combo-row.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="847">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="expression"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="848">an expression</doc>
            <type name="Gtk.Expression" c:type="GtkExpression*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_factory"
              c:identifier="adw_combo_row_set_factory"
              glib:set-property="factory">
        <attribute name="org.gtk.Method.set_property" value="factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="742">Sets the factory for populating list items.

This factory is always used for the item in the row. It is also used for
items in the popup unless [property@ComboRow:list-factory] is set.</doc>
        <source-position filename="src/adw-combo-row.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="744">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="factory"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="745">the factory to use</doc>
            <type name="Gtk.ListItemFactory" c:type="GtkListItemFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_list_factory"
              c:identifier="adw_combo_row_set_list_factory"
              glib:set-property="list-factory">
        <attribute name="org.gtk.Method.set_property" value="list-factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="794">Sets the factory for populating list items in the popup.

If this is not set, [property@ComboRow:factory] is used.</doc>
        <source-position filename="src/adw-combo-row.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="796">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="factory"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="797">the factory to use</doc>
            <type name="Gtk.ListItemFactory" c:type="GtkListItemFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="adw_combo_row_set_model"
              glib:set-property="model">
        <attribute name="org.gtk.Method.set_property" value="model"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="660">Sets the model that provides the displayed items.</doc>
        <source-position filename="src/adw-combo-row.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="662">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="663">the model to use</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected"
              c:identifier="adw_combo_row_set_selected"
              glib:set-property="selected">
        <attribute name="org.gtk.Method.set_property" value="selected"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="566">Selects the item at the given position.</doc>
        <source-position filename="src/adw-combo-row.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="568">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="569">the position of the item to select, or
  [const@Gtk.INVALID_LIST_POSITION]</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_subtitle"
              c:identifier="adw_combo_row_set_use_subtitle"
              glib:set-property="use-subtitle">
        <attribute name="org.gtk.Method.set_property" value="use-subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="904">Sets whether to use the current value as the subtitle.

If you use a custom list item factory, you will need to give the row a
name conversion expression with [property@ComboRow:expression].

If set to `TRUE`, you should not access [property@ActionRow:subtitle].

The subtitle is interpreted as Pango markup if
[property@PreferencesRow:use-markup] is set to `TRUE`.</doc>
        <source-position filename="src/adw-combo-row.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="906">a combo row</doc>
            <type name="ComboRow" c:type="AdwComboRow*"/>
          </instance-parameter>
          <parameter name="use_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-combo-row.c"
                 line="907">whether to use the current value as the subtitle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="expression"
                writable="1"
                transfer-ownership="none"
                setter="set_expression"
                getter="get_expression">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_expression"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_expression"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="494">An expression used to obtain strings from items.

The expression must have a value type of `G_TYPE_STRING`.

It's used to bind strings to labels produced by the default factory if
[property@ComboRow:factory] is not set, or when
[property@ComboRow:use-subtitle] is set to `TRUE`.</doc>
        <type name="Gtk.Expression"/>
      </property>
      <property name="factory"
                writable="1"
                transfer-ownership="none"
                setter="set_factory"
                getter="get_factory">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_factory"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="469">Factory for populating list items.

This factory is always used for the item in the row. It is also used for
items in the popup unless [property@ComboRow:list-factory] is set.</doc>
        <type name="Gtk.ListItemFactory"/>
      </property>
      <property name="list-factory"
                writable="1"
                transfer-ownership="none"
                setter="set_list_factory"
                getter="get_list_factory">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_list_factory"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_list_factory"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="482">The factory for populating list items in the popup.

If this is not set, [property@ComboRow:factory] is used.</doc>
        <type name="Gtk.ListItemFactory"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_model"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_model"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="459">The model that provides the displayed items.</doc>
        <type name="Gio.ListModel"/>
      </property>
      <property name="selected"
                writable="1"
                transfer-ownership="none"
                setter="set_selected"
                getter="get_selected"
                default-value="4294967295">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_selected"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_selected"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="436">The position of the selected item.

If no item is selected, the property has the value
[const@Gtk.INVALID_LIST_POSITION]</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="selected-item"
                transfer-ownership="none"
                getter="get_selected_item">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_selected_item"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="449">The selected item.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="use-subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_use_subtitle"
                getter="get_use_subtitle"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_combo_row_get_use_subtitle"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_combo_row_set_use_subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-combo-row.c"
             line="511">Whether to use the current value as the subtitle.

If you use a custom list item factory, you will need to give the row a
name conversion expression with [property@ComboRow:expression].

If set to `TRUE`, you should not access [property@ActionRow:subtitle].

The subtitle is interpreted as Pango markup if
[property@PreferencesRow:use-markup] is set to `TRUE`.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="ActionRow" c:type="AdwActionRow"/>
      </field>
    </class>
    <record name="ComboRowClass"
            c:type="AdwComboRowClass"
            glib:is-gtype-struct-for="ComboRow">
      <source-position filename="src/adw-combo-row.h" line="35"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-combo-row.h"
             line="27">The parent class</doc>
        <type name="ActionRowClass" c:type="AdwActionRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="DEPRECATED_IN_1_1_FOR"
                    c:identifier="ADW_DEPRECATED_IN_1_1_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="141"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_2_FOR"
                    c:identifier="ADW_DEPRECATED_IN_1_2_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="159"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_3_FOR"
                    c:identifier="ADW_DEPRECATED_IN_1_3_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="177"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_1_FOR"
                    c:identifier="ADW_DEPRECATED_TYPE_IN_1_1_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="143"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_2_FOR"
                    c:identifier="ADW_DEPRECATED_TYPE_IN_1_2_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="161"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_3_FOR"
                    c:identifier="ADW_DEPRECATED_TYPE_IN_1_3_FOR"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="179"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DURATION_INFINITE"
              value="4294967295"
              c:type="ADW_DURATION_INFINITE">
      <doc xml:space="preserve"
           filename="src/adw-animation.h"
           line="23">Indicates an [class@Animation] with an infinite duration.

This value is mostly used internally.</doc>
      <source-position filename="src/adw-animation.h" line="31"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="ADW_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="53"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Easing"
                 glib:type-name="AdwEasing"
                 glib:get-type="adw_easing_get_type"
                 c:type="AdwEasing">
      <doc xml:space="preserve"
           filename="src/adw-easing.c"
           line="22">Describes the available easing functions for use with
[class@TimedAnimation].

New values may be added to this enumeration over time.</doc>
      <member name="linear"
              value="0"
              c:identifier="ADW_LINEAR"
              glib:nick="linear"
              glib:name="ADW_LINEAR">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="24">Linear tweening.</doc>
      </member>
      <member name="ease_in_quad"
              value="1"
              c:identifier="ADW_EASE_IN_QUAD"
              glib:nick="ease-in-quad"
              glib:name="ADW_EASE_IN_QUAD">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="25">Quadratic tweening.</doc>
      </member>
      <member name="ease_out_quad"
              value="2"
              c:identifier="ADW_EASE_OUT_QUAD"
              glib:nick="ease-out-quad"
              glib:name="ADW_EASE_OUT_QUAD">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="26">Quadratic tweening, inverse of `ADW_EASE_IN_QUAD`.</doc>
      </member>
      <member name="ease_in_out_quad"
              value="3"
              c:identifier="ADW_EASE_IN_OUT_QUAD"
              glib:nick="ease-in-out-quad"
              glib:name="ADW_EASE_IN_OUT_QUAD">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="27">Quadratic tweening, combining `ADW_EASE_IN_QUAD` and
  `ADW_EASE_OUT_QUAD`.</doc>
      </member>
      <member name="ease_in_cubic"
              value="4"
              c:identifier="ADW_EASE_IN_CUBIC"
              glib:nick="ease-in-cubic"
              glib:name="ADW_EASE_IN_CUBIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="29">Cubic tweening.</doc>
      </member>
      <member name="ease_out_cubic"
              value="5"
              c:identifier="ADW_EASE_OUT_CUBIC"
              glib:nick="ease-out-cubic"
              glib:name="ADW_EASE_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="30">Cubic tweening, inverse of `ADW_EASE_IN_CUBIC`.</doc>
      </member>
      <member name="ease_in_out_cubic"
              value="6"
              c:identifier="ADW_EASE_IN_OUT_CUBIC"
              glib:nick="ease-in-out-cubic"
              glib:name="ADW_EASE_IN_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="31">Cubic tweening, combining `ADW_EASE_IN_CUBIC` and
  `ADW_EASE_OUT_CUBIC`.</doc>
      </member>
      <member name="ease_in_quart"
              value="7"
              c:identifier="ADW_EASE_IN_QUART"
              glib:nick="ease-in-quart"
              glib:name="ADW_EASE_IN_QUART">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="33">Quartic tweening.</doc>
      </member>
      <member name="ease_out_quart"
              value="8"
              c:identifier="ADW_EASE_OUT_QUART"
              glib:nick="ease-out-quart"
              glib:name="ADW_EASE_OUT_QUART">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="34">Quartic tweening, inverse of `ADW_EASE_IN_QUART`.</doc>
      </member>
      <member name="ease_in_out_quart"
              value="9"
              c:identifier="ADW_EASE_IN_OUT_QUART"
              glib:nick="ease-in-out-quart"
              glib:name="ADW_EASE_IN_OUT_QUART">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="35">Quartic tweening, combining `ADW_EASE_IN_QUART` and
  `ADW_EASE_OUT_QUART`.</doc>
      </member>
      <member name="ease_in_quint"
              value="10"
              c:identifier="ADW_EASE_IN_QUINT"
              glib:nick="ease-in-quint"
              glib:name="ADW_EASE_IN_QUINT">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="37">Quintic tweening.</doc>
      </member>
      <member name="ease_out_quint"
              value="11"
              c:identifier="ADW_EASE_OUT_QUINT"
              glib:nick="ease-out-quint"
              glib:name="ADW_EASE_OUT_QUINT">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="38">Quintic tweening, inverse of `ADW_EASE_IN_QUINT`.</doc>
      </member>
      <member name="ease_in_out_quint"
              value="12"
              c:identifier="ADW_EASE_IN_OUT_QUINT"
              glib:nick="ease-in-out-quint"
              glib:name="ADW_EASE_IN_OUT_QUINT">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="39">Quintic tweening, combining `ADW_EASE_IN_QUINT` and
  `ADW_EASE_OUT_QUINT`.</doc>
      </member>
      <member name="ease_in_sine"
              value="13"
              c:identifier="ADW_EASE_IN_SINE"
              glib:nick="ease-in-sine"
              glib:name="ADW_EASE_IN_SINE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="41">Sine wave tweening.</doc>
      </member>
      <member name="ease_out_sine"
              value="14"
              c:identifier="ADW_EASE_OUT_SINE"
              glib:nick="ease-out-sine"
              glib:name="ADW_EASE_OUT_SINE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="42">Sine wave tweening, inverse of `ADW_EASE_IN_SINE`.</doc>
      </member>
      <member name="ease_in_out_sine"
              value="15"
              c:identifier="ADW_EASE_IN_OUT_SINE"
              glib:nick="ease-in-out-sine"
              glib:name="ADW_EASE_IN_OUT_SINE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="43">Sine wave tweening, combining `ADW_EASE_IN_SINE` and
  `ADW_EASE_OUT_SINE`.</doc>
      </member>
      <member name="ease_in_expo"
              value="16"
              c:identifier="ADW_EASE_IN_EXPO"
              glib:nick="ease-in-expo"
              glib:name="ADW_EASE_IN_EXPO">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="45">Exponential tweening.</doc>
      </member>
      <member name="ease_out_expo"
              value="17"
              c:identifier="ADW_EASE_OUT_EXPO"
              glib:nick="ease-out-expo"
              glib:name="ADW_EASE_OUT_EXPO">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="46">Exponential tweening, inverse of `ADW_EASE_IN_EXPO`.</doc>
      </member>
      <member name="ease_in_out_expo"
              value="18"
              c:identifier="ADW_EASE_IN_OUT_EXPO"
              glib:nick="ease-in-out-expo"
              glib:name="ADW_EASE_IN_OUT_EXPO">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="47">Exponential tweening, combining `ADW_EASE_IN_EXPO` and
  `ADW_EASE_OUT_EXPO`.</doc>
      </member>
      <member name="ease_in_circ"
              value="19"
              c:identifier="ADW_EASE_IN_CIRC"
              glib:nick="ease-in-circ"
              glib:name="ADW_EASE_IN_CIRC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="49">Circular tweening.</doc>
      </member>
      <member name="ease_out_circ"
              value="20"
              c:identifier="ADW_EASE_OUT_CIRC"
              glib:nick="ease-out-circ"
              glib:name="ADW_EASE_OUT_CIRC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="50">Circular tweening, inverse of `ADW_EASE_IN_CIRC`.</doc>
      </member>
      <member name="ease_in_out_circ"
              value="21"
              c:identifier="ADW_EASE_IN_OUT_CIRC"
              glib:nick="ease-in-out-circ"
              glib:name="ADW_EASE_IN_OUT_CIRC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="51">Circular tweening, combining `ADW_EASE_IN_CIRC` and
  `ADW_EASE_OUT_CIRC`.</doc>
      </member>
      <member name="ease_in_elastic"
              value="22"
              c:identifier="ADW_EASE_IN_ELASTIC"
              glib:nick="ease-in-elastic"
              glib:name="ADW_EASE_IN_ELASTIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="53">Elastic tweening, with offshoot on start.</doc>
      </member>
      <member name="ease_out_elastic"
              value="23"
              c:identifier="ADW_EASE_OUT_ELASTIC"
              glib:nick="ease-out-elastic"
              glib:name="ADW_EASE_OUT_ELASTIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="54">Elastic tweening, with offshoot on end, inverse of
  `ADW_EASE_IN_ELASTIC`.</doc>
      </member>
      <member name="ease_in_out_elastic"
              value="24"
              c:identifier="ADW_EASE_IN_OUT_ELASTIC"
              glib:nick="ease-in-out-elastic"
              glib:name="ADW_EASE_IN_OUT_ELASTIC">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="56">Elastic tweening, with offshoot on both ends,
  combining `ADW_EASE_IN_ELASTIC` and `ADW_EASE_OUT_ELASTIC`.</doc>
      </member>
      <member name="ease_in_back"
              value="25"
              c:identifier="ADW_EASE_IN_BACK"
              glib:nick="ease-in-back"
              glib:name="ADW_EASE_IN_BACK">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="58">Overshooting cubic tweening, with backtracking on start.</doc>
      </member>
      <member name="ease_out_back"
              value="26"
              c:identifier="ADW_EASE_OUT_BACK"
              glib:nick="ease-out-back"
              glib:name="ADW_EASE_OUT_BACK">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="59">Overshooting cubic tweening, with backtracking on end,
  inverse of `ADW_EASE_IN_BACK`.</doc>
      </member>
      <member name="ease_in_out_back"
              value="27"
              c:identifier="ADW_EASE_IN_OUT_BACK"
              glib:nick="ease-in-out-back"
              glib:name="ADW_EASE_IN_OUT_BACK">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="61">Overshooting cubic tweening, with backtracking on both
  ends, combining `ADW_EASE_IN_BACK` and `ADW_EASE_OUT_BACK`.</doc>
      </member>
      <member name="ease_in_bounce"
              value="28"
              c:identifier="ADW_EASE_IN_BOUNCE"
              glib:nick="ease-in-bounce"
              glib:name="ADW_EASE_IN_BOUNCE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="63">Exponentially decaying parabolic (bounce) tweening,
  on start.</doc>
      </member>
      <member name="ease_out_bounce"
              value="29"
              c:identifier="ADW_EASE_OUT_BOUNCE"
              glib:nick="ease-out-bounce"
              glib:name="ADW_EASE_OUT_BOUNCE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="65">Exponentially decaying parabolic (bounce) tweening,
  with bounce on end, inverse of `ADW_EASE_IN_BOUNCE`.</doc>
      </member>
      <member name="ease_in_out_bounce"
              value="30"
              c:identifier="ADW_EASE_IN_OUT_BOUNCE"
              glib:nick="ease-in-out-bounce"
              glib:name="ADW_EASE_IN_OUT_BOUNCE">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="67">Exponentially decaying parabolic (bounce) tweening,
  with bounce on both ends, combining `ADW_EASE_IN_BOUNCE` and
  `ADW_EASE_OUT_BOUNCE`.</doc>
      </member>
      <function name="ease" c:identifier="adw_easing_ease">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="428">Computes easing with @easing for @value.

@value should generally be in the [0, 1] range.</doc>
        <source-position filename="src/adw-easing.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-easing.c"
               line="437">the easing for @value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-easing.c"
                 line="430">an easing value</doc>
            <type name="Easing" c:type="AdwEasing"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-easing.c"
                 line="431">a value to ease</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="EntryRow"
           c:symbol-prefix="entry_row"
           c:type="AdwEntryRow"
           version="1.2"
           parent="PreferencesRow"
           glib:type-name="AdwEntryRow"
           glib:get-type="adw_entry_row_get_type"
           glib:type-struct="EntryRowClass">
      <doc xml:space="preserve"
           filename="src/adw-entry-row.c"
           line="21">A [class@Gtk.ListBoxRow] with an embedded text entry.

&lt;picture&gt;
  &lt;source srcset="entry-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="entry-row.png" alt="entry-row"&gt;
&lt;/picture&gt;

`AdwEntryRow` has a title that doubles as placeholder text. It shows an icon
indicating that it's editable and can receive additional widgets before or
after the editable part.

If [property@EntryRow:show-apply-button] is set to `TRUE`, `AdwEntryRow` can
show an apply button when editing its contents. This can be useful if
changing its contents can result in an expensive operation, such as network
activity.

`AdwEntryRow` provides only minimal API and should be used with the
[iface@Gtk.Editable] API.

See also [class@PasswordEntryRow].

## AdwEntryRow as GtkBuildable

The `AdwEntryRow` implementation of the [iface@Gtk.Buildable] interface
supports adding a child at its end by specifying “suffix” or omitting the
“type” attribute of a &lt;child&gt; element.

It also supports adding a child as a prefix widget by specifying “prefix” as
the “type” attribute of a &lt;child&gt; element.

## CSS nodes

`AdwEntryRow` has a single CSS node with name `row` and the `.entry` style
class.</doc>
      <source-position filename="src/adw-entry-row.h" line="32"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="adw_entry_row_new" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="695">Creates a new `AdwEntryRow`.</doc>
        <source-position filename="src/adw-entry-row.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="700">the newly created `AdwEntryRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_prefix"
              c:identifier="adw_entry_row_add_prefix"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="710">Adds a prefix widget to @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="712">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="713">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_suffix"
              c:identifier="adw_entry_row_add_suffix"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="734">Adds a suffix widget to @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="736">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="737">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activates_default"
              c:identifier="adw_entry_row_get_activates_default"
              glib:get-property="activates-default"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="activates-default"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="1063">Gets whether activating the embedded entry can activate the default widget.</doc>
        <source-position filename="src/adw-entry-row.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="1069">whether to activate the default widget</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1065">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attributes"
              c:identifier="adw_entry_row_get_attributes"
              glib:get-property="attributes"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="attributes"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="958">Gets Pango attributes applied to the text of the embedded entry.</doc>
        <source-position filename="src/adw-entry-row.h" line="72"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="964">the list of attributes</doc>
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="960">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_emoji_completion"
              c:identifier="adw_entry_row_get_enable_emoji_completion"
              glib:get-property="enable-emoji-completion"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="enable-emoji-completion"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="1010">Gets whether to suggest emoji replacements on @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="1016">whether or not emoji completion is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1012">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_hints"
              c:identifier="adw_entry_row_get_input_hints"
              glib:get-property="input-hints"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="input-hints"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="854">Gets the additional input hints of @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="860">The input hints</doc>
          <type name="Gtk.InputHints" c:type="GtkInputHints"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="856">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_purpose"
              c:identifier="adw_entry_row_get_input_purpose"
              glib:get-property="input-purpose"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="input-purpose"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="907">Gets the input purpose of @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="913">the input purpose</doc>
          <type name="Gtk.InputPurpose" c:type="GtkInputPurpose"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="909">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_apply_button"
              c:identifier="adw_entry_row_get_show_apply_button"
              glib:get-property="show-apply-button"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="show-apply-button"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="790">Gets whether @self can show the apply button.</doc>
        <source-position filename="src/adw-entry-row.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="796">whether to show the apply button</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="792">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grab_focus_without_selecting"
              c:identifier="adw_entry_row_grab_focus_without_selecting"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="1155">Causes @self to have keyboard focus without selecting the text.

See [method@Gtk.Text.grab_focus_without_selecting] for more information.</doc>
        <source-position filename="src/adw-entry-row.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-entry-row.c"
               line="1163">whether the focus is now inside @self</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1157">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_entry_row_remove" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="758">Removes a child from @self.</doc>
        <source-position filename="src/adw-entry-row.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="760">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="761">the child to be removed</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_activates_default"
              c:identifier="adw_entry_row_set_activates_default"
              glib:set-property="activates-default"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="activates-default"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="1085">Sets whether activating the embedded entry can activate the default widget.</doc>
        <source-position filename="src/adw-entry-row.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1087">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="activates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1088">whether to activate the default widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes"
              c:identifier="adw_entry_row_set_attributes"
              glib:set-property="attributes"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="attributes"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="980">Sets Pango attributes to apply to the text of the embedded entry.

The [struct@Pango.Attribute]'s `start_index` and `end_index` must refer to
the [class@Gtk.EntryBuffer] text, i.e. without the preedit string.</doc>
        <source-position filename="src/adw-entry-row.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="982">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="attributes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="983">a list of attributes</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_emoji_completion"
              c:identifier="adw_entry_row_set_enable_emoji_completion"
              glib:set-property="enable-emoji-completion"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="enable-emoji-completion"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="1032">Sets whether to suggest emoji replacements on @self.

Emoji replacement is done with :-delimited names, like `:heart:`.</doc>
        <source-position filename="src/adw-entry-row.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1034">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="enable_emoji_completion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="1035">Whether emoji completion should be enabled or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_input_hints"
              c:identifier="adw_entry_row_set_input_hints"
              glib:set-property="input-hints"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="input-hints"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="876">Set additional input hints for @self.

Input hints allow input methods to fine-tune their behavior.

See also: [property@AdwEntryRow:input-purpose]</doc>
        <source-position filename="src/adw-entry-row.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="878">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="879">the hints</doc>
            <type name="Gtk.InputHints" c:type="GtkInputHints"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_input_purpose"
              c:identifier="adw_entry_row_set_input_purpose"
              glib:set-property="input-purpose"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="input-purpose"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="929">Sets the input purpose of @self.

The input purpose can be used by input methods to adjust their behavior.</doc>
        <source-position filename="src/adw-entry-row.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="931">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="purpose" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="932">the purpose</doc>
            <type name="Gtk.InputPurpose" c:type="GtkInputPurpose"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_apply_button"
              c:identifier="adw_entry_row_set_show_apply_button"
              glib:set-property="show-apply-button"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="show-apply-button"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="812">Sets whether @self can show the apply button.

When set to `TRUE`, typing text in the entry will reveal an apply button.
Clicking it or pressing the &lt;kbd&gt;Enter&lt;/kbd&gt; key will hide the button and
emit the [signal@EntryRow::apply] signal.

This is useful if changing the entry contents can trigger an expensive
operation, e.g. network activity, to avoid triggering it after typing every
character.</doc>
        <source-position filename="src/adw-entry-row.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="814">an entry row</doc>
            <type name="EntryRow" c:type="AdwEntryRow*"/>
          </instance-parameter>
          <parameter name="show_apply_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-entry-row.c"
                 line="815">whether to show the apply button</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activates-default"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_activates_default"
                getter="get_activates_default"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_activates_default"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_activates_default"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="536">Whether activating the embedded entry can activate the default widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="attributes"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_attributes"
                getter="get_attributes">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_attributes"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_attributes"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="507">A list of Pango attributes to apply to the text of the embedded entry.

The [struct@Pango.Attribute]'s `start_index` and `end_index` must refer to
the [class@Gtk.EntryBuffer] text, i.e. without the preedit string.</doc>
        <type name="Pango.AttrList"/>
      </property>
      <property name="enable-emoji-completion"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_emoji_completion"
                getter="get_enable_emoji_completion"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_enable_emoji_completion"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_enable_emoji_completion"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="522">Whether to suggest emoji replacements on the entry row.

Emoji replacement is done with :-delimited names, like `:heart:`.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="input-hints"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_input_hints"
                getter="get_input_hints"
                default-value="GTK_INPUT_HINT_NONE">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_input_hints"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_input_hints"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="475">Additional input hints for the entry row.

Input hints allow input methods to fine-tune their behavior.

See also: [property@Adw.EntryRow:input-purpose]</doc>
        <type name="Gtk.InputHints"/>
      </property>
      <property name="input-purpose"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_input_purpose"
                getter="get_input_purpose"
                default-value="GTK_INPUT_PURPOSE_FREE_FORM">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_input_purpose"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_input_purpose"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="492">The input purpose of the entry row.

The input purpose can be used by input methods to adjust their behavior.</doc>
        <type name="Gtk.InputPurpose"/>
      </property>
      <property name="show-apply-button"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_show_apply_button"
                getter="get_show_apply_button"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_entry_row_get_show_apply_button"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_entry_row_set_show_apply_button"/>
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="455">Whether to show the apply button.

When set to `TRUE`, typing text in the entry will reveal an apply button.
Clicking it or pressing the &lt;kbd&gt;Enter&lt;/kbd&gt; key will hide the button and
emit the [signal@EntryRow::apply] signal.

This is useful if changing the entry contents can trigger an expensive
operation, e.g. network activity, to avoid triggering it after typing every
character.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="AdwPreferencesRow"/>
      </field>
      <glib:signal name="apply" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="552">Emitted when the apply button is pressed.

See [property@EntryRow:show-apply-button].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="entry-activated" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.c"
             line="570">Emitted when the embedded entry is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EntryRowClass"
            c:type="AdwEntryRowClass"
            glib:is-gtype-struct-for="EntryRow">
      <source-position filename="src/adw-entry-row.h" line="32"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-entry-row.h"
             line="27">The parent class</doc>
        <type name="PreferencesRowClass" c:type="AdwPreferencesRowClass"/>
      </field>
    </record>
    <class name="EnumListItem"
           c:symbol-prefix="enum_list_item"
           c:type="AdwEnumListItem"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwEnumListItem"
           glib:get-type="adw_enum_list_item_get_type"
           glib:type-struct="EnumListItemClass">
      <doc xml:space="preserve"
           filename="src/adw-enum-list-model.c"
           line="44">`AdwEnumListItem` is the type of items in a [class@EnumListModel].</doc>
      <source-position filename="src/adw-enum-list-model.h" line="22"/>
      <method name="get_name"
              c:identifier="adw_enum_list_item_get_name"
              glib:get-property="name">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="162">Gets the enum value name.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-enum-list-model.c"
               line="167">the enum value name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="AdwEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick"
              c:identifier="adw_enum_list_item_get_nick"
              glib:get-property="nick">
        <attribute name="org.gtk.Method.get_property" value="nick"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="177">Gets the enum value nick.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-enum-list-model.c"
               line="182">the enum value nick</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="AdwEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="adw_enum_list_item_get_value"
              glib:get-property="value">
        <attribute name="org.gtk.Method.get_property" value="value"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="147">Gets the enum value.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-enum-list-model.c"
               line="152">the enum value</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="AdwEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_enum_list_item_get_name"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="109">The enum value name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nick"
                transfer-ownership="none"
                getter="get_nick"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_enum_list_item_get_nick"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="119">The enum value nick.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                transfer-ownership="none"
                getter="get_value"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_enum_list_item_get_value"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="99">The enum value.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="EnumListItemClass"
            c:type="AdwEnumListItemClass"
            glib:is-gtype-struct-for="EnumListItem">
      <source-position filename="src/adw-enum-list-model.h" line="22"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="EnumListModel"
           c:symbol-prefix="enum_list_model"
           c:type="AdwEnumListModel"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwEnumListModel"
           glib:get-type="adw_enum_list_model_get_type"
           glib:type-struct="EnumListModelClass">
      <doc xml:space="preserve"
           filename="src/adw-enum-list-model.c"
           line="13">A [iface@Gio.ListModel] representing values of a given enum.

`AdwEnumListModel` contains objects of type [class@EnumListItem].</doc>
      <source-position filename="src/adw-enum-list-model.h" line="36"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="adw_enum_list_model_new">
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="315">Creates a new `AdwEnumListModel` for @enum_type.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-enum-list-model.c"
               line="321">the newly created `AdwEnumListModel`</doc>
          <type name="EnumListModel" c:type="AdwEnumListModel*"/>
        </return-value>
        <parameters>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-enum-list-model.c"
                 line="317">the type of the enum to construct the model from</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="find_position"
              c:identifier="adw_enum_list_model_find_position">
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="346">Finds the position of a given enum value in @self.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListModel" c:type="AdwEnumListModel*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-enum-list-model.c"
                 line="348">an enum value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enum_type"
              c:identifier="adw_enum_list_model_get_enum_type"
              glib:get-property="enum-type">
        <attribute name="org.gtk.Method.get_property" value="enum-type"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="331">Gets the type of the enum represented by @self.</doc>
        <source-position filename="src/adw-enum-list-model.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-enum-list-model.c"
               line="336">the enum type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListModel" c:type="AdwEnumListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="enum-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_enum_type">
        <attribute name="org.gtk.Property.get"
                   value="adw_enum_list_model_get_enum_type"/>
        <doc xml:space="preserve"
             filename="src/adw-enum-list-model.c"
             line="263">The type of the enum represented by the model.</doc>
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <record name="EnumListModelClass"
            c:type="AdwEnumListModelClass"
            glib:is-gtype-struct-for="EnumListModel">
      <source-position filename="src/adw-enum-list-model.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ExpanderRow"
           c:symbol-prefix="expander_row"
           c:type="AdwExpanderRow"
           parent="PreferencesRow"
           glib:type-name="AdwExpanderRow"
           glib:get-type="adw_expander_row_get_type"
           glib:type-struct="ExpanderRowClass">
      <doc xml:space="preserve"
           filename="src/adw-expander-row.c"
           line="14">A [class@Gtk.ListBoxRow] used to reveal widgets.

&lt;picture&gt;
  &lt;source srcset="expander-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="expander-row.png" alt="expander-row"&gt;
&lt;/picture&gt;

The `AdwExpanderRow` widget allows the user to reveal or hide widgets below
it. It also allows the user to enable the expansion of the row, allowing to
disable all that the row contains.

## AdwExpanderRow as GtkBuildable

The `AdwExpanderRow` implementation of the [iface@Gtk.Buildable] interface
supports adding a child as an action widget by specifying “action” as the
“type” attribute of a &lt;child&gt; element.

It also supports adding it as a prefix widget by specifying “prefix” as the
“type” attribute of a &lt;child&gt; element.

## CSS nodes

`AdwExpanderRow` has a main CSS node with name `row` and the `.expander`
style class. It has the `.empty` style class when it contains no children.

It contains the subnodes `row.header` for its main embedded row,
`list.nested` for the list it can expand, and `image.expander-row-arrow` for
its arrow.</doc>
      <source-position filename="src/adw-expander-row.h" line="35"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_expander_row_new">
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="349">Creates a new `AdwExpanderRow`.</doc>
        <source-position filename="src/adw-expander-row.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="354">the newly created `AdwExpanderRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_action" c:identifier="adw_expander_row_add_action">
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="362">Adds an action widget to @self.</doc>
        <source-position filename="src/adw-expander-row.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="364">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="365">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prefix" c:identifier="adw_expander_row_add_prefix">
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="384">Adds a prefix widget to @self.</doc>
        <source-position filename="src/adw-expander-row.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="386">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="387">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_row" c:identifier="adw_expander_row_add_row">
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="409">Adds a widget to @self.

The widget will appear in the expanding list below @self.</doc>
        <source-position filename="src/adw-expander-row.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="411">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="412">a widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enable_expansion"
              c:identifier="adw_expander_row_get_enable_expansion"
              glib:get-property="enable-expansion">
        <attribute name="org.gtk.Method.get_property"
                   value="enable-expansion"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="613">Gets whether the expansion of @self is enabled.</doc>
        <source-position filename="src/adw-expander-row.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="619">whether the expansion of @self is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="615">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded"
              c:identifier="adw_expander_row_get_expanded"
              glib:get-property="expanded">
        <attribute name="org.gtk.Method.get_property" value="expanded"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="561">Gets whether @self is expanded.</doc>
        <source-position filename="src/adw-expander-row.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="567">whether @self is expanded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="563">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_expander_row_get_icon_name"
              glib:get-property="icon-name"
              deprecated="1"
              deprecated-version="1.3">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="517">Gets the icon name for @self.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ExpanderRow.add_prefix] to add an icon.</doc-deprecated>
        <source-position filename="src/adw-expander-row.h" line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="523">the icon name for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="519">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_enable_switch"
              c:identifier="adw_expander_row_get_show_enable_switch"
              glib:get-property="show-enable-switch">
        <attribute name="org.gtk.Method.get_property"
                   value="show-enable-switch"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="662">Gets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="src/adw-expander-row.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="668">whether the switch enabling the expansion is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="664">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="adw_expander_row_get_subtitle"
              glib:get-property="subtitle">
        <attribute name="org.gtk.Method.get_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="474">Gets the subtitle for @self.</doc>
        <source-position filename="src/adw-expander-row.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="480">the subtitle for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="476">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_lines"
              c:identifier="adw_expander_row_get_subtitle_lines"
              glib:get-property="subtitle-lines"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="subtitle-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="758">Gets the number of lines at the end of which the subtitle label will be
ellipsized.</doc>
        <source-position filename="src/adw-expander-row.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="765">the number of lines at the end of which the subtitle label will be
  ellipsized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="760">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_lines"
              c:identifier="adw_expander_row_get_title_lines"
              glib:get-property="title-lines"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="title-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="709">Gets the number of lines at the end of which the title label will be
ellipsized.</doc>
        <source-position filename="src/adw-expander-row.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-expander-row.c"
               line="716">the number of lines at the end of which the title label will be
  ellipsized</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="711">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_expander_row_remove">
        <source-position filename="src/adw-expander-row.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_expansion"
              c:identifier="adw_expander_row_set_enable_expansion"
              glib:set-property="enable-expansion">
        <attribute name="org.gtk.Method.set_property"
                   value="enable-expansion"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="633">Sets whether the expansion of @self is enabled.</doc>
        <source-position filename="src/adw-expander-row.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="635">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="enable_expansion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="636">whether to enable the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded"
              c:identifier="adw_expander_row_set_expanded"
              glib:set-property="expanded">
        <attribute name="org.gtk.Method.set_property" value="expanded"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="581">Sets whether @self is expanded.</doc>
        <source-position filename="src/adw-expander-row.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="583">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="expanded" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="584">whether to expand the row</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_expander_row_set_icon_name"
              glib:set-property="icon-name"
              deprecated="1"
              deprecated-version="1.3">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="539">Sets the icon name for @self.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ExpanderRow.add_prefix] to add an icon.</doc-deprecated>
        <source-position filename="src/adw-expander-row.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="541">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="542">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_enable_switch"
              c:identifier="adw_expander_row_set_show_enable_switch"
              glib:set-property="show-enable-switch">
        <attribute name="org.gtk.Method.set_property"
                   value="show-enable-switch"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="682">Sets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="src/adw-expander-row.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="684">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="show_enable_switch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="685">whether to show the switch enabling the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="adw_expander_row_set_subtitle"
              glib:set-property="subtitle">
        <attribute name="org.gtk.Method.set_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="494">Sets the subtitle for @self.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <source-position filename="src/adw-expander-row.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="496">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="497">the subtitle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_lines"
              c:identifier="adw_expander_row_set_subtitle_lines"
              glib:set-property="subtitle-lines"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="subtitle-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="782">Sets the number of lines at the end of which the subtitle label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="src/adw-expander-row.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="784">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="subtitle_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="785">the number of lines at the end of which the subtitle label will be ellipsized</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title_lines"
              c:identifier="adw_expander_row_set_title_lines"
              glib:set-property="title-lines"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="title-lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="733">Sets the number of lines at the end of which the title label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="src/adw-expander-row.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="735">an expander row</doc>
            <type name="ExpanderRow" c:type="AdwExpanderRow*"/>
          </instance-parameter>
          <parameter name="title_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-expander-row.c"
                 line="736">the number of lines at the end of which the title label will be ellipsized</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-expansion"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_expansion"
                getter="get_enable_expansion"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_enable_expansion"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_enable_expansion"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="226">Whether expansion is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded"
                getter="get_expanded"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_expanded"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_expanded"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="216">Whether the row is expanded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                deprecated="1"
                deprecated-version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="204">The icon name for this row.</doc>
        <doc-deprecated xml:space="preserve">Use [method@ExpanderRow.add_prefix] to add an icon.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-enable-switch"
                writable="1"
                transfer-ownership="none"
                setter="set_show_enable_switch"
                getter="get_show_enable_switch"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_show_enable_switch"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_show_enable_switch"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="236">Whether the switch enabling the expansion is visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_subtitle"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="191">The subtitle for this row.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle-lines"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_lines"
                getter="get_subtitle_lines"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_subtitle_lines"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_subtitle_lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="261">The number of lines at the end of which the subtitle label will be
ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="title-lines"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_title_lines"
                getter="get_title_lines"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_expander_row_get_title_lines"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_expander_row_set_title_lines"/>
        <doc xml:space="preserve"
             filename="src/adw-expander-row.c"
             line="246">The number of lines at the end of which the title label will be ellipsized.

If the value is 0, the number of lines won't be limited.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="AdwPreferencesRow"/>
      </field>
    </class>
    <record name="ExpanderRowClass"
            c:type="AdwExpanderRowClass"
            glib:is-gtype-struct-for="ExpanderRow">
      <source-position filename="src/adw-expander-row.h" line="35"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-expander-row.h"
             line="27">The parent class</doc>
        <type name="PreferencesRowClass" c:type="AdwPreferencesRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Flap"
           c:symbol-prefix="flap"
           c:type="AdwFlap"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwFlap"
           glib:get-type="adw_flap_get_type"
           glib:type-struct="FlapClass">
      <doc xml:space="preserve"
           filename="src/adw-flap.c"
           line="22">An adaptive container acting like a box or an overlay.

&lt;picture&gt;
  &lt;source srcset="flap-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="flap-wide.png" alt="flap-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="flap-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="flap-narrow.png" alt="flap-narrow"&gt;
&lt;/picture&gt;

The `AdwFlap` widget can display its children like a [class@Gtk.Box] does or
like a [class@Gtk.Overlay] does, according to the
[property@Flap:fold-policy] value.

`AdwFlap` has at most three children: [property@Flap:content],
[property@Flap:flap] and [property@Flap:separator]. Content is the primary
child, flap is displayed next to it when unfolded, or overlays it when
folded. Flap can be shown or hidden by changing the
[property@Flap:reveal-flap] value, as well as via swipe gestures if
[property@Flap:swipe-to-open] and/or [property@Flap:swipe-to-close] are set
to `TRUE`.

Optionally, a separator can be provided, which would be displayed between
the content and the flap when there's no shadow to separate them, depending
on the transition type.

[property@Flap:flap] is transparent by default; add the
[`.background`](style-classes.html#background) style class to it if this is
unwanted.

If [property@Flap:modal] is set to `TRUE`, content becomes completely
inaccessible when the flap is revealed while folded.

The position of the flap and separator children relative to the content is
determined by orientation, as well as the [property@Flap:flap-position]
value.

Folding the flap will automatically hide the flap widget, and unfolding it
will automatically reveal it. If this behavior is not desired, the
[property@Flap:locked] property can be used to override it.

Common use cases include sidebars, header bars that need to be able to
overlap the window content (for example, in fullscreen mode) and bottom
sheets.

## AdwFlap as GtkBuildable

The `AdwFlap` implementation of the [iface@Gtk.Buildable] interface supports
setting the flap child by specifying “flap” as the “type” attribute of a
`&lt;child&gt;` element, and separator by specifying “separator”. Specifying
“content” child type or omitting it results in setting the content child.

## CSS nodes

`AdwFlap` has a single CSS node with name `flap`. The node will get the style
classes `.folded` when it is folded, and `.unfolded` when it's not.</doc>
      <source-position filename="src/adw-flap.h" line="25"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_flap_new">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1756">Creates a new `AdwFlap`.</doc>
        <source-position filename="src/adw-flap.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1761">the newly created `AdwFlap`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_content"
              c:identifier="adw_flap_get_content"
              glib:get-property="content">
        <attribute name="org.gtk.Method.get_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1769">Gets the content widget for @self.</doc>
        <source-position filename="src/adw-flap.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1775">the content widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1771">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flap"
              c:identifier="adw_flap_get_flap"
              glib:get-property="flap">
        <attribute name="org.gtk.Method.get_property" value="flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1817">Gets the flap widget for @self.</doc>
        <source-position filename="src/adw-flap.h" line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1823">the flap widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1819">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flap_position"
              c:identifier="adw_flap_get_flap_position"
              glib:get-property="flap-position">
        <attribute name="org.gtk.Method.get_property" value="flap-position"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1916">Gets the flap position for @self.</doc>
        <source-position filename="src/adw-flap.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1922">the flap position for @self</doc>
          <type name="Gtk.PackType" c:type="GtkPackType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1918">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_duration"
              c:identifier="adw_flap_get_fold_duration"
              glib:get-property="fold-duration">
        <attribute name="org.gtk.Method.get_property" value="fold-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2157">Gets the fold transition animation duration for @self, in milliseconds.</doc>
        <source-position filename="src/adw-flap.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2163">the fold transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2159">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_policy"
              c:identifier="adw_flap_get_fold_policy"
              glib:get-property="fold-policy">
        <attribute name="org.gtk.Method.get_property" value="fold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2057">Gets the fold policy for @self.</doc>
        <source-position filename="src/adw-flap.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2063">the fold policy for @self</doc>
          <type name="FlapFoldPolicy" c:type="AdwFlapFoldPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2059">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_threshold_policy"
              c:identifier="adw_flap_get_fold_threshold_policy"
              glib:get-property="fold-threshold-policy">
        <attribute name="org.gtk.Method.get_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2112">Gets the fold threshold policy for @self.</doc>
        <source-position filename="src/adw-flap.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2114">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="adw_flap_get_folded"
              glib:get-property="folded">
        <attribute name="org.gtk.Method.get_property" value="folded"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2194">Gets whether @self is currently folded.

See [property@Flap:fold-policy].</doc>
        <source-position filename="src/adw-flap.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2202">`TRUE` if @self is currently folded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2196">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="adw_flap_get_locked"
              glib:get-property="locked">
        <attribute name="org.gtk.Method.get_property" value="locked"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2212">Gets whether @self is locked.</doc>
        <source-position filename="src/adw-flap.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2218">`TRUE` if @self is locked</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2214">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modal"
              c:identifier="adw_flap_get_modal"
              glib:get-property="modal">
        <attribute name="org.gtk.Method.get_property" value="modal"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2303">Gets whether @self is modal.</doc>
        <source-position filename="src/adw-flap.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2309">`TRUE` if @self is modal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2305">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_flap"
              c:identifier="adw_flap_get_reveal_flap"
              glib:get-property="reveal-flap">
        <attribute name="org.gtk.Method.get_property" value="reveal-flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1960">Gets whether the flap widget is revealed for @self.</doc>
        <source-position filename="src/adw-flap.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1966">`TRUE` if the flap widget is revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1962">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_params"
              c:identifier="adw_flap_get_reveal_params"
              glib:get-property="reveal-params">
        <attribute name="org.gtk.Method.get_property" value="reveal-params"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1992">Gets the reveal animation spring parameters for @self.</doc>
        <source-position filename="src/adw-flap.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1998">the reveal animation parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1994">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_progress"
              c:identifier="adw_flap_get_reveal_progress"
              glib:get-property="reveal-progress">
        <attribute name="org.gtk.Method.get_property" value="reveal-progress"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2037">Gets the current reveal progress for @self.

0 means fully hidden, 1 means fully revealed.

See [property@Flap:reveal-flap].</doc>
        <source-position filename="src/adw-flap.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2047">the current reveal progress for @self</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2039">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_separator"
              c:identifier="adw_flap_get_separator"
              glib:get-property="separator">
        <attribute name="org.gtk.Method.get_property" value="separator"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1866">Gets the separator widget for @self.</doc>
        <source-position filename="src/adw-flap.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="1872">the separator widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1868">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_close"
              c:identifier="adw_flap_get_swipe_to_close"
              glib:get-property="swipe-to-close">
        <attribute name="org.gtk.Method.get_property" value="swipe-to-close"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2395">Gets whether @self can be closed with a swipe gesture.</doc>
        <source-position filename="src/adw-flap.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2401">`TRUE` if @self can be closed with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2397">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_open"
              c:identifier="adw_flap_get_swipe_to_open"
              glib:get-property="swipe-to-open">
        <attribute name="org.gtk.Method.get_property" value="swipe-to-open"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2351">Gets whether @self can be opened with a swipe gesture.</doc>
        <source-position filename="src/adw-flap.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2357">`TRUE` if @self can be opened with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2353">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="adw_flap_get_transition_type"
              glib:get-property="transition-type">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2255">Gets the type of animation used for reveal and fold transitions in @self.</doc>
        <source-position filename="src/adw-flap.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-flap.c"
               line="2261">the current transition type of @self</doc>
          <type name="FlapTransitionType" c:type="AdwFlapTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2257">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="adw_flap_set_content"
              glib:set-property="content">
        <attribute name="org.gtk.Method.set_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1785">Sets the content widget for @self.

It's always displayed when unfolded, and partially visible when folded.</doc>
        <source-position filename="src/adw-flap.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1787">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1788">the content widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flap"
              c:identifier="adw_flap_set_flap"
              glib:set-property="flap">
        <attribute name="org.gtk.Method.set_property" value="flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1833">Sets the flap widget for @self.

It's only visible when [property@Flap:reveal-progress] is greater than 0.</doc>
        <source-position filename="src/adw-flap.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1835">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="flap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1836">the flap widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flap_position"
              c:identifier="adw_flap_set_flap_position"
              glib:set-property="flap-position">
        <attribute name="org.gtk.Method.set_property" value="flap-position"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1932">Sets the flap position for @self.

If it's set to `GTK_PACK_START`, the flap is displayed before the content,
if `GTK_PACK_END`, it's displayed after the content.</doc>
        <source-position filename="src/adw-flap.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1934">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1935">the new value</doc>
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_duration"
              c:identifier="adw_flap_set_fold_duration"
              glib:set-property="fold-duration">
        <attribute name="org.gtk.Method.set_property" value="fold-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2173">Sets the fold transition animation duration for @self, in milliseconds.</doc>
        <source-position filename="src/adw-flap.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2175">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2176">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_policy"
              c:identifier="adw_flap_set_fold_policy"
              glib:set-property="fold-policy">
        <attribute name="org.gtk.Method.set_property" value="fold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2073">Sets the fold policy for @self.</doc>
        <source-position filename="src/adw-flap.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2075">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2076">the fold policy</doc>
            <type name="FlapFoldPolicy" c:type="AdwFlapFoldPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_threshold_policy"
              c:identifier="adw_flap_set_fold_threshold_policy"
              glib:set-property="fold-threshold-policy">
        <attribute name="org.gtk.Method.set_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2126">Sets the fold threshold policy for @self.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, flap will only fold when the
children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <source-position filename="src/adw-flap.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2128">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2129">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locked"
              c:identifier="adw_flap_set_locked"
              glib:set-property="locked">
        <attribute name="org.gtk.Method.set_property" value="locked"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2228">Sets whether @self is locked.

If `FALSE`, folding when the flap is revealed automatically closes it, and
unfolding it when the flap is not revealed opens it. If `TRUE`,
[property@Flap:reveal-flap] value never changes on its own.</doc>
        <source-position filename="src/adw-flap.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2230">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="locked" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2231">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal"
              c:identifier="adw_flap_set_modal"
              glib:set-property="modal">
        <attribute name="org.gtk.Method.set_property" value="modal"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2319">Sets whether @self is modal.

If `TRUE`, clicking the content widget while flap is revealed, as well as
pressing the &lt;kbd&gt;Esc&lt;/kbd&gt; key, will close the flap. If `FALSE`, clicks are
passed through to the content widget.</doc>
        <source-position filename="src/adw-flap.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2321">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2322">whether @self is modal</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_flap"
              c:identifier="adw_flap_set_reveal_flap"
              glib:set-property="reveal-flap">
        <attribute name="org.gtk.Method.set_property" value="reveal-flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1976">Sets whether the flap widget is revealed for @self.</doc>
        <source-position filename="src/adw-flap.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1978">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="reveal_flap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1979">whether to reveal the flap widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_params"
              c:identifier="adw_flap_set_reveal_params"
              glib:set-property="reveal-params">
        <attribute name="org.gtk.Method.set_property" value="reveal-params"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2008">Sets the reveal animation spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/adw-flap.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2010">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2011">the new parameters</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_separator"
              c:identifier="adw_flap_set_separator"
              glib:set-property="separator">
        <attribute name="org.gtk.Method.set_property" value="separator"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1882">Sets the separator widget for @self.

It's displayed between content and flap when there's no shadow to display.
When exactly it's visible depends on the [property@Flap:transition-type]
value.</doc>
        <source-position filename="src/adw-flap.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1884">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="separator"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="1885">the separator widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_close"
              c:identifier="adw_flap_set_swipe_to_close"
              glib:set-property="swipe-to-close">
        <attribute name="org.gtk.Method.set_property" value="swipe-to-close"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2411">Sets whether @self can be closed with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.</doc>
        <source-position filename="src/adw-flap.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2413">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="swipe_to_close" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2414">whether @self can be closed with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_open"
              c:identifier="adw_flap_set_swipe_to_open"
              glib:set-property="swipe-to-open">
        <attribute name="org.gtk.Method.set_property" value="swipe-to-open"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2367">Sets whether @self can be opened with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.</doc>
        <source-position filename="src/adw-flap.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2369">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="swipe_to_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2370">whether @self can be opened with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="adw_flap_set_transition_type"
              glib:set-property="transition-type">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="2271">Sets the type of animation used for reveal and fold transitions in @self.

[property@Flap:flap] is transparent by default, which means the content will
be seen through it with `ADW_FLAP_TRANSITION_TYPE_OVER` transitions; add the
[`.background`](style-classes.html#background) style class to it if this is
unwanted.</doc>
        <source-position filename="src/adw-flap.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2273">a flap</doc>
            <type name="Flap" c:type="AdwFlap*"/>
          </instance-parameter>
          <parameter name="transition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-flap.c"
                 line="2274">the new transition type</doc>
            <type name="FlapTransitionType" c:type="AdwFlapTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_content"/>
        <attribute name="org.gtk.Property.set" value="adw_flap_set_content"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1261">The content widget.

It's always displayed when unfolded, and partially visible when folded.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="flap"
                writable="1"
                transfer-ownership="none"
                setter="set_flap"
                getter="get_flap">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_flap"/>
        <attribute name="org.gtk.Property.set" value="adw_flap_set_flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1273">The flap widget.

It's only visible when [property@Flap:reveal-progress] is greater than 0.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="flap-position"
                writable="1"
                transfer-ownership="none"
                setter="set_flap_position"
                getter="get_flap_position"
                default-value="GTK_PACK_START">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_flap_position"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_flap_position"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1299">The flap position.

If it's set to `GTK_PACK_START`, the flap is displayed before the content,
if `GTK_PACK_END`, it's displayed after the content.</doc>
        <type name="Gtk.PackType"/>
      </property>
      <property name="fold-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_duration"
                getter="get_fold_duration"
                default-value="250">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_fold_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_fold_duration"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1382">The fold transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fold-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_policy"
                getter="get_fold_policy"
                default-value="ADW_FLAP_FOLD_POLICY_AUTO">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_fold_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1353">The fold policy for the flap.</doc>
        <type name="FlapFoldPolicy"/>
      </property>
      <property name="fold-threshold-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_threshold_policy"
                getter="get_fold_threshold_policy"
                default-value="ADW_FOLD_THRESHOLD_POLICY_MINIMUM">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_fold_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_fold_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1364">Determines when the flap will fold.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, flap will only fold when
the children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`,
it will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="folded"
                transfer-ownership="none"
                getter="get_folded"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_folded"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1393">Whether the flap is currently folded.

See [property@Flap:fold-policy].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked"
                writable="1"
                transfer-ownership="none"
                setter="set_locked"
                getter="get_locked"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_locked"/>
        <attribute name="org.gtk.Property.set" value="adw_flap_set_locked"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1405">Whether the flap is locked.

If `FALSE`, folding when the flap is revealed automatically closes it, and
unfolding it when the flap is not revealed opens it. If `TRUE`,
[property@Flap:reveal-flap] value never changes on its own.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="modal"
                writable="1"
                transfer-ownership="none"
                setter="set_modal"
                getter="get_modal"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_modal"/>
        <attribute name="org.gtk.Property.set" value="adw_flap_set_modal"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1435">Whether the flap is modal.

If `TRUE`, clicking the content widget while flap is revealed, as well as
pressing the &lt;kbd&gt;Esc&lt;/kbd&gt; key, will close the flap. If `FALSE`, clicks
are passed through to the content widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-flap"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_flap"
                getter="get_reveal_flap"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_reveal_flap"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_reveal_flap"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1313">Whether the flap widget is revealed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-params"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_params"
                getter="get_reveal_params">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_reveal_params"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_reveal_params"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1323">The reveal animation spring parameters.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="reveal-progress"
                transfer-ownership="none"
                getter="get_reveal_progress"
                default-value="1.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_reveal_progress"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1339">The current reveal transition progress.

0 means fully hidden, 1 means fully revealed.

See [property@Flap:reveal-flap].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="separator"
                writable="1"
                transfer-ownership="none"
                setter="set_separator"
                getter="get_separator">
        <attribute name="org.gtk.Property.get" value="adw_flap_get_separator"/>
        <attribute name="org.gtk.Property.set" value="adw_flap_set_separator"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1285">The separator widget.

It's displayed between content and flap when there's no shadow to display.
When exactly it's visible depends on the [property@Flap:transition-type]
value.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="swipe-to-close"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_close"
                getter="get_swipe_to_close"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_swipe_to_close"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_swipe_to_close"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1462">Whether the flap can be closed with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipe-to-open"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_open"
                getter="get_swipe_to_open"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_swipe_to_open"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_swipe_to_open"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1449">Whether the flap can be opened with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="ADW_FLAP_TRANSITION_TYPE_OVER">
        <attribute name="org.gtk.Property.get"
                   value="adw_flap_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_flap_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="1419">the type of animation used for reveal and fold transitions.

[property@Flap:flap] is transparent by default, which means the content
will be seen through it with `ADW_FLAP_TRANSITION_TYPE_OVER` transitions;
add the [`.background`](style-classes.html#background) style class to it if
this is unwanted.</doc>
        <type name="FlapTransitionType"/>
      </property>
    </class>
    <record name="FlapClass"
            c:type="AdwFlapClass"
            glib:is-gtype-struct-for="Flap">
      <source-position filename="src/adw-flap.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="FlapFoldPolicy"
                 glib:type-name="AdwFlapFoldPolicy"
                 glib:get-type="adw_flap_fold_policy_get_type"
                 c:type="AdwFlapFoldPolicy">
      <doc xml:space="preserve"
           filename="src/adw-flap.c"
           line="84">Describes the possible folding behavior of a [class@Flap] widget.</doc>
      <member name="never"
              value="0"
              c:identifier="ADW_FLAP_FOLD_POLICY_NEVER"
              glib:nick="never"
              glib:name="ADW_FLAP_FOLD_POLICY_NEVER">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="86">Disable folding, the flap cannot reach narrow
  sizes.</doc>
      </member>
      <member name="always"
              value="1"
              c:identifier="ADW_FLAP_FOLD_POLICY_ALWAYS"
              glib:nick="always"
              glib:name="ADW_FLAP_FOLD_POLICY_ALWAYS">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="88">Keep the flap always folded.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="ADW_FLAP_FOLD_POLICY_AUTO"
              glib:nick="auto"
              glib:name="ADW_FLAP_FOLD_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="89">Fold and unfold the flap based on available
  space.</doc>
      </member>
    </enumeration>
    <enumeration name="FlapTransitionType"
                 glib:type-name="AdwFlapTransitionType"
                 glib:get-type="adw_flap_transition_type_get_type"
                 c:type="AdwFlapTransitionType">
      <doc xml:space="preserve"
           filename="src/adw-flap.c"
           line="95">Describes transitions types of a [class@Flap] widget.

It determines the type of animation when transitioning between children in a
[class@Flap] widget, as well as which areas can be swiped via
[property@Flap:swipe-to-open] and [property@Flap:swipe-to-close].

New values may be added to this enum over time.</doc>
      <member name="over"
              value="0"
              c:identifier="ADW_FLAP_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="ADW_FLAP_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="97">The flap slides over the content, which is
  dimmed. When folded, only the flap can be swiped.</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="ADW_FLAP_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="ADW_FLAP_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="99">The content slides over the flap. Only the
  content can be swiped.</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="ADW_FLAP_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="ADW_FLAP_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/adw-flap.c"
             line="101">The flap slides offscreen when hidden,
  neither the flap nor content overlap each other. Both widgets can be
  swiped.</doc>
      </member>
    </enumeration>
    <enumeration name="FoldThresholdPolicy"
                 glib:type-name="AdwFoldThresholdPolicy"
                 glib:get-type="adw_fold_threshold_policy_get_type"
                 c:type="AdwFoldThresholdPolicy">
      <doc xml:space="preserve"
           filename="src/adw-fold-threshold-policy.c"
           line="10">Determines when [class@Flap] and [class@Leaflet] will fold.</doc>
      <member name="minimum"
              value="0"
              c:identifier="ADW_FOLD_THRESHOLD_POLICY_MINIMUM"
              glib:nick="minimum"
              glib:name="ADW_FOLD_THRESHOLD_POLICY_MINIMUM">
        <doc xml:space="preserve"
             filename="src/adw-fold-threshold-policy.c"
             line="12">Folding is based on the minimum size</doc>
      </member>
      <member name="natural"
              value="1"
              c:identifier="ADW_FOLD_THRESHOLD_POLICY_NATURAL"
              glib:nick="natural"
              glib:name="ADW_FOLD_THRESHOLD_POLICY_NATURAL">
        <doc xml:space="preserve"
             filename="src/adw-fold-threshold-policy.c"
             line="13">Folding is based on the natural size</doc>
      </member>
    </enumeration>
    <class name="HeaderBar"
           c:symbol-prefix="header_bar"
           c:type="AdwHeaderBar"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwHeaderBar"
           glib:get-type="adw_header_bar_get_type"
           glib:type-struct="HeaderBarClass">
      <doc xml:space="preserve"
           filename="src/adw-header-bar.c"
           line="31">A title bar widget.

&lt;picture&gt;
  &lt;source srcset="header-bar-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="header-bar.png" alt="header-bar"&gt;
&lt;/picture&gt;

`AdwHeaderBar` is similar to [class@Gtk.HeaderBar], but provides additional
features compared to it. Refer to `GtkHeaderBar` for details.

[property@HeaderBar:centering-policy] allows to enforce strict centering of
the title widget, this is useful for [class@ViewSwitcherTitle].

[property@HeaderBar:show-start-title-buttons] and
[property@HeaderBar:show-end-title-buttons] allow to easily create split
header bar layouts using [class@Leaflet], as follows:

```xml
&lt;object class="AdwLeaflet" id="leaflet"&gt;
  &lt;child&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="AdwHeaderBar"&gt;
          &lt;binding name="show-end-title-buttons"&gt;
            &lt;lookup name="folded"&gt;leaflet&lt;/lookup&gt;
          &lt;/binding&gt;
        &lt;/object&gt;
      &lt;/child&gt;
      &lt;!-- ... --&gt;
    &lt;/object&gt;
  &lt;/child&gt;
  &lt;!-- ... --&gt;
  &lt;child&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;property name="hexpand"&gt;True&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="AdwHeaderBar"&gt;
          &lt;binding name="show-start-title-buttons"&gt;
            &lt;lookup name="folded"&gt;leaflet&lt;/lookup&gt;
          &lt;/binding&gt;
        &lt;/object&gt;
      &lt;/child&gt;
      &lt;!-- ... --&gt;
    &lt;/object&gt;
  &lt;/child&gt;
&lt;/object&gt;
```

&lt;picture&gt;
  &lt;source srcset="header-bar-split-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="header-bar-split.png" alt="header-bar-split"&gt;
&lt;/picture&gt;

## CSS nodes

```
headerbar
╰── windowhandle
    ╰── box
        ├── widget
        │   ╰── box.start
        │       ├── windowcontrols.start
        │       ╰── [other children]
        ├── [Title Widget]
        ╰── widget
            ╰── box.end
                ├── [other children]
                ╰── windowcontrols.end
```

`AdwHeaderBar`'s CSS node is called `headerbar`. It contains a `windowhandle`
subnode, which contains a `box` subnode, which contains two `widget` subnodes
at the start and end of the header bar, each of which contains a `box`
subnode with the `.start` and `.end` style classes respectively, as well as a
center node that represents the title.

Each of the boxes contains a `windowcontrols` subnode, see
[class@Gtk.WindowControls] for details, as well as other children.

## Accessibility

`AdwHeaderBar` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.</doc>
      <source-position filename="src/adw-header-bar.h" line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_header_bar_new">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="549">Creates a new `AdwHeaderBar`.</doc>
        <source-position filename="src/adw-header-bar.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="554">the newly created `AdwHeaderBar`.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_centering_policy"
              c:identifier="adw_header_bar_get_centering_policy"
              glib:get-property="centering-policy">
        <attribute name="org.gtk.Method.get_property"
                   value="centering-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="841">Gets the policy for aligning the center widget.</doc>
        <source-position filename="src/adw-header-bar.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="847">the centering policy</doc>
          <type name="CenteringPolicy" c:type="AdwCenteringPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="843">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decoration_layout"
              c:identifier="adw_header_bar_get_decoration_layout"
              glib:get-property="decoration-layout">
        <attribute name="org.gtk.Method.get_property"
                   value="decoration-layout"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="795">Gets the decoration layout for @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="76"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="801">the decoration layout</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="797">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_end_title_buttons"
              c:identifier="adw_header_bar_get_show_end_title_buttons"
              glib:get-property="show-end-title-buttons">
        <attribute name="org.gtk.Method.get_property"
                   value="show-end-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="741">Gets whether to show title buttons at the end of @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="747">`TRUE` if title buttons at the end are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="743">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_start_title_buttons"
              c:identifier="adw_header_bar_get_show_start_title_buttons"
              glib:get-property="show-start-title-buttons">
        <attribute name="org.gtk.Method.get_property"
                   value="show-start-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="687">Gets whether to show title buttons at the start of @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="693">`TRUE` if title buttons at the start are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="689">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_widget"
              c:identifier="adw_header_bar_get_title_widget"
              glib:get-property="title-widget">
        <attribute name="org.gtk.Method.get_property" value="title-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="621">Gets the title widget widget of @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-header-bar.c"
               line="627">the title widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="623">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pack_end" c:identifier="adw_header_bar_pack_end">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="576">Adds @child to @self, packed with reference to the end of @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="578">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="579">the widget to be added to @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start" c:identifier="adw_header_bar_pack_start">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="562">Adds @child to @self, packed with reference to the start of the @self.</doc>
        <source-position filename="src/adw-header-bar.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="564">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="565">the widget to be added to @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_header_bar_remove">
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="590">Removes a child from @self.

The child must have been added with [method@HeaderBar.pack_start],
[method@HeaderBar.pack_end] or [property@HeaderBar:title-widget].</doc>
        <source-position filename="src/adw-header-bar.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="592">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="593">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_centering_policy"
              c:identifier="adw_header_bar_set_centering_policy"
              glib:set-property="centering-policy">
        <attribute name="org.gtk.Method.set_property"
                   value="centering-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="857">Sets the policy for aligning the center widget.</doc>
        <source-position filename="src/adw-header-bar.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="859">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="centering_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="860">the centering policy</doc>
            <type name="CenteringPolicy" c:type="AdwCenteringPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decoration_layout"
              c:identifier="adw_header_bar_set_decoration_layout"
              glib:set-property="decoration-layout">
        <attribute name="org.gtk.Method.set_property"
                   value="decoration-layout"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="811">Sets the decoration layout for @self.

If this property is not set, the
[property@Gtk.Settings:gtk-decoration-layout] setting is used.

The format of the string is button names, separated by commas. A colon
separates the buttons that should appear at the start from those at the end.
Recognized button names are minimize, maximize, close and icon (the window
icon).

For example, “icon:minimize,maximize,close” specifies an icon at the start,
and minimize, maximize and close buttons at the end.</doc>
        <source-position filename="src/adw-header-bar.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="813">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="layout"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="814">a decoration layout</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_end_title_buttons"
              c:identifier="adw_header_bar_set_show_end_title_buttons"
              glib:set-property="show-end-title-buttons">
        <attribute name="org.gtk.Method.set_property"
                   value="show-end-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="757">Sets whether to show title buttons at the end of @self.

See [property@HeaderBar:show-start-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be closed).</doc>
        <source-position filename="src/adw-header-bar.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="759">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="760">`TRUE` to show standard title buttons</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_start_title_buttons"
              c:identifier="adw_header_bar_set_show_start_title_buttons"
              glib:set-property="show-start-title-buttons">
        <attribute name="org.gtk.Method.set_property"
                   value="show-start-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="703">Sets whether to show title buttons at the start of @self.

See [property@HeaderBar:show-end-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be closed).</doc>
        <source-position filename="src/adw-header-bar.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="705">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="706">`TRUE` to show standard title buttons</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title_widget"
              c:identifier="adw_header_bar_set_title_widget"
              glib:set-property="title-widget">
        <attribute name="org.gtk.Method.set_property" value="title-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="637">Sets the title widget for @self.

When set to `NULL`, the header bar will display the title of the window it
is contained in.

To use a different title, use [class@WindowTitle]:

```xml
&lt;object class="AdwHeaderBar"&gt;
  &lt;property name="title-widget"&gt;
    &lt;object class="AdwWindowTitle"&gt;
      &lt;property name="title" translatable="yes"&gt;Title&lt;/property&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```</doc>
        <source-position filename="src/adw-header-bar.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="639">a header bar</doc>
            <type name="HeaderBar" c:type="AdwHeaderBar*"/>
          </instance-parameter>
          <parameter name="title_widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-header-bar.c"
                 line="640">a widget to use for a title</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="centering-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_centering_policy"
                getter="get_centering_policy"
                default-value="ADW_CENTERING_POLICY_LOOSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_header_bar_get_centering_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_header_bar_set_centering_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="462">The policy for aligning the center widget.</doc>
        <type name="CenteringPolicy"/>
      </property>
      <property name="decoration-layout"
                writable="1"
                transfer-ownership="none"
                setter="set_decoration_layout"
                getter="get_decoration_layout"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_header_bar_get_decoration_layout"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_header_bar_set_decoration_layout"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="441">The decoration layout for buttons.

If this property is not set, the
[property@Gtk.Settings:gtk-decoration-layout] setting is used.

The format of the string is button names, separated by commas. A colon
separates the buttons that should appear at the start from those at the
end. Recognized button names are minimize, maximize, close and icon (the
window icon).

For example, “icon:minimize,maximize,close” specifies an icon at the start,
and minimize, maximize and close buttons at the end.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-end-title-buttons"
                writable="1"
                transfer-ownership="none"
                setter="set_show_end_title_buttons"
                getter="get_show_end_title_buttons"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_header_bar_get_show_end_title_buttons"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_header_bar_set_show_end_title_buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="424">Whether to show title buttons at the end of the header bar.

See [property@HeaderBar:show-start-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be
closed).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-start-title-buttons"
                writable="1"
                transfer-ownership="none"
                setter="set_show_start_title_buttons"
                getter="get_show_start_title_buttons"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_header_bar_get_show_start_title_buttons"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_header_bar_set_show_start_title_buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="407">Whether to show title buttons at the start of the header bar.

See [property@HeaderBar:show-end-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be
closed).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title-widget"
                writable="1"
                transfer-ownership="none"
                setter="set_title_widget"
                getter="get_title_widget">
        <attribute name="org.gtk.Property.get"
                   value="adw_header_bar_get_title_widget"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_header_bar_set_title_widget"/>
        <doc xml:space="preserve"
             filename="src/adw-header-bar.c"
             line="382">The title widget to display.

When set to `NULL`, the header bar will display the title of the window it
is contained in.

To use a different title, use [class@WindowTitle]:

```xml
&lt;object class="AdwHeaderBar"&gt;
  &lt;property name="title-widget"&gt;
    &lt;object class="AdwWindowTitle"&gt;
      &lt;property name="title" translatable="yes"&gt;Title&lt;/property&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```</doc>
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="HeaderBarClass"
            c:type="AdwHeaderBarClass"
            glib:is-gtype-struct-for="HeaderBar">
      <source-position filename="src/adw-header-bar.h" line="37"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Leaflet"
           c:symbol-prefix="leaflet"
           c:type="AdwLeaflet"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwLeaflet"
           glib:get-type="adw_leaflet_get_type"
           glib:type-struct="LeafletClass">
      <doc xml:space="preserve"
           filename="src/adw-leaflet.c"
           line="21">An adaptive container acting like a box or a stack.

&lt;picture&gt;
  &lt;source srcset="leaflet-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="leaflet-wide.png" alt="leaflet-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="leaflet-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="leaflet-narrow.png" alt="leaflet-narrow"&gt;
&lt;/picture&gt;

The `AdwLeaflet` widget can display its children like a [class@Gtk.Box] does
or like a [class@Gtk.Stack] does, adapting to size changes by switching
between the two modes.

When there is enough space the children are displayed side by side, otherwise
only one is displayed and the leaflet is said to be “folded”.
The threshold is dictated by the preferred minimum sizes of the children.
When a leaflet is folded, the children can be navigated using swipe gestures.

The “over” and “under” transition types stack the children one on top of the
other, while the “slide” transition puts the children side by side. While
navigating to a child on the side or below can be performed by swiping the
current child away, navigating to an upper child requires dragging it from
the edge where it resides. This doesn't affect non-dragging swipes.

## CSS nodes

`AdwLeaflet` has a single CSS node with name `leaflet`. The node will get the
style classes `.folded` when it is folded, `.unfolded` when it's not, or none
if it hasn't computed its fold yet.</doc>
      <source-position filename="src/adw-leaflet.h" line="46"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_leaflet_new">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2770">Creates a new `AdwLeaflet`.</doc>
        <source-position filename="src/adw-leaflet.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2775">the new created `AdwLeaflet`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="adw_leaflet_append">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2783">Adds a child to @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2790">the [class@LeafletPage] for @child</doc>
          <type name="LeafletPage" c:type="AdwLeafletPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2785">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2786">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adjacent_child"
              c:identifier="adw_leaflet_get_adjacent_child">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3500">Finds the previous or next navigatable child.

This will be the same child [method@Leaflet.navigate] or swipe gestures will
navigate to.

If there's no child to navigate to, `NULL` will be returned instead.

See [property@LeafletPage:navigatable].</doc>
        <source-position filename="src/adw-leaflet.h" line="148"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3514">the previous or next child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3502">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3503">the direction</doc>
            <type name="NavigationDirection" c:type="AdwNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_navigate_back"
              c:identifier="adw_leaflet_get_can_navigate_back"
              glib:get-property="can-navigate-back">
        <attribute name="org.gtk.Method.get_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3388">Gets whether gestures and shortcuts for navigating backward are enabled.</doc>
        <source-position filename="src/adw-leaflet.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3394">Whether gestures and shortcuts are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3390">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_navigate_forward"
              c:identifier="adw_leaflet_get_can_navigate_forward"
              glib:get-property="can-navigate-forward">
        <attribute name="org.gtk.Method.get_property"
                   value="can-navigate-forward"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3444">Gets whether gestures and shortcuts for navigating forward are enabled.</doc>
        <source-position filename="src/adw-leaflet.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3450">Whether gestures and shortcuts are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3446">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_unfold"
              c:identifier="adw_leaflet_get_can_unfold"
              glib:get-property="can-unfold">
        <attribute name="org.gtk.Method.get_property" value="can-unfold"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3010">Gets whether @self can unfold.</doc>
        <source-position filename="src/adw-leaflet.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3016">whether @self can unfold</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3012">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="adw_leaflet_get_child_by_name">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3564">Finds the child of @self with @name.

Returns `NULL` if there is no child with this name.

See [property@LeafletPage:name].</doc>
        <source-position filename="src/adw-leaflet.h" line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3575">the requested child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3566">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3567">the name of the child to find</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_transition_params"
              c:identifier="adw_leaflet_get_child_transition_params"
              glib:get-property="child-transition-params">
        <attribute name="org.gtk.Method.get_property"
                   value="child-transition-params"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3327">Gets the child transition spring parameters for @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3333">the child transition parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3329">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_running"
              c:identifier="adw_leaflet_get_child_transition_running"
              glib:get-property="child-transition-running">
        <attribute name="org.gtk.Method.get_property"
                   value="child-transition-running"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3372">Gets whether a child transition is currently running for @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3378">whether a transition is currently running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3374">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_threshold_policy"
              c:identifier="adw_leaflet_get_fold_threshold_policy"
              glib:get-property="fold-threshold-policy">
        <attribute name="org.gtk.Method.get_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3046">Gets the fold threshold policy for @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3048">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="adw_leaflet_get_folded"
              glib:get-property="folded">
        <attribute name="org.gtk.Method.get_property" value="folded"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3026">Gets whether @self is folded.

The leaflet will be folded if the size allocated to it is smaller than the
sum of the minimum or natural sizes of the children (see
[property@Leaflet:fold-threshold-policy]), it will be unfolded otherwise.</doc>
        <source-position filename="src/adw-leaflet.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3036">whether @self is folded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3028">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="adw_leaflet_get_homogeneous"
              glib:get-property="homogeneous">
        <attribute name="org.gtk.Method.get_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3092">Gets whether @self is homogeneous.</doc>
        <source-position filename="src/adw-leaflet.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3098">whether @self is homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3094">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_transition_duration"
              c:identifier="adw_leaflet_get_mode_transition_duration"
              glib:get-property="mode-transition-duration">
        <attribute name="org.gtk.Method.get_property"
                   value="mode-transition-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3286">Gets the mode transition animation duration for @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3292">the mode transition duration, in milliseconds.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3288">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="adw_leaflet_get_page">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2966">Returns the [class@LeafletPage] object for @child.</doc>
        <source-position filename="src/adw-leaflet.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2973">the page object for @child</doc>
          <type name="LeafletPage" c:type="AdwLeafletPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2968">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2969">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="adw_leaflet_get_pages"
              glib:get-property="pages">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3591">Returns a [iface@Gio.ListModel] that contains the pages of the leaflet.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <source-position filename="src/adw-leaflet.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3601">a `GtkSelectionModel` for the leaflet's children</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3593">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="adw_leaflet_get_transition_type"
              glib:get-property="transition-type">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3232">Gets the type of animation used for transitions between modes and children.</doc>
        <source-position filename="src/adw-leaflet.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3238">the current transition type of @self</doc>
          <type name="LeafletTransitionType"
                c:type="AdwLeafletTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3234">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="adw_leaflet_get_visible_child"
              glib:get-property="visible-child">
        <attribute name="org.gtk.Method.get_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3136">Gets the widget currently visible when the leaflet is folded.</doc>
        <source-position filename="src/adw-leaflet.h" line="103"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3142">the visible child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3138">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="adw_leaflet_get_visible_child_name"
              glib:get-property="visible-child-name">
        <attribute name="org.gtk.Method.get_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3186">Gets the name of the currently visible child widget.</doc>
        <source-position filename="src/adw-leaflet.h" line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3192">the name of the visible child</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3188">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_child_after"
              c:identifier="adw_leaflet_insert_child_after">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2830">Inserts @child in the position after @sibling in the list of children.

If @sibling is `NULL`, inserts @child at the first position.</doc>
        <source-position filename="src/adw-leaflet.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2840">the [class@LeafletPage] for @child</doc>
          <type name="LeafletPage" c:type="AdwLeafletPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2832">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2833">the widget to insert</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2834">the sibling after which to insert @child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="navigate" c:identifier="adw_leaflet_navigate">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3529">Navigates to the previous or next child.

The child must have the [property@LeafletPage:navigatable] property set to
`TRUE`, otherwise it will be skipped.

This will be the same child as returned by
[method@Leaflet.get_adjacent_child] or navigated to via swipe gestures.</doc>
        <source-position filename="src/adw-leaflet.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="3542">whether the visible child was changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3531">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3532">the direction</doc>
            <type name="NavigationDirection" c:type="AdwNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="adw_leaflet_prepend">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2810">Inserts @child at the first position in @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2817">the [class@LeafletPage] for @child</doc>
          <type name="LeafletPage" c:type="AdwLeafletPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2812">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2813">the widget to prepend</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_leaflet_remove">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2935">Removes a child widget from @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2937">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2938">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child_after"
              c:identifier="adw_leaflet_reorder_child_after">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2867">Moves @child to the position after @sibling in the list of children.

If @sibling is `NULL`, moves @child to the first position.</doc>
        <source-position filename="src/adw-leaflet.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2869">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2870">the widget to move, must be a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2871">the sibling to move @child after</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_navigate_back"
              c:identifier="adw_leaflet_set_can_navigate_back"
              glib:set-property="can-navigate-back">
        <attribute name="org.gtk.Method.set_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3404">Sets whether gestures and shortcuts for navigating backward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE` can
be navigated to.</doc>
        <source-position filename="src/adw-leaflet.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3406">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="can_navigate_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3407">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_navigate_forward"
              c:identifier="adw_leaflet_set_can_navigate_forward"
              glib:set-property="can-navigate-forward">
        <attribute name="org.gtk.Method.set_property"
                   value="can-navigate-forward"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3460">Sets whether gestures and shortcuts for navigating forward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE` can
be navigated to.</doc>
        <source-position filename="src/adw-leaflet.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3462">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="can_navigate_forward" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3463">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_unfold"
              c:identifier="adw_leaflet_set_can_unfold"
              glib:set-property="can-unfold">
        <attribute name="org.gtk.Method.set_property" value="can-unfold"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2985">Sets whether @self can unfold.</doc>
        <source-position filename="src/adw-leaflet.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2987">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="can_unfold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2988">whether @self can unfold</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_transition_params"
              c:identifier="adw_leaflet_set_child_transition_params"
              glib:set-property="child-transition-params">
        <attribute name="org.gtk.Method.set_property"
                   value="child-transition-params"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3343">Sets the child transition spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/adw-leaflet.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3345">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3346">the new parameters</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_threshold_policy"
              c:identifier="adw_leaflet_set_fold_threshold_policy"
              glib:set-property="fold-threshold-policy">
        <attribute name="org.gtk.Method.set_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3061">Sets the fold threshold policy for @self.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only fold when the
children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <source-position filename="src/adw-leaflet.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3063">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3064">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="adw_leaflet_set_homogeneous"
              glib:set-property="homogeneous">
        <attribute name="org.gtk.Method.set_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3108">Sets @self to be homogeneous or not.

If set to `FALSE`, different children can have different size along the
opposite orientation.</doc>
        <source-position filename="src/adw-leaflet.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3110">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3111">whether to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_transition_duration"
              c:identifier="adw_leaflet_set_mode_transition_duration"
              glib:set-property="mode-transition-duration">
        <attribute name="org.gtk.Method.set_property"
                   value="mode-transition-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3302">Sets the mode transition animation duration for @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3304">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3305">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="adw_leaflet_set_transition_type"
              glib:set-property="transition-type">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3248">Sets the type of animation used for transitions between modes and children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about to
become current.</doc>
        <source-position filename="src/adw-leaflet.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3250">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3251">the new transition type</doc>
            <type name="LeafletTransitionType"
                  c:type="AdwLeafletTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="adw_leaflet_set_visible_child"
              glib:set-property="visible-child">
        <attribute name="org.gtk.Method.set_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3155">Sets the widget currently visible when the leaflet is folded.

The transition is determined by [property@Leaflet:transition-type] and
[property@Leaflet:child-transition-params]. The transition can be cancelled
by the user, in which case visible child will change back to the previously
visible child.</doc>
        <source-position filename="src/adw-leaflet.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3157">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="visible_child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3158">the new child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="adw_leaflet_set_visible_child_name"
              glib:set-property="visible-child-name">
        <attribute name="org.gtk.Method.set_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="3205">Makes the child with the name @name visible.

See [property@Leaflet:visible-child].</doc>
        <source-position filename="src/adw-leaflet.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3207">a leaflet</doc>
            <type name="Leaflet" c:type="AdwLeaflet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="3208">the name of a child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-navigate-back"
                writable="1"
                transfer-ownership="none"
                setter="set_can_navigate_back"
                getter="get_can_navigate_back"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_can_navigate_back"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_can_navigate_back"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2312">Whether gestures and shortcuts for navigating backward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE`
can be navigated to.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-navigate-forward"
                writable="1"
                transfer-ownership="none"
                setter="set_can_navigate_forward"
                getter="get_can_navigate_forward"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_can_navigate_forward"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_can_navigate_forward"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2338">Whether gestures and shortcuts for navigating forward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE`
can be navigated to.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-unfold"
                writable="1"
                transfer-ownership="none"
                setter="set_can_unfold"
                getter="get_can_unfold"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_can_unfold"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_can_unfold"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2180">Whether or not the leaflet can unfold.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-transition-params"
                writable="1"
                transfer-ownership="none"
                setter="set_child_transition_params"
                getter="get_child_transition_params">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_child_transition_params"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_child_transition_params"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2286">The child transition spring parameters.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="child-transition-running"
                transfer-ownership="none"
                getter="get_child_transition_running"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_child_transition_running"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2302">Whether a child transition is currently running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fold-threshold-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_threshold_policy"
                getter="get_fold_threshold_policy"
                default-value="ADW_FOLD_THRESHOLD_POLICY_MINIMUM">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_fold_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_fold_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2204">Determines when the leaflet will fold.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only fold when the
children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="folded"
                transfer-ownership="none"
                getter="get_folded"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="adw_leaflet_get_folded"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2190">Whether the leaflet is folded.

The leaflet will be folded if the size allocated to it is smaller than the
sum of the minimum or natural sizes of the children (see
[property@Leaflet:fold-threshold-policy]), it will be unfolded otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="homogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_homogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2222">Whether the leaflet allocates the same size for all children when folded.

If set to `FALSE`, different children can have different size along the
opposite orientation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode-transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_mode_transition_duration"
                getter="get_mode_transition_duration"
                default-value="250">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_mode_transition_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_mode_transition_duration"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2276">The mode transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pages" transfer-ownership="none" getter="get_pages">
        <attribute name="org.gtk.Property.get" value="adw_leaflet_get_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2364">A selection model with the leaflet's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="ADW_LEAFLET_TRANSITION_TYPE_OVER">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2262">The type of animation used for transitions between modes and children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about
to become current.</doc>
        <type name="LeafletTransitionType"/>
      </property>
      <property name="visible-child"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_visible_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_visible_child"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2235">The widget currently visible when the leaflet is folded.

The transition is determined by [property@Leaflet:transition-type] and
[property@Leaflet:child-transition-params]. The transition can be cancelled
by the user, in which case visible child will change back to the previously
visible child.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_get_visible_child_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_set_visible_child_name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2250">The name of the widget currently visible when the leaflet is folded.

See [property@Leaflet:visible-child].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="LeafletClass"
            c:type="AdwLeafletClass"
            glib:is-gtype-struct-for="Leaflet">
      <source-position filename="src/adw-leaflet.h" line="46"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="LeafletPage"
           c:symbol-prefix="leaflet_page"
           c:type="AdwLeafletPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwLeafletPage"
           glib:get-type="adw_leaflet_page_get_type"
           glib:type-struct="LeafletPageClass">
      <doc xml:space="preserve"
           filename="src/adw-leaflet.c"
           line="57">An auxiliary class used by [class@Leaflet].</doc>
      <source-position filename="src/adw-leaflet.h" line="26"/>
      <method name="get_child"
              c:identifier="adw_leaflet_page_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2640">Gets the leaflet child to which @self belongs.</doc>
        <source-position filename="src/adw-leaflet.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2646">the child to which @self belongs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2642">a leaflet page</doc>
            <type name="LeafletPage" c:type="AdwLeafletPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="adw_leaflet_page_get_name"
              glib:get-property="name">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2656">Gets the name of @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2662">the name of @self.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2658">a leaflet page</doc>
            <type name="LeafletPage" c:type="AdwLeafletPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_navigatable"
              c:identifier="adw_leaflet_page_get_navigatable"
              glib:get-property="navigatable">
        <attribute name="org.gtk.Method.get_property" value="navigatable"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2719">Gets whether the child can be navigated to when folded.</doc>
        <source-position filename="src/adw-leaflet.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-leaflet.c"
               line="2725">whether @self can be navigated to when folded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2721">a leaflet page</doc>
            <type name="LeafletPage" c:type="AdwLeafletPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="adw_leaflet_page_set_name"
              glib:set-property="name">
        <attribute name="org.gtk.Method.set_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2672">Sets the name of the @self.</doc>
        <source-position filename="src/adw-leaflet.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2674">a leaflet page</doc>
            <type name="LeafletPage" c:type="AdwLeafletPage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2675">the new value to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_navigatable"
              c:identifier="adw_leaflet_page_set_navigatable"
              glib:set-property="navigatable">
        <attribute name="org.gtk.Method.set_property" value="navigatable"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="2735">Sets whether @self can be navigated to when folded.

If `FALSE`, the child will be ignored by [method@Leaflet.get_adjacent_child],
[method@Leaflet.navigate], and swipe gestures.

This can be used used to prevent switching to widgets like separators.</doc>
        <source-position filename="src/adw-leaflet.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2737">a leaflet page</doc>
            <type name="LeafletPage" c:type="AdwLeafletPage*"/>
          </instance-parameter>
          <parameter name="navigatable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-leaflet.c"
                 line="2738">whether @self can be navigated to when folded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="272">The leaflet child to which the page belongs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_page_get_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_page_set_name"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="282">The name of the child page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="navigatable"
                writable="1"
                transfer-ownership="none"
                setter="set_navigatable"
                getter="get_navigatable"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_leaflet_page_get_navigatable"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_leaflet_page_set_navigatable"/>
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="292">Whether the child can be navigated to when folded.

If `FALSE`, the child will be ignored by
[method@Leaflet.get_adjacent_child], [method@Leaflet.navigate], and swipe
gestures.

This can be used used to prevent switching to widgets like separators.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="LeafletPageClass"
            c:type="AdwLeafletPageClass"
            glib:is-gtype-struct-for="LeafletPage">
      <source-position filename="src/adw-leaflet.h" line="26"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LeafletTransitionType"
                 glib:type-name="AdwLeafletTransitionType"
                 glib:get-type="adw_leaflet_transition_type_get_type"
                 c:type="AdwLeafletTransitionType">
      <doc xml:space="preserve"
           filename="src/adw-leaflet.c"
           line="63">Describes the possible transitions in a [class@Leaflet] widget.

New values may be added to this enumeration over time.</doc>
      <member name="over"
              value="0"
              c:identifier="ADW_LEAFLET_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="ADW_LEAFLET_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="65">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="ADW_LEAFLET_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="ADW_LEAFLET_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="66">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="ADW_LEAFLET_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="ADW_LEAFLET_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/adw-leaflet.c"
             line="67">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
    </enumeration>
    <constant name="MAJOR_VERSION" value="1" c:type="ADW_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/adw-version.h"
           line="17">Adwaita major version component (e.g. 1 if the version is 1.2.3).</doc>
      <source-position filename="src/adw-version.h" line="22"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="ADW_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="src/adw-version.h"
           line="31">Adwaita micro version component (e.g. 3 if the version is 1.2.3).</doc>
      <source-position filename="src/adw-version.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="3" c:type="ADW_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/adw-version.h"
           line="24">Adwaita minor version component (e.g. 2 if the version is 1.2.3).</doc>
      <source-position filename="src/adw-version.h" line="29"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="MessageDialog"
           c:symbol-prefix="message_dialog"
           c:type="AdwMessageDialog"
           version="1.2"
           parent="Gtk.Window"
           glib:type-name="AdwMessageDialog"
           glib:get-type="adw_message_dialog_get_type"
           glib:type-struct="MessageDialogClass">
      <doc xml:space="preserve"
           filename="src/adw-message-dialog.c"
           line="16">A dialog presenting a message or a question.

&lt;picture&gt;
  &lt;source srcset="message-dialog-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="message-dialog.png" alt="message-dialog"&gt;
&lt;/picture&gt;

Message dialogs have a heading, a body, an optional child widget, and one or
multiple responses, each presented as a button.

Each response has a unique string ID, and a button label. Additionally, each
response can be enabled or disabled, and can have a suggested or destructive
appearance.

When one of the responses is activated, or the dialog is closed, the
[signal@MessageDialog::response] signal will be emitted. This signal is
detailed, and the detail, as well as the `response` parameter will be set to
the ID of the activated response, or to the value of the
[property@MessageDialog:close-response] property if the dialog had been
closed without activating any of the responses.

Response buttons can be presented horizontally or vertically depending on
available space.

When a response is activated, `AdwMessageDialog` is closed automatically.

An example of using a message dialog:

```c
GtkWidget *dialog;

dialog = adw_message_dialog_new (parent, _("Replace File?"), NULL);

adw_message_dialog_format_body (ADW_MESSAGE_DIALOG (dialog),
                                _("A file named “%s” already exists. Do you want to replace it?"),
                                filename);

adw_message_dialog_add_responses (ADW_MESSAGE_DIALOG (dialog),
                                  "cancel",  _("_Cancel"),
                                  "replace", _("_Replace"),
                                  NULL);

adw_message_dialog_set_response_appearance (ADW_MESSAGE_DIALOG (dialog), "replace", ADW_RESPONSE_DESTRUCTIVE);

adw_message_dialog_set_default_response (ADW_MESSAGE_DIALOG (dialog), "cancel");
adw_message_dialog_set_close_response (ADW_MESSAGE_DIALOG (dialog), "cancel");

g_signal_connect (dialog, "response", G_CALLBACK (response_cb), self);

gtk_window_present (GTK_WINDOW (dialog));
```

## Async API

`AdwMessageDialog` can also be used via the [method@MessageDialog.choose]
method. This API follows the GIO async pattern, and the result can be
obtained by calling [method@MessageDialog.choose_finish], for example:

```c
static void
dialog_cb (AdwMessageDialog *dialog,
           GAsyncResult     *result,
           MyWindow         *self)
{
  const char *response = adw_message_dialog_choose_finish (dialog, result);

  ...
}

static void
show_dialog (MyWindow *self)
{
  GtkWidget *dialog;

  dialog = adw_message_dialog_new (GTK_WINDOW (self), _("Replace File?"), NULL);

  adw_message_dialog_format_body (ADW_MESSAGE_DIALOG (dialog),
                                  _("A file named “%s” already exists. Do you want to replace it?"),
                                  filename);

  adw_message_dialog_add_responses (ADW_MESSAGE_DIALOG (dialog),
                                    "cancel",  _("_Cancel"),
                                    "replace", _("_Replace"),
                                    NULL);

  adw_message_dialog_set_response_appearance (ADW_MESSAGE_DIALOG (dialog), "replace", ADW_RESPONSE_DESTRUCTIVE);

  adw_message_dialog_set_default_response (ADW_MESSAGE_DIALOG (dialog), "cancel");
  adw_message_dialog_set_close_response (ADW_MESSAGE_DIALOG (dialog), "cancel");

  adw_message_dialog_choose (ADW_MESSAGE_DIALOG (dialog), NULL, (GAsyncReadyCallback) dialog_cb, self);
}
```

## AdwMessageDialog as GtkBuildable

`AdwMessageDialog` supports adding responses in UI definitions by via the
`&lt;responses&gt;` element that may contain multiple `&lt;response&gt;` elements, each
respresenting a response.

Each of the `&lt;response&gt;` elements must have the `id` attribute specifying the
response ID. The contents of the element are used as the response label.

Response labels can be translated with the usual `translatable`, `context`
and `comments` attributes.

The `&lt;response&gt;` elements can also have `enabled` and/or `appearance`
attributes. See [method@MessageDialog.set_response_enabled] and
[method@MessageDialog.set_response_appearance] for details.

Example of an `AdwMessageDialog` UI definition:

```xml
&lt;object class="AdwMessageDialog" id="dialog"&gt;
  &lt;property name="heading" translatable="yes"&gt;Save Changes?&lt;/property&gt;
  &lt;property name="body" translatable="yes"&gt;Open documents contain unsaved changes. Changes which are not saved will be permanently lost.&lt;/property&gt;
  &lt;property name="default-response"&gt;save&lt;/property&gt;
  &lt;property name="close-response"&gt;cancel&lt;/property&gt;
  &lt;signal name="response" handler="response_cb"/&gt;
  &lt;responses&gt;
    &lt;response id="cancel" translatable="yes"&gt;_Cancel&lt;/response&gt;
    &lt;response id="discard" translatable="yes" appearance="destructive"&gt;_Discard&lt;/response&gt;
    &lt;response id="save" translatable="yes" appearance="suggested" enabled="false"&gt;_Save&lt;/response&gt;
  &lt;/responses&gt;
&lt;/object&gt;
```

## Accessibility

`AdwMessageDialog` uses the `GTK_ACCESSIBLE_ROLE_DIALOG` role.</doc>
      <source-position filename="src/adw-message-dialog.h" line="42"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new"
                   c:identifier="adw_message_dialog_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1281">Creates a new `AdwMessageDialog`.

@heading and @body can be set to `NULL`. This can be useful if they need to
be formatted or use markup. In that case, set them to `NULL` and call
[method@MessageDialog.format_body] or similar methods afterwards:

```c
GtkWidget *dialog;

dialog = adw_message_dialog_new (parent, _("Replace File?"), NULL);
adw_message_dialog_format_body (ADW_MESSAGE_DIALOG (dialog),
                                _("A file named “%s” already exists.  Do you want to replace it?"),
                                filename);
```</doc>
        <source-position filename="src/adw-message-dialog.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1302">the newly created `AdwMessageDialog`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1283">transient parent</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="heading"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1284">the heading</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1285">the body text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="response" invoker="response" version="1.2">
        <attribute name="org.gtk.Method.signal" value="response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2255">Emits the [signal@MessageDialog::response] signal with the given response ID.

Used to indicate that the user has responded to the dialog in some way.</doc>
        <source-position filename="src/adw-message-dialog.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2257">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2258">response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_response"
              c:identifier="adw_message_dialog_add_response"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1792">Adds a response with @id and @label to @self.

Responses are represented as buttons in the dialog.

Response ID must be unique. It will be used in
[signal@MessageDialog::response] to tell which response had been activated,
as well as to inspect and modify the response later.

An embedded underline in @label indicates a mnemonic.

[method@MessageDialog.set_response_label] can be used to change the response
label after it had been added.

[method@MessageDialog.set_response_enabled] and
[method@MessageDialog.set_response_appearance] can be used to customize the
responses further.</doc>
        <source-position filename="src/adw-message-dialog.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1794">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1795">the response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1796">the response label</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_responses"
              c:identifier="adw_message_dialog_add_responses"
              version="1.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1860">Adds multiple responses to @self.

This is the same as calling [method@MessageDialog.add_response] repeatedly.
The variable argument list should be `NULL`-terminated list of response IDs
and labels.

Example:

```c
adw_message_dialog_add_responses (dialog,
                                  "cancel",  _("_Cancel"),
                                  "discard", _("_Discard"),
                                  "save",    _("_Save"),
                                  NULL);
```</doc>
        <source-position filename="src/adw-message-dialog.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1862">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="first_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1863">response id</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1864">label for first response, then more id-label pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="choose"
              c:identifier="adw_message_dialog_choose"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2325">This function shows @self to the user.

The @callback will be called when the alert is dismissed. It should call
[method@MessageDialog.choose_finish] to obtain the result.</doc>
        <source-position filename="src/adw-message-dialog.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2327">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2328">a `GCancellable` to cancel the operation</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2329">a callback to call when the operation is complete</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2330">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="choose_finish"
              c:identifier="adw_message_dialog_choose_finish"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2360">Finishes the [method@MessageDialog.choose] call and returns the response ID.</doc>
        <source-position filename="src/adw-message-dialog.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="2367">the ID of the response that was selected, or
  [property@MessageDialog:close-response] if the call was cancelled.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2362">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2363">a `GAsyncResult`</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_body"
              c:identifier="adw_message_dialog_format_body"
              version="1.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1643">Sets the formatted body text of @self.

See [property@MessageDialog:body].</doc>
        <source-position filename="src/adw-message-dialog.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1645">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1646">the formatted string for the body text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1647">the parameters to insert into @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="format_body_markup"
              c:identifier="adw_message_dialog_format_body_markup"
              version="1.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1686">Sets the formatted body text of @self with Pango markup.

The @format is assumed to contain Pango markup.

Special XML characters in the `printf()` arguments passed to this function
will  automatically be escaped as necessary, see
[func@GLib.markup_printf_escaped].

See [property@MessageDialog:body].</doc>
        <source-position filename="src/adw-message-dialog.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1688">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1689">the formatted string for the body text with Pango markup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1690">the parameters to insert into @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="format_heading"
              c:identifier="adw_message_dialog_format_heading"
              version="1.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1442">Sets the formatted heading of @self.

See [property@MessageDialog:heading].</doc>
        <source-position filename="src/adw-message-dialog.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1444">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1445">the formatted string for the heading</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1446">the parameters to insert into @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="format_heading_markup"
              c:identifier="adw_message_dialog_format_heading_markup"
              version="1.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1485">Sets the formatted heading of @self with Pango markup.

The @format is assumed to contain Pango markup.

Special XML characters in the `printf()` arguments passed to this function
will automatically be escaped as necessary, see
[func@GLib.markup_printf_escaped].

See [property@MessageDialog:heading].</doc>
        <source-position filename="src/adw-message-dialog.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1487">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1488">the formatted string for the heading with Pango markup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1489">the parameters to insert into @format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_body"
              c:identifier="adw_message_dialog_get_body"
              glib:get-property="body"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="body"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1534">Gets the body text of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1540">the body of @self.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1536">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_body_use_markup"
              c:identifier="adw_message_dialog_get_body_use_markup"
              glib:get-property="body-use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="body-use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1588">Gets whether the body text of @self includes Pango markup.</doc>
        <source-position filename="src/adw-message-dialog.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1594">whether @self uses markup for body text</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1590">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_close_response"
              c:identifier="adw_message_dialog_get_close_response"
              glib:get-property="close-response"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="close-response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2196">Gets the ID of the close response of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="2202">the close response ID</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2198">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_response"
              c:identifier="adw_message_dialog_get_default_response"
              glib:get-property="default-response"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="default-response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2131">Gets the ID of the default response of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="134"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="2137">the default response ID</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2133">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_child"
              c:identifier="adw_message_dialog_get_extra_child"
              glib:get-property="extra-child"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="extra-child"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1735">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1741">the child widget of @self.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1737">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_heading"
              c:identifier="adw_message_dialog_get_heading"
              glib:get-property="heading"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="heading"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1328">Gets the heading of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1334">the heading of @self.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1330">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_heading_use_markup"
              c:identifier="adw_message_dialog_get_heading_use_markup"
              glib:get-property="heading-use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="heading-use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1384">Gets whether the heading of @self includes Pango markup.</doc>
        <source-position filename="src/adw-message-dialog.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1390">whether @self uses markup for heading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1386">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_response_appearance"
              c:identifier="adw_message_dialog_get_response_appearance"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1976">Gets the appearance of @response.

See [method@MessageDialog.set_response_appearance].</doc>
        <source-position filename="src/adw-message-dialog.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1985">the appearance of @response</doc>
          <type name="ResponseAppearance" c:type="AdwResponseAppearance"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1978">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1979">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_response_enabled"
              c:identifier="adw_message_dialog_get_response_enabled"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2061">Gets whether @response is enabled.

See [method@MessageDialog.set_response_enabled].</doc>
        <source-position filename="src/adw-message-dialog.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="2070">whether @response is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2063">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2064">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_response_label"
              c:identifier="adw_message_dialog_get_response_label"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1915">Gets the label of @response.

See [method@MessageDialog.set_response_label].</doc>
        <source-position filename="src/adw-message-dialog.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="1924">the label of @response</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1917">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1918">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_response"
              c:identifier="adw_message_dialog_has_response"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2277">Gets whether @self has a response with the ID @response.</doc>
        <source-position filename="src/adw-message-dialog.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-message-dialog.c"
               line="2284">whether @self has a response with the ID @response.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2279">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2280">response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="response"
              c:identifier="adw_message_dialog_response"
              version="1.2">
        <attribute name="org.gtk.Method.signal" value="response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2255">Emits the [signal@MessageDialog::response] signal with the given response ID.

Used to indicate that the user has responded to the dialog in some way.</doc>
        <source-position filename="src/adw-message-dialog.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2257">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2258">response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_body"
              c:identifier="adw_message_dialog_set_body"
              glib:set-property="body"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="body"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1556">Sets the body text of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1558">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1559">the body of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_body_use_markup"
              c:identifier="adw_message_dialog_set_body_use_markup"
              glib:set-property="body-use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="body-use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1610">Sets whether the body text of @self includes Pango markup.

See [func@Pango.parse_markup].</doc>
        <source-position filename="src/adw-message-dialog.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1612">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1613">whether to use markup for body text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_close_response"
              c:identifier="adw_message_dialog_set_close_response"
              glib:set-property="close-response"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="close-response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2218">Sets the ID of the close response of @self.

It will be passed to [signal@MessageDialog::response] if the window is
closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt; or with a system action.

It doesn't have to correspond to any of the responses in the dialog.

The default close response is `close`.</doc>
        <source-position filename="src/adw-message-dialog.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2220">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2221">the close response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_response"
              c:identifier="adw_message_dialog_set_default_response"
              glib:set-property="default-response"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="default-response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2156">Sets the ID of the default response of @self.

If set, pressing &lt;kbd&gt;Enter&lt;/kbd&gt; will activate the corresponding button.

If set to `NULL` or to a non-existent response ID, pressing &lt;kbd&gt;Enter&lt;/kbd&gt;
will do nothing.</doc>
        <source-position filename="src/adw-message-dialog.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2158">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2159">the default response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extra_child"
              c:identifier="adw_message_dialog_set_extra_child"
              glib:set-property="extra-child"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="extra-child"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1757">Sets the child widget of @self.

The child widget is displayed below the heading and body.</doc>
        <source-position filename="src/adw-message-dialog.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1759">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1760">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_heading"
              c:identifier="adw_message_dialog_set_heading"
              glib:set-property="heading"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="heading"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1350">Sets the heading of @self.</doc>
        <source-position filename="src/adw-message-dialog.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1352">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="heading"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1353">the heading of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_heading_use_markup"
              c:identifier="adw_message_dialog_set_heading_use_markup"
              glib:set-property="heading-use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="heading-use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1406">Sets whether the heading of @self includes Pango markup.

See [func@Pango.parse_markup].</doc>
        <source-position filename="src/adw-message-dialog.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1408">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1409">whether to use markup for heading</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_appearance"
              c:identifier="adw_message_dialog_set_response_appearance"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2004">Sets the appearance for @response.

&lt;picture&gt;
  &lt;source srcset="message-dialog-appearance-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="message-dialog-appearance.png" alt="message-dialog-appearance"&gt;
&lt;/picture&gt;

Use `ADW_RESPONSE_SUGGESTED` to mark important responses such as the
affirmative action, like the Save button in the example.

Use `ADW_RESPONSE_DESTRUCTIVE` to draw attention to the potentially damaging
consequences of using @response. This appearance acts as a warning to the
user. The Discard button in the example is using this appearance.

The default appearance is `ADW_RESPONSE_DEFAULT`.

Negative responses like Cancel or Close should use the default appearance.</doc>
        <source-position filename="src/adw-message-dialog.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2006">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2007">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="appearance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2008">appearance for @response</doc>
            <type name="ResponseAppearance" c:type="AdwResponseAppearance"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_enabled"
              c:identifier="adw_message_dialog_set_response_enabled"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="2089">Sets whether @response is enabled.

If @response is not enabled, the corresponding button will have
[property@Gtk.Widget:sensitive] set to `FALSE` and it can't be activated as
a default response.

@response can still be used as [property@MessageDialog:close-response] while
it's not enabled.

Responses are enabled by default.</doc>
        <source-position filename="src/adw-message-dialog.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2091">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2092">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="2093">whether to enable @response</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_label"
              c:identifier="adw_message_dialog_set_response_label"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="1943">Sets the label of @response to @label.

Labels are displayed on the dialog buttons. An embedded underline in @label
indicates a mnemonic.</doc>
        <source-position filename="src/adw-message-dialog.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1945">a message dialog</doc>
            <type name="MessageDialog" c:type="AdwMessageDialog*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1946">a response ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="1947">the label of @response</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="body"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_body"
                getter="get_body">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_body"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_body"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="899">The body text of the dialog.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="body-use-markup"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_body_use_markup"
                getter="get_body_use_markup"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_body_use_markup"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_body_use_markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="911">Whether the body text includes Pango markup.

See [func@Pango.parse_markup].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="close-response"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_close_response"
                getter="get_close_response"
                default-value="close">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_close_response"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_close_response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="956">The ID of the close response.

It will be passed to [signal@MessageDialog::response] if the window is
closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt; or with a system action.

It doesn't have to correspond to any of the responses in the dialog.

The default close response is `close`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default-response"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_default_response"
                getter="get_default_response"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_default_response"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_default_response"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="939">The response ID of the default response.

If set, pressing &lt;kbd&gt;Enter&lt;/kbd&gt; will activate the corresponding button.

If set to `NULL` or a non-existent response ID, pressing &lt;kbd&gt;Enter&lt;/kbd&gt;
will do nothing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="extra-child"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_extra_child"
                getter="get_extra_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_extra_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_extra_child"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="925">The child widget.

Displayed below the heading and body.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="heading"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_heading"
                getter="get_heading">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_heading"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_heading"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="873">The heading of the dialog.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="heading-use-markup"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_heading_use_markup"
                getter="get_heading_use_markup"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_message_dialog_get_heading_use_markup"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_message_dialog_set_heading_use_markup"/>
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="885">Whether the heading includes Pango markup.

See [func@Pango.parse_markup].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <glib:signal name="response" when="last" detailed="1" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="977">This signal is emitted when the dialog is closed.

@response will be set to the response ID of the button that had been
activated.

if the dialog was closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt; or with a system
action, @response will be set to the value of
[property@MessageDialog:close-response].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-message-dialog.c"
                 line="980">the response ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MessageDialogClass"
            c:type="AdwMessageDialogClass"
            glib:is-gtype-struct-for="MessageDialog">
      <source-position filename="src/adw-message-dialog.h" line="42"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="response">
        <callback name="response">
          <source-position filename="src/adw-message-dialog.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-message-dialog.c"
                   line="2257">a message dialog</doc>
              <type name="MessageDialog" c:type="AdwMessageDialog*"/>
            </parameter>
            <parameter name="response" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-message-dialog.c"
                   line="2258">response ID</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="NavigationDirection"
                 glib:type-name="AdwNavigationDirection"
                 glib:get-type="adw_navigation_direction_get_type"
                 c:type="AdwNavigationDirection">
      <doc xml:space="preserve"
           filename="src/adw-navigation-direction.c"
           line="10">Describes the direction of a swipe navigation gesture.</doc>
      <member name="back"
              value="0"
              c:identifier="ADW_NAVIGATION_DIRECTION_BACK"
              glib:nick="back"
              glib:name="ADW_NAVIGATION_DIRECTION_BACK">
        <doc xml:space="preserve"
             filename="src/adw-navigation-direction.c"
             line="12">Corresponds to start or top, depending on orientation and text direction</doc>
      </member>
      <member name="forward"
              value="1"
              c:identifier="ADW_NAVIGATION_DIRECTION_FORWARD"
              glib:nick="forward"
              glib:name="ADW_NAVIGATION_DIRECTION_FORWARD">
        <doc xml:space="preserve"
             filename="src/adw-navigation-direction.c"
             line="13">Corresponds to end or bottom, depending on orientation and text direction</doc>
      </member>
    </enumeration>
    <class name="PasswordEntryRow"
           c:symbol-prefix="password_entry_row"
           c:type="AdwPasswordEntryRow"
           version="1.2"
           parent="EntryRow"
           final="1"
           glib:type-name="AdwPasswordEntryRow"
           glib:get-type="adw_password_entry_row_get_type"
           glib:type-struct="PasswordEntryRowClass">
      <doc xml:space="preserve"
           filename="src/adw-password-entry-row.c"
           line="15">A [class@EntryRow] tailored for entering secrets.

&lt;picture&gt;
  &lt;source srcset="password-entry-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="password-entry-row.png" alt="password-entry-row"&gt;
&lt;/picture&gt;

It does not show its contents in clear text, does not allow to copy it to the
clipboard, and shows a warning when Caps Lock is engaged. If the underlying
platform allows it, `AdwPasswordEntryRow` will also place the text in a
non-pageable memory area, to avoid it being written out to disk by the
operating system.

It offer a way to reveal the contents in clear text.

## CSS Nodes

`AdwPasswordEntryRow` has a single CSS node with name `row` that carries
`.entry` and `.password` style classes.</doc>
      <source-position filename="src/adw-password-entry-row.h" line="24"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new"
                   c:identifier="adw_password_entry_row_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-password-entry-row.c"
             line="189">Creates a new `AdwPasswordEntryRow`.</doc>
        <source-position filename="src/adw-password-entry-row.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-password-entry-row.c"
               line="194">the newly created `AdwPasswordEntryRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PasswordEntryRowClass"
            c:type="AdwPasswordEntryRowClass"
            glib:is-gtype-struct-for="PasswordEntryRow">
      <source-position filename="src/adw-password-entry-row.h" line="24"/>
      <field name="parent_class">
        <type name="EntryRowClass" c:type="AdwEntryRowClass"/>
      </field>
    </record>
    <class name="PreferencesGroup"
           c:symbol-prefix="preferences_group"
           c:type="AdwPreferencesGroup"
           parent="Gtk.Widget"
           glib:type-name="AdwPreferencesGroup"
           glib:get-type="adw_preferences_group_get_type"
           glib:type-struct="PreferencesGroupClass">
      <doc xml:space="preserve"
           filename="src/adw-preferences-group.c"
           line="15">A group of preference rows.

&lt;picture&gt;
  &lt;source srcset="preferences-group-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="preferences-group.png" alt="preferences-group"&gt;
&lt;/picture&gt;

An `AdwPreferencesGroup` represents a group or tightly related preferences,
which in turn are represented by [class@PreferencesRow].

To summarize the role of the preferences it gathers, a group can have both a
title and a description. The title will be used by [class@PreferencesWindow]
to let the user look for a preference.

## AdwPreferencesGroup as GtkBuildable

The `AdwPreferencesGroup` implementation of the [iface@Gtk.Buildable] interface
supports adding [class@PreferencesRow]s to the list by omitting "type". If "type"
is omitted and the widget isn't a [class@PreferencesRow] the child is added to
a box below the list.

When the "type" attribute of a child is `header-suffix`, the child
is set as the suffix on the end of the title and description.

## CSS nodes

`AdwPreferencesGroup` has a single CSS node with name `preferencesgroup`.

## Accessibility

`AdwPreferencesGroup` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.</doc>
      <source-position filename="src/adw-preferences-group.h" line="34"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_preferences_group_new">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="349">Creates a new `AdwPreferencesGroup`.</doc>
        <source-position filename="src/adw-preferences-group.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-group.c"
               line="354">the newly created `AdwPreferencesGroup`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="adw_preferences_group_add">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="362">Adds a child to @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="364">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="365">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="adw_preferences_group_get_description"
              glib:get-property="description">
        <attribute name="org.gtk.Method.get_property" value="description"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="462">Gets the description of @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-group.c"
               line="468">the description of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="464">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header_suffix"
              c:identifier="adw_preferences_group_get_header_suffix"
              glib:get-property="header-suffix"
              version="1.1">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="509">Gets the suffix for @self's header.</doc>
        <source-position filename="src/adw-preferences-group.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-group.c"
               line="515">the suffix for @self's header.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="511">a `AdwPreferencesGroup`</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_preferences_group_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="415">Gets the title of @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-group.c"
               line="421">the title of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="417">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_preferences_group_remove">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="386">Removes a child from @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="388">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="389">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="adw_preferences_group_set_description"
              glib:set-property="description">
        <attribute name="org.gtk.Method.set_property" value="description"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="482">Sets the description for @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="484">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="485">the description</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_header_suffix"
              c:identifier="adw_preferences_group_set_header_suffix"
              glib:set-property="header-suffix"
              version="1.1">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="531">Sets the suffix for @self's header.

Displayed above the list, next to the title and description.

Suffixes are commonly used to show a button or a spinner for the whole group.</doc>
        <source-position filename="src/adw-preferences-group.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="533">a `AdwPreferencesGroup`</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="suffix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="534">the suffix to set</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_preferences_group_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="435">Sets the title for @self.</doc>
        <source-position filename="src/adw-preferences-group.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="437">a preferences group</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-group.c"
                 line="438">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_group_get_description"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_group_set_description"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="262">The description for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="header-suffix"
                version="1.1"
                writable="1"
                transfer-ownership="none"
                setter="set_header_suffix"
                getter="get_header_suffix">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_group_get_header_suffix"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_group_set_header_suffix"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="272">The header suffix widget.

Displayed above the list, next to the title and description.

Suffixes are commonly used to show a button or a spinner for the whole
group.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_group_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_group_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.c"
             line="252">The title for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="PreferencesGroupClass"
            c:type="AdwPreferencesGroupClass"
            glib:is-gtype-struct-for="PreferencesGroup">
      <source-position filename="src/adw-preferences-group.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-preferences-group.h"
             line="26">The parent class</doc>
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesPage"
           c:symbol-prefix="preferences_page"
           c:type="AdwPreferencesPage"
           parent="Gtk.Widget"
           glib:type-name="AdwPreferencesPage"
           glib:get-type="adw_preferences_page_get_type"
           glib:type-struct="PreferencesPageClass">
      <doc xml:space="preserve"
           filename="src/adw-preferences-page.c"
           line="15">A page from [class@PreferencesWindow].

&lt;picture&gt;
  &lt;source srcset="preferences-page-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="preferences-page.png" alt="preferences-page"&gt;
&lt;/picture&gt;

The `AdwPreferencesPage` widget gathers preferences groups into a single page
of a preferences window.

## CSS nodes

`AdwPreferencesPage` has a single CSS node with name `preferencespage`.

## Accessibility

`AdwPreferencesPage` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.</doc>
      <source-position filename="src/adw-preferences-page.h" line="35"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_preferences_page_new">
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="242">Creates a new `AdwPreferencesPage`.</doc>
        <source-position filename="src/adw-preferences-page.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-page.c"
               line="247">the newly created `AdwPreferencesPage`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="adw_preferences_page_add">
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="255">Adds a preferences group to @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="257">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="258">the group to add</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_preferences_page_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="300">Gets the icon name for @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-page.c"
               line="306">the icon name for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="302">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="adw_preferences_page_get_name"
              glib:get-property="name">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="392">Gets the name of @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-page.c"
               line="398">the name of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="394">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_preferences_page_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="346">Gets the title of @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-page.c"
               line="352">the title of @self.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="348">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="adw_preferences_page_get_use_underline"
              glib:get-property="use-underline">
        <attribute name="org.gtk.Method.get_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="438">Gets whether an embedded underline in the title indicates a mnemonic.</doc>
        <source-position filename="src/adw-preferences-page.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-page.c"
               line="444">whether an embedded underline in the title indicates a mnemonic</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="440">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_preferences_page_remove">
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="276">Removes a group from @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="278">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="279">the group to remove</doc>
            <type name="PreferencesGroup" c:type="AdwPreferencesGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_top"
              c:identifier="adw_preferences_page_scroll_to_top"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="518">Scrolls the scrolled window of @self to the top.</doc>
        <source-position filename="src/adw-preferences-page.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="520">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_preferences_page_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="320">Sets the icon name for @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="322">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="323">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="adw_preferences_page_set_name"
              glib:set-property="name">
        <attribute name="org.gtk.Method.set_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="412">Sets the name of @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="414">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="415">the name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_preferences_page_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="366">Sets the title of @self.</doc>
        <source-position filename="src/adw-preferences-page.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="368">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="369">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="adw_preferences_page_set_use_underline"
              glib:set-property="use-underline">
        <attribute name="org.gtk.Method.set_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="458">Sets whether an embedded underline in the title indicates a mnemonic.</doc>
        <source-position filename="src/adw-preferences-page.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="460">a preferences page</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-page.c"
                 line="461">`TRUE` if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_page_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_page_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="159">The icon name for this page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_page_get_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_page_set_name"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="179">The name of this page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_page_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_page_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="169">The title for this page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_page_get_use_underline"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_page_set_use_underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.c"
             line="189">Whether an embedded underline in the title indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="PreferencesPageClass"
            c:type="AdwPreferencesPageClass"
            glib:is-gtype-struct-for="PreferencesPage">
      <source-position filename="src/adw-preferences-page.h" line="35"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-preferences-page.h"
             line="27">The parent class</doc>
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesRow"
           c:symbol-prefix="preferences_row"
           c:type="AdwPreferencesRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="AdwPreferencesRow"
           glib:get-type="adw_preferences_row_get_type"
           glib:type-struct="PreferencesRowClass">
      <doc xml:space="preserve"
           filename="src/adw-preferences-row.c"
           line="11">A [class@Gtk.ListBoxRow] used to present preferences.

The `AdwPreferencesRow` widget has a title that [class@PreferencesWindow]
will use to let the user look for a preference. It doesn't present the title
in any way and lets you present the preference as you please.

[class@ActionRow] and its derivatives are convenient to use as preference
rows as they take care of presenting the preference's title while letting you
compose the inputs of the preference around it.</doc>
      <source-position filename="src/adw-preferences-row.h" line="34"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_preferences_row_new">
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="182">Creates a new `AdwPreferencesRow`.</doc>
        <source-position filename="src/adw-preferences-row.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-row.c"
               line="187">the newly created `AdwPreferencesRow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="adw_preferences_row_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="195">Gets the title of the preference represented by @self.</doc>
        <source-position filename="src/adw-preferences-row.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-row.c"
               line="201">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="197">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_selectable"
              c:identifier="adw_preferences_row_get_title_selectable"
              glib:get-property="title-selectable"
              version="1.1">
        <attribute name="org.gtk.Method.get_property"
                   value="title-selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="291">Gets whether the user can copy the title from the label</doc>
        <source-position filename="src/adw-preferences-row.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-row.c"
               line="297">whether the user can copy the title from the label</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="293">a `AdwPreferencesRow`</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="adw_preferences_row_get_use_markup"
              glib:get-property="use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="340">Gets whether to use Pango markup for the title label.</doc>
        <source-position filename="src/adw-preferences-row.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-row.c"
               line="346">whether to use markup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="342">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="adw_preferences_row_get_use_underline"
              glib:get-property="use-underline">
        <attribute name="org.gtk.Method.get_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="244">Gets whether an embedded underline in the title indicates a mnemonic.</doc>
        <source-position filename="src/adw-preferences-row.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-row.c"
               line="250">whether an embedded underline in the title indicates a mnemonic</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="246">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_preferences_row_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="215">Sets the title of the preference represented by @self.

The title is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <source-position filename="src/adw-preferences-row.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="217">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="218">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title_selectable"
              c:identifier="adw_preferences_row_set_title_selectable"
              glib:set-property="title-selectable"
              version="1.1">
        <attribute name="org.gtk.Method.set_property"
                   value="title-selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="311">Sets whether the user can copy the title from the label

See also [property@Gtk.Label:selectable].</doc>
        <source-position filename="src/adw-preferences-row.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="313">a `AdwPreferencesRow`</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
          <parameter name="title_selectable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="314">`TRUE` if the user can copy the title from the label</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="adw_preferences_row_set_use_markup"
              glib:set-property="use-markup"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="use-markup"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="362">Sets whether to use Pango markup for the title label.

Subclasses may also use it for other labels, such as subtitle.

See also [func@Pango.parse_markup].</doc>
        <source-position filename="src/adw-preferences-row.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="364">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="365">whether to use markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="adw_preferences_row_set_use_underline"
              glib:set-property="use-underline">
        <attribute name="org.gtk.Method.set_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="264">Sets whether an embedded underline in the title indicates a mnemonic.</doc>
        <source-position filename="src/adw-preferences-row.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="266">a preferences row</doc>
            <type name="PreferencesRow" c:type="AdwPreferencesRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-row.c"
                 line="267">`TRUE` if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_row_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_row_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="118">The title of the preference represented by this row.

The title is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title-selectable"
                version="1.1"
                writable="1"
                transfer-ownership="none"
                setter="set_title_selectable"
                getter="get_title_selectable"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_row_get_title_selectable"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_row_set_title_selectable"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="141">Whether the user can copy the title from the label.

See also [property@Gtk.Label:selectable].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-markup"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_row_get_use_markup"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_row_set_use_markup"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="155">Whether to use Pango markup for the title label.

Subclasses may also use it for other labels, such as subtitle.

See also [func@Pango.parse_markup].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_row_get_use_underline"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_row_set_use_underline"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.c"
             line="131">Whether an embedded underline in the title indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
      </field>
    </class>
    <record name="PreferencesRowClass"
            c:type="AdwPreferencesRowClass"
            glib:is-gtype-struct-for="PreferencesRow">
      <source-position filename="src/adw-preferences-row.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-preferences-row.h"
             line="26">The parent class</doc>
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesWindow"
           c:symbol-prefix="preferences_window"
           c:type="AdwPreferencesWindow"
           parent="Window"
           glib:type-name="AdwPreferencesWindow"
           glib:get-type="adw_preferences_window_get_type"
           glib:type-struct="PreferencesWindowClass">
      <doc xml:space="preserve"
           filename="src/adw-preferences-window.c"
           line="23">A window to present an application's preferences.

&lt;picture&gt;
  &lt;source srcset="preferences-window-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="preferences-window.png" alt="preferences-window"&gt;
&lt;/picture&gt;

The `AdwPreferencesWindow` widget presents an application's preferences
gathered into pages and groups. The preferences are searchable by the user.

## CSS nodes

`AdwPreferencesWindow` has a main CSS node with the name `window` and the
style class `.preferences`.</doc>
      <source-position filename="src/adw-preferences-window.h" line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="adw_preferences_window_new">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="696">Creates a new `AdwPreferencesWindow`.</doc>
        <source-position filename="src/adw-preferences-window.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-window.c"
               line="701">the newly created `AdwPreferencesWindow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="adw_preferences_window_add">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="709">Adds a preferences page to @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="711">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="712">the page to add</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_toast" c:identifier="adw_preferences_window_add_toast">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="1013">Displays @toast.

See [method@ToastOverlay.add_toast].</doc>
        <source-position filename="src/adw-preferences-window.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="1015">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="toast" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="1016">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_subpage"
              c:identifier="adw_preferences_window_close_subpage">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="990">Closes the current subpage.

If there is no presented subpage, this does nothing.</doc>
        <source-position filename="src/adw-preferences-window.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="992">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_navigate_back"
              c:identifier="adw_preferences_window_get_can_navigate_back"
              glib:get-property="can-navigate-back">
        <attribute name="org.gtk.Method.get_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="935">Gets whether gestures and shortcuts for closing subpages are enabled.</doc>
        <source-position filename="src/adw-preferences-window.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-window.c"
               line="941">whether gestures and shortcuts are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="937">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_enabled"
              c:identifier="adw_preferences_window_get_search_enabled"
              glib:get-property="search-enabled">
        <attribute name="org.gtk.Method.get_property" value="search-enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="843">Gets whether search is enabled for @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-preferences-window.c"
               line="849">whether search is enabled for @self.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="845">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_page"
              c:identifier="adw_preferences_window_get_visible_page"
              glib:get-property="visible-page">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="760">Gets the currently visible page of @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-window.c"
               line="766">the visible page</doc>
          <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="762">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_page_name"
              c:identifier="adw_preferences_window_get_visible_page_name"
              glib:get-property="visible-page-name">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="801">Gets the name of currently visible page of @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-preferences-window.c"
               line="807">the name of the visible page</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="803">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present_subpage"
              c:identifier="adw_preferences_window_present_subpage">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="955">Sets @subpage as the window's subpage and opens it.

The transition can be cancelled by the user, in which case visible child will
change back to the previously visible child.</doc>
        <source-position filename="src/adw-preferences-window.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="957">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="subpage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="958">the subpage</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_preferences_window_remove">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="736">Removes a page from @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="738">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="739">the page to remove</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_navigate_back"
              c:identifier="adw_preferences_window_set_can_navigate_back"
              glib:set-property="can-navigate-back">
        <attribute name="org.gtk.Method.set_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="897">Sets whether gestures and shortcuts for closing subpages are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back mouse button

The keyboard back key is also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut.

For right-to-left locales, gestures and shortcuts are reversed.</doc>
        <source-position filename="src/adw-preferences-window.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="899">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="can_navigate_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="900">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_enabled"
              c:identifier="adw_preferences_window_set_search_enabled"
              glib:set-property="search-enabled">
        <attribute name="org.gtk.Method.set_property" value="search-enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="863">Sets whether search is enabled for @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="865">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="search_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="866">whether search is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_page"
              c:identifier="adw_preferences_window_set_visible_page"
              glib:set-property="visible-page">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="780">Makes @page the visible page of @self.</doc>
        <source-position filename="src/adw-preferences-window.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="782">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="783">a page of @self</doc>
            <type name="PreferencesPage" c:type="AdwPreferencesPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_page_name"
              c:identifier="adw_preferences_window_set_visible_page_name"
              glib:set-property="visible-page-name">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="821">Makes the page with the given name visible.

See [property@ViewStack:visible-child].</doc>
        <source-position filename="src/adw-preferences-window.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="823">a preferences window</doc>
            <type name="PreferencesWindow" c:type="AdwPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-preferences-window.c"
                 line="824">the name of the page to make visible</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-navigate-back"
                writable="1"
                transfer-ownership="none"
                setter="set_can_navigate_back"
                getter="get_can_navigate_back"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_window_get_can_navigate_back"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_window_set_can_navigate_back"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="585">Whether gestures and shortcuts for closing subpages are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back mouse button

The keyboard back key is also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut.

For right-to-left locales, gestures and shortcuts are reversed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="search-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_search_enabled"
                getter="get_search_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_preferences_window_get_search_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_preferences_window_set_search_enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.c"
             line="575">Whether search is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-page"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_page"
                getter="get_visible_page">
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-page-name"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_page_name"
                getter="get_visible_page_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Window" c:type="AdwWindow"/>
      </field>
    </class>
    <record name="PreferencesWindowClass"
            c:type="AdwPreferencesWindowClass"
            glib:is-gtype-struct-for="PreferencesWindow">
      <source-position filename="src/adw-preferences-window.h" line="37"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/adw-preferences-window.h"
             line="29">The parent class</doc>
        <type name="WindowClass" c:type="AdwWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PropertyAnimationTarget"
           c:symbol-prefix="property_animation_target"
           c:type="AdwPropertyAnimationTarget"
           version="1.2"
           parent="AnimationTarget"
           final="1"
           glib:type-name="AdwPropertyAnimationTarget"
           glib:get-type="adw_property_animation_target_get_type"
           glib:type-struct="PropertyAnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/adw-animation-target.c"
           line="24">An [class@AnimationTarget] changing the value of a property of a
[class@GObject.Object] instance.</doc>
      <source-position filename="src/adw-animation-target.h" line="48"/>
      <constructor name="new"
                   c:identifier="adw_property_animation_target_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="349">Creates a new `AdwPropertyAnimationTarget` for the @property_name property on
@object.</doc>
        <source-position filename="src/adw-animation-target.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.c"
               line="357">the newly created `AdwPropertyAnimationTarget`</doc>
          <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="351">an object to be animated</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="352">the name of the property on @object to animate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_pspec"
                   c:identifier="adw_property_animation_target_new_for_pspec"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="379">Creates a new `AdwPropertyAnimationTarget` for the @pspec property on
@object.</doc>
        <source-position filename="src/adw-animation-target.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.c"
               line="387">new newly created `AdwPropertyAnimationTarget`</doc>
          <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="381">an object to be animated</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="382">the param spec of the property on @object to animate</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_object"
              c:identifier="adw_property_animation_target_get_object"
              glib:get-property="object"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="object"/>
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="404">Gets the object animated by @self.

The `AdwPropertyAnimationTarget` instance does not hold a strong reference on
the object; make sure the object is kept alive throughout the target's
lifetime.</doc>
        <source-position filename="src/adw-animation-target.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.c"
               line="414">the animated object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="406">a property animation target</doc>
            <type name="PropertyAnimationTarget"
                  c:type="AdwPropertyAnimationTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pspec"
              c:identifier="adw_property_animation_target_get_pspec"
              glib:get-property="pspec"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="pspec"/>
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="426">Gets the `GParamSpec` of the property animated by @self.</doc>
        <source-position filename="src/adw-animation-target.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-target.c"
               line="432">the animated property's `GParamSpec`</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-animation-target.c"
                 line="428">a property animation target</doc>
            <type name="PropertyAnimationTarget"
                  c:type="AdwPropertyAnimationTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="object"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_object">
        <attribute name="org.gtk.Property.get"
                   value="adw_property_animation_target_get_object"/>
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="311">The object whose property will be animated.

The `AdwPropertyAnimationTarget` instance does not hold a strong reference
on the object; make sure the object is kept alive throughout the target's
lifetime.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="pspec"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_pspec">
        <attribute name="org.gtk.Property.get"
                   value="adw_property_animation_target_get_pspec"/>
        <doc xml:space="preserve"
             filename="src/adw-animation-target.c"
             line="327">The `GParamSpec` of the property to be animated.</doc>
        <type name="GObject.ParamSpec"/>
      </property>
    </class>
    <record name="PropertyAnimationTargetClass"
            c:type="AdwPropertyAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="PropertyAnimationTarget">
      <source-position filename="src/adw-animation-target.h" line="48"/>
    </record>
    <enumeration name="ResponseAppearance"
                 version="1.2"
                 glib:type-name="AdwResponseAppearance"
                 glib:get-type="adw_response_appearance_get_type"
                 c:type="AdwResponseAppearance">
      <doc xml:space="preserve"
           filename="src/adw-message-dialog.c"
           line="153">Describes the possible styles of [class@MessageDialog] response buttons.

See [method@MessageDialog.set_response_appearance].</doc>
      <member name="default"
              value="0"
              c:identifier="ADW_RESPONSE_DEFAULT"
              glib:nick="default"
              glib:name="ADW_RESPONSE_DEFAULT">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="155">the default appearance.</doc>
      </member>
      <member name="suggested"
              value="1"
              c:identifier="ADW_RESPONSE_SUGGESTED"
              glib:nick="suggested"
              glib:name="ADW_RESPONSE_SUGGESTED">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="156">used to denote important responses such as the
    affirmative action.</doc>
      </member>
      <member name="destructive"
              value="2"
              c:identifier="ADW_RESPONSE_DESTRUCTIVE"
              glib:nick="destructive"
              glib:name="ADW_RESPONSE_DESTRUCTIVE">
        <doc xml:space="preserve"
             filename="src/adw-message-dialog.c"
             line="158">used to draw attention to the potentially damaging
    consequences of using the response. This appearance acts as a warning to
    the user.</doc>
      </member>
    </enumeration>
    <class name="SplitButton"
           c:symbol-prefix="split_button"
           c:type="AdwSplitButton"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwSplitButton"
           glib:get-type="adw_split_button_get_type"
           glib:type-struct="SplitButtonClass">
      <doc xml:space="preserve"
           filename="src/adw-split-button.c"
           line="13">A combined button and dropdown widget.

&lt;picture&gt;
  &lt;source srcset="split-button-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="split-button.png" alt="split-button"&gt;
&lt;/picture&gt;

`AdwSplitButton` is typically used to present a set of actions in a menu,
but allow access to one of them with a single click.

The API is very similar to [class@Gtk.Button] and [class@Gtk.MenuButton], see
their documentation for details.

## CSS nodes

```
splitbutton[.image-button][.text-button]
├── button
│   ╰── &lt;content&gt;
├── separator
╰── menubutton
    ╰── button.toggle
        ╰── arrow
```

`AdwSplitButton`'s CSS node is called `splitbutton`. It contains the css
nodes: `button`, `separator`, `menubutton`. See [class@Gtk.MenuButton]
documentation for the `menubutton` contents.

The main CSS node will contain the `.image-button` or `.text-button` style
classes matching the button contents. The nested button nodes will never
contain them.

## Accessibility

`AdwSplitButton` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.</doc>
      <source-position filename="src/adw-split-button.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_split_button_new">
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="566">Creates a new `AdwSplitButton`.</doc>
        <source-position filename="src/adw-split-button.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="571">the newly created `AdwSplitButton`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_split_button_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="717">Gets the child widget.</doc>
        <source-position filename="src/adw-split-button.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="723">the child widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="719">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction"
              c:identifier="adw_split_button_get_direction"
              glib:get-property="direction">
        <attribute name="org.gtk.Method.get_property" value="direction"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="850">Gets the direction in which the popup will be popped up.</doc>
        <source-position filename="src/adw-split-button.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="856">the direction</doc>
          <type name="Gtk.ArrowType" c:type="GtkArrowType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="852">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dropdown_tooltip"
              c:identifier="adw_split_button_get_dropdown_tooltip"
              glib:get-property="dropdown-tooltip"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="dropdown-tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="894">Gets the tooltip of the dropdown button of @self.</doc>
        <source-position filename="src/adw-split-button.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="900">the dropdown tooltip of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="896">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_split_button_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="667">Gets the name of the icon used to automatically populate the button.</doc>
        <source-position filename="src/adw-split-button.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="673">the icon name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="669">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="adw_split_button_get_label"
              glib:get-property="label">
        <attribute name="org.gtk.Method.get_property" value="label"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="579">Gets the label for @self.</doc>
        <source-position filename="src/adw-split-button.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="585">the label for @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="581">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="adw_split_button_get_menu_model"
              glib:get-property="menu-model">
        <attribute name="org.gtk.Method.get_property" value="menu-model"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="766">Gets the menu model from which the popup will be created.</doc>
        <source-position filename="src/adw-split-button.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="772">the menu model</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="768">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_popover"
              c:identifier="adw_split_button_get_popover"
              glib:get-property="popover">
        <attribute name="org.gtk.Method.get_property" value="popover"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="810">Gets the popover that will be popped up when the dropdown is clicked.</doc>
        <source-position filename="src/adw-split-button.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="816">the popover</doc>
          <type name="Gtk.Popover" c:type="GtkPopover*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="812">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="adw_split_button_get_use_underline"
              glib:get-property="use-underline">
        <attribute name="org.gtk.Method.get_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="628">Gets whether an underline in the text indicates a mnemonic.</doc>
        <source-position filename="src/adw-split-button.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-split-button.c"
               line="634">whether an underline in the text indicates a mnemonic</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="630">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popdown" c:identifier="adw_split_button_popdown">
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="956">Dismisses the menu.</doc>
        <source-position filename="src/adw-split-button.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="958">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popup" c:identifier="adw_split_button_popup">
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="942">Pops up the menu.</doc>
        <source-position filename="src/adw-split-button.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="944">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_split_button_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="733">Sets the child widget.

Setting the child widget will set [property@SplitButton:label] and
[property@SplitButton:icon-name] to `NULL`.</doc>
        <source-position filename="src/adw-split-button.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="735">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="736">the new child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direction"
              c:identifier="adw_split_button_set_direction"
              glib:set-property="direction">
        <attribute name="org.gtk.Method.set_property" value="direction"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="866">Sets the direction in which the popup will be popped up.

The dropdown arrow icon will point at the same direction.

If the does not fit in the available space in the given direction, GTK will
try its best to keep it inside the screen and fully visible.

If you pass `GTK_ARROW_NONE`, it's equivalent to `GTK_ARROW_DOWN`.</doc>
        <source-position filename="src/adw-split-button.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="868">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="869">the direction</doc>
            <type name="Gtk.ArrowType" c:type="GtkArrowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dropdown_tooltip"
              c:identifier="adw_split_button_set_dropdown_tooltip"
              glib:set-property="dropdown-tooltip"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="dropdown-tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="916">Sets the tooltip of the dropdown button of @self.

The tooltip can be marked up with the Pango text markup language.</doc>
        <source-position filename="src/adw-split-button.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="918">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="919">the dropdown tooltip of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_split_button_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="683">Sets the name of the icon used to automatically populate the button.

Setting the icon name will set [property@SplitButton:label] and
[property@SplitButton:child] to `NULL`.</doc>
        <source-position filename="src/adw-split-button.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="685">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="686">the icon name to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="adw_split_button_set_label"
              glib:set-property="label">
        <attribute name="org.gtk.Method.set_property" value="label"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="595">Sets the label for @self.

Setting the label will set [property@SplitButton:icon-name] and
[property@SplitButton:child] to `NULL`.</doc>
        <source-position filename="src/adw-split-button.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="597">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="598">the label to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_model"
              c:identifier="adw_split_button_set_menu_model"
              glib:set-property="menu-model">
        <attribute name="org.gtk.Method.set_property" value="menu-model"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="782">Sets the menu model from which the popup will be created.

If the menu model is `NULL`, the dropdown is disabled.

A [class@Gtk.Popover] will be created from the menu model with
[ctor@Gtk.PopoverMenu.new_from_model]. Actions will be connected as
documented for this function.

If [property@SplitButton:popover] is already set, it will be dissociated from
the button, and the property is set to `NULL`.</doc>
        <source-position filename="src/adw-split-button.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="784">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="menu_model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="785">the menu model</doc>
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_popover"
              c:identifier="adw_split_button_set_popover"
              glib:set-property="popover">
        <attribute name="org.gtk.Method.set_property" value="popover"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="826">Sets the popover that will be popped up when the dropdown is clicked.

If the popover is `NULL`, the dropdown is disabled.

If [property@SplitButton:menu-model] is set, the menu model is dissociated
from the button, and the property is set to `NULL`.</doc>
        <source-position filename="src/adw-split-button.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="828">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="popover"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="829">the popover</doc>
            <type name="Gtk.Popover" c:type="GtkPopover*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="adw_split_button_set_use_underline"
              glib:set-property="use-underline">
        <attribute name="org.gtk.Method.set_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="644">Sets whether an underline in the text indicates a mnemonic.

See [property@SplitButton:label].</doc>
        <source-position filename="src/adw-split-button.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="646">a split button</doc>
            <type name="SplitButton" c:type="AdwSplitButton*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-split-button.c"
                 line="647">whether an underline in the text indicates a mnemonic</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="319">The child widget.

Setting the child widget will set [property@SplitButton:label] and
[property@SplitButton:icon-name] to `NULL`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="direction"
                writable="1"
                transfer-ownership="none"
                setter="set_direction"
                getter="get_direction"
                default-value="GTK_ARROW_DOWN">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_direction"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_direction"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="366">The direction in which the popup will be popped up.

The dropdown arrow icon will point at the same direction.

If the does not fit in the available space in the given direction, GTK will
try its best to keep it inside the screen and fully visible.

If you pass `GTK_ARROW_NONE`, it's equivalent to `GTK_ARROW_DOWN`.</doc>
        <type name="Gtk.ArrowType"/>
      </property>
      <property name="dropdown-tooltip"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_dropdown_tooltip"
                getter="get_dropdown_tooltip">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_dropdown_tooltip"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_dropdown_tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="384">The tooltip of the dropdown button.

The tooltip can be marked up with the Pango text markup language.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="306">The name of the icon used to automatically populate the button.

Setting the icon name will set [property@SplitButton:label] and
[property@SplitButton:child] to `NULL`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_label"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_label"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="281">The label for the button.

Setting the label will set [property@SplitButton:icon-name] and
[property@SplitButton:child] to `NULL`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="menu-model"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_model"
                getter="get_menu_model">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_menu_model"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_menu_model"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="332">The `GMenuModel` from which the popup will be created.

If the menu model is `NULL`, the dropdown is disabled.

A [class@Gtk.Popover] will be created from the menu model with
[ctor@Gtk.PopoverMenu.new_from_model]. Actions will be connected as
documented for this function.

If [property@SplitButton:popover] is already set, it will be dissociated
from the button, and the property is set to `NULL`.</doc>
        <type name="Gio.MenuModel"/>
      </property>
      <property name="popover"
                writable="1"
                transfer-ownership="none"
                setter="set_popover"
                getter="get_popover">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_popover"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_popover"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="351">The `GtkPopover` that will be popped up when the dropdown is clicked.

If the popover is `NULL`, the dropdown is disabled.

If [property@SplitButton:menu-model] is set, the menu model is dissociated
from the button, and the property is set to `NULL`.</doc>
        <type name="Gtk.Popover"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_split_button_get_use_underline"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_split_button_set_use_underline"/>
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="294">Whether an underline in the text indicates a mnemonic.

See [property@SplitButton:label].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="activate" when="first" action="1">
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="416">Emitted to animate press then release.

This is an action signal. Applications should never connect to this signal,
but use the [signal@SplitButton::clicked] signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clicked" when="first" action="1">
        <doc xml:space="preserve"
             filename="src/adw-split-button.c"
             line="403">Emitted when the button has been activated (pressed and released).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SplitButtonClass"
            c:type="AdwSplitButtonClass"
            glib:is-gtype-struct-for="SplitButton">
      <source-position filename="src/adw-split-button.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="SpringAnimation"
           c:symbol-prefix="spring_animation"
           c:type="AdwSpringAnimation"
           parent="Animation"
           final="1"
           glib:type-name="AdwSpringAnimation"
           glib:get-type="adw_spring_animation_get_type"
           glib:type-struct="SpringAnimationClass">
      <doc xml:space="preserve"
           filename="src/adw-spring-animation.c"
           line="18">A spring-based [class@Animation].

`AdwSpringAnimation` implements an animation driven by a physical model of a
spring described by [struct@SpringParams], with a resting position in
[property@SpringAnimation:value-to], stretched to
[property@SpringAnimation:value-from].

Since the animation is physically simulated, spring animations don't have a
fixed duration. The animation will stop when the simulated spring comes to a
rest - when the amplitude of the oscillations becomes smaller than
[property@SpringAnimation:epsilon], or immediately when it reaches
[property@SpringAnimation:value-to] if
[property@SpringAnimation:clamp] is set to `TRUE`. The estimated duration can
be obtained with [property@SpringAnimation:estimated-duration].

Due to the nature of spring-driven motion the animation can overshoot
[property@SpringAnimation:value-to] before coming to a rest. Whether the
animation will overshoot or not depends on the damping ratio of the spring.
See [struct@SpringParams] for more information about specific damping ratio
values.

If [property@SpringAnimation:clamp] is `TRUE`, the animation will abruptly
end as soon as it reaches the final value, preventing overshooting.

Animations can have an initial velocity value, set via
[property@SpringAnimation:initial-velocity], which adjusts the curve without
changing the duration. This makes spring animations useful for deceleration
at the end of gestures.

If the initial and final values are equal, and the initial velocity is not 0,
the animation value will bounce and return to its resting position.</doc>
      <source-position filename="src/adw-spring-animation.h" line="25"/>
      <constructor name="new" c:identifier="adw_spring_animation_new">
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="531">Creates a new `AdwSpringAnimation` on @widget.

The animation will animate @target from @from to @to with the dynamics of a
spring described by @spring_params.</doc>
        <source-position filename="src/adw-spring-animation.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="544">the newly created animation</doc>
          <type name="Animation" c:type="AdwAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="533">a widget to create animation on</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="534">a value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="535">a value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="spring_params" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="536">physical parameters of the spring</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </parameter>
          <parameter name="target" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="537">a target value to animate</doc>
            <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="calculate_value"
              c:identifier="adw_spring_animation_calculate_value"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="835">Calculates the value @self will have at @time.

The time starts at 0 and ends at
[property@SpringAnimation:estimated_duration].

See also [method@SpringAnimation.calculate_velocity].</doc>
        <source-position filename="src/adw-spring-animation.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="847">the value at @time</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="837">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="838">elapsed time, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="calculate_velocity"
              c:identifier="adw_spring_animation_calculate_velocity"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="860">Calculates the velocity @self will have at @time.

The time starts at 0 and ends at
[property@SpringAnimation:estimated_duration].

See also [method@SpringAnimation.calculate_value].</doc>
        <source-position filename="src/adw-spring-animation.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="872">the velocity at @time</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="862">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="863">elapsed time, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_clamp"
              c:identifier="adw_spring_animation_get_clamp"
              glib:get-property="clamp">
        <attribute name="org.gtk.Method.get_property" value="clamp"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="790">Gets whether @self should be clamped.</doc>
        <source-position filename="src/adw-spring-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="796">whether @self is clamped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="792">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_epsilon"
              c:identifier="adw_spring_animation_get_epsilon"
              glib:get-property="epsilon">
        <attribute name="org.gtk.Method.get_property" value="epsilon"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="739">Gets the precision of the spring.</doc>
        <source-position filename="src/adw-spring-animation.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="745">the epsilon value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="741">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_estimated_duration"
              c:identifier="adw_spring_animation_get_estimated_duration"
              glib:get-property="estimated-duration">
        <attribute name="org.gtk.Method.get_property"
                   value="estimated-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="889">Gets the estimated duration of @self, in milliseconds.

Can be [const@DURATION_INFINITE] if the spring damping is set to 0.</doc>
        <source-position filename="src/adw-spring-animation.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="897">the estimated duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="891">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_velocity"
              c:identifier="adw_spring_animation_get_initial_velocity"
              glib:get-property="initial-velocity">
        <attribute name="org.gtk.Method.get_property"
                   value="initial-velocity"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="698">Gets the initial velocity of @self.</doc>
        <source-position filename="src/adw-spring-animation.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="704">the initial velocity</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="700">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spring_params"
              c:identifier="adw_spring_animation_get_spring_params"
              glib:get-property="spring-params">
        <attribute name="org.gtk.Method.get_property" value="spring-params"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="657">Gets the physical parameters of the spring of @self.</doc>
        <source-position filename="src/adw-spring-animation.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="663">the spring parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="659">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_from"
              c:identifier="adw_spring_animation_get_value_from"
              glib:get-property="value-from">
        <attribute name="org.gtk.Method.get_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="573">Gets the value @self will animate from.</doc>
        <source-position filename="src/adw-spring-animation.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="579">the value to animate from</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="575">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_to"
              c:identifier="adw_spring_animation_get_value_to"
              glib:get-property="value-to">
        <attribute name="org.gtk.Method.get_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="615">Gets the value @self will animate to.</doc>
        <source-position filename="src/adw-spring-animation.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="621">the value to animate to</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="617">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_velocity"
              c:identifier="adw_spring_animation_get_velocity"
              glib:get-property="velocity">
        <attribute name="org.gtk.Method.get_property" value="velocity"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="907">Gets the current velocity of @self.</doc>
        <source-position filename="src/adw-spring-animation.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-animation.c"
               line="913">the current velocity</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="909">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_clamp"
              c:identifier="adw_spring_animation_set_clamp"
              glib:set-property="clamp">
        <attribute name="org.gtk.Method.set_property" value="clamp"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="806">Sets whether @self should be clamped.

If set to `TRUE`, the animation will abruptly end as soon as it reaches the
final value, preventing overshooting.

It won't prevent overshooting [property@SpringAnimation:value-from] if a
relative negative [property@SpringAnimation:initial-velocity] is set.</doc>
        <source-position filename="src/adw-spring-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="808">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="clamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="809">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_epsilon"
              c:identifier="adw_spring_animation_set_epsilon"
              glib:set-property="epsilon">
        <attribute name="org.gtk.Method.set_property" value="epsilon"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="755">Sets the precision of the spring.

The level of precision used to determine when the animation has come to a
rest, that is, when the amplitude of the oscillations becomes smaller than
this value.

If the epsilon value is too small, the animation will take a long time to
stop after the animated value has stopped visibly changing.

If the epsilon value is too large, the animation will end prematurely.

The default value is 0.001.</doc>
        <source-position filename="src/adw-spring-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="757">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="758">the new value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_velocity"
              c:identifier="adw_spring_animation_set_initial_velocity"
              glib:set-property="initial-velocity">
        <attribute name="org.gtk.Method.set_property"
                   value="initial-velocity"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="714">Sets the initial velocity of @self.

Initial velocity affects only the animation curve, but not its duration.</doc>
        <source-position filename="src/adw-spring-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="716">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="717">the initial velocity</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spring_params"
              c:identifier="adw_spring_animation_set_spring_params"
              glib:set-property="spring-params">
        <attribute name="org.gtk.Method.set_property" value="spring-params"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="673">Sets the physical parameters of the spring of @self.</doc>
        <source-position filename="src/adw-spring-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="675">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="spring_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="676">the new spring parameters</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_from"
              c:identifier="adw_spring_animation_set_value_from"
              glib:set-property="value-from">
        <attribute name="org.gtk.Method.set_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="589">Sets the value @self will animate from.

The animation will start at this value and end at
[property@SpringAnimation:value-to].</doc>
        <source-position filename="src/adw-spring-animation.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="591">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="592">the value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_to"
              c:identifier="adw_spring_animation_set_value_to"
              glib:set-property="value-to">
        <attribute name="org.gtk.Method.set_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="631">Sets the value @self will animate to.

The animation will start at [property@SpringAnimation:value-from] and end at
this value.</doc>
        <source-position filename="src/adw-spring-animation.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="633">a spring animation</doc>
            <type name="SpringAnimation" c:type="AdwSpringAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-animation.c"
                 line="634">the value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="clamp"
                writable="1"
                transfer-ownership="none"
                setter="set_clamp"
                getter="get_clamp"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_clamp"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_clamp"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="480">Whether the animation should be clamped.

If set to `TRUE`, the animation will abruptly end as soon as it reaches the
final value, preventing overshooting.

It won't prevent overshooting [property@SpringAnimation:value-from] if a
relative negative [property@SpringAnimation:initial-velocity] is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="epsilon"
                writable="1"
                transfer-ownership="none"
                setter="set_epsilon"
                getter="get_epsilon"
                default-value="0.001000">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_epsilon"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_epsilon"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="457">Precision of the spring.

The level of precision used to determine when the animation has come to a
rest, that is, when the amplitude of the oscillations becomes smaller than
this value.

If the epsilon value is too small, the animation will take a long time to
stop after the animated value has stopped visibly changing.

If the epsilon value is too large, the animation will end prematurely.

The default value is 0.001.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="estimated-duration"
                transfer-ownership="none"
                getter="get_estimated_duration"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_estimated_duration"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="496">Estimated duration of the animation, in milliseconds.

Can be [const@DURATION_INFINITE] if the spring damping is set to 0.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="initial-velocity"
                writable="1"
                transfer-ownership="none"
                setter="set_initial_velocity"
                getter="get_initial_velocity"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_initial_velocity"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_initial_velocity"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="443">The initial velocity to start the animation with.

Initial velocity affects only the animation curve, but not its duration.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="spring-params"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_spring_params"
                getter="get_spring_params">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_spring_params"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_spring_params"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="433">Physical parameters describing the spring.</doc>
        <type name="SpringParams"/>
      </property>
      <property name="value-from"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_from"
                getter="get_value_from"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_value_from"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_value_from"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="403">The value to animate from.

The animation will start at this value and end at
[property@SpringAnimation:value-to].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value-to"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_to"
                getter="get_value_to"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_value_to"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_spring_animation_set_value_to"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="418">The value to animate to.

The animation will start at [property@SpringAnimation:value-from] and end
at this value.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="velocity"
                transfer-ownership="none"
                getter="get_velocity"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_spring_animation_get_velocity"/>
        <doc xml:space="preserve"
             filename="src/adw-spring-animation.c"
             line="510">Current velocity of the animation.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="SpringAnimationClass"
            c:type="AdwSpringAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="SpringAnimation">
      <source-position filename="src/adw-spring-animation.h" line="25"/>
    </record>
    <record name="SpringParams"
            c:type="AdwSpringParams"
            opaque="1"
            glib:type-name="AdwSpringParams"
            glib:get-type="adw_spring_params_get_type"
            c:symbol-prefix="spring_params">
      <doc xml:space="preserve"
           filename="src/adw-spring-params.c"
           line="16">Physical parameters of a spring for [class@SpringAnimation].

Any spring can be described by three parameters: mass, stiffness and damping.

An undamped spring will produce an oscillatory motion which will go on
forever.

The frequency and amplitude of the oscillations will be determined by the
stiffness (how "strong" the spring is) and its mass (how much "inertia" it
has).

If damping is larger than 0, the amplitude of that oscillating motion will
exponientally decrease over time. If that damping is strong enough that the
spring can't complete a full oscillation, it's called an overdamped spring.

If we the spring can oscillate, it's called an underdamped spring.

The value between these two behaviors is called critical damping; a
critically damped spring will comes to rest in the minimum possible time
without producing oscillations.

The damping can be replaced by damping ratio, which produces the following
springs:

* 0: an undamped spring.
* Between 0 and 1: an underdamped spring.
* 1: a critically damped spring.
* Larger than 1: an overdamped spring.

As such</doc>
      <source-position filename="src/adw-spring-params.h" line="17"/>
      <constructor name="new" c:identifier="adw_spring_params_new">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="60">Creates a new `AdwSpringParams` from @mass, @stiffness and @damping_ratio.

The damping value is calculated from @damping_ratio and the other two
parameters.

* If @damping_ratio is 0, the spring will not be damped and will oscillate
  endlessly.
* If @damping_ratio is between 0 and 1, the spring is underdamped and will
  always overshoot.
* If @damping_ratio is 1, the spring is critically damped and will reach its
  resting position the quickest way possible.
* If @damping_ratio is larger than 1, the spring is overdamped and will reach
  its resting position faster than it can complete an oscillation.

[ctor@SpringParams.new_full] allows to pass a raw damping value instead.</doc>
        <source-position filename="src/adw-spring-params.h" line="23"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="82">the newly created spring parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <parameter name="damping_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="62">the damping ratio of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="mass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="63">the mass of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="stiffness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="64">the stiffness of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="adw_spring_params_new_full">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="99">Creates a new `AdwSpringParams` from @mass, @stiffness and @damping.

See [ctor@SpringParams.new] for a simplified constructor using damping ratio
instead of @damping.</doc>
        <source-position filename="src/adw-spring-params.h" line="27"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="110">the newly created spring parameters</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <parameter name="damping" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="101">the damping of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="mass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="102">the mass of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="stiffness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="103">the stiffness of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_damping" c:identifier="adw_spring_params_get_damping">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="169">Gets the damping of @self.</doc>
        <source-position filename="src/adw-spring-params.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="175">the damping</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="171">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_damping_ratio"
              c:identifier="adw_spring_params_get_damping_ratio">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="185">Gets the damping ratio of @self.</doc>
        <source-position filename="src/adw-spring-params.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="191">the damping ratio</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="187">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mass" c:identifier="adw_spring_params_get_mass">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="205">Gets the mass of @self.</doc>
        <source-position filename="src/adw-spring-params.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="211">the mass</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="207">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stiffness"
              c:identifier="adw_spring_params_get_stiffness">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="221">Gets the stiffness of @self.</doc>
        <source-position filename="src/adw-spring-params.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="227">the stiffness</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="223">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="adw_spring_params_ref">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="134">Increases the reference count of @self.</doc>
        <source-position filename="src/adw-spring-params.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-spring-params.c"
               line="140">@self</doc>
          <type name="SpringParams" c:type="AdwSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="136">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="adw_spring_params_unref">
        <doc xml:space="preserve"
             filename="src/adw-spring-params.c"
             line="152">Decreases the reference count of @self.

If the last reference is dropped, the structure is freed.</doc>
        <source-position filename="src/adw-spring-params.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-spring-params.c"
                 line="154">spring params</doc>
            <type name="SpringParams" c:type="AdwSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Squeezer"
           c:symbol-prefix="squeezer"
           c:type="AdwSqueezer"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwSqueezer"
           glib:get-type="adw_squeezer_get_type"
           glib:type-struct="SqueezerClass">
      <doc xml:space="preserve"
           filename="src/adw-squeezer.c"
           line="26">A best fit container.

&lt;picture&gt;
  &lt;source srcset="squeezer-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="squeezer-wide.png" alt="squeezer-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="squeezer-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="squeezer-narrow.png" alt="squeezer-narrow"&gt;
&lt;/picture&gt;

The `AdwSqueezer` widget is a container which only shows the first of its
children that fits in the available size. It is convenient to offer different
widgets to represent the same data with different levels of detail, making
the widget seem to squeeze itself to fit in the available space.

Transitions between children can be animated as fades. This can be controlled
with [property@Squeezer:transition-type].

## CSS nodes

`AdwSqueezer` has a single CSS node with name `squeezer`.</doc>
      <source-position filename="src/adw-squeezer.h" line="38"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_squeezer_new">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1307">Creates a new `AdwSqueezer`.</doc>
        <source-position filename="src/adw-squeezer.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1312">the newly created `AdwSqueezer`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="adw_squeezer_add">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1320">Adds a child to @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1327">the [class@SqueezerPage] for @child</doc>
          <type name="SqueezerPage" c:type="AdwSqueezerPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1322">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1323">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_none"
              c:identifier="adw_squeezer_get_allow_none"
              glib:get-property="allow-none">
        <attribute name="org.gtk.Method.get_property" value="allow-none"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1508">Gets whether to allow squeezing beyond the last child's minimum size.</doc>
        <source-position filename="src/adw-squeezer.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1514">whether @self allows squeezing beyond the last child</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1510">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="adw_squeezer_get_homogeneous"
              glib:get-property="homogeneous">
        <attribute name="org.gtk.Method.get_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1414">Gets whether all children have the same size for the opposite orientation.</doc>
        <source-position filename="src/adw-squeezer.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1420">whether @self is homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1416">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="adw_squeezer_get_interpolate_size"
              glib:get-property="interpolate-size">
        <attribute name="org.gtk.Method.get_property"
                   value="interpolate-size"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1646">Gets whether @self interpolates its size when changing the visible child.</doc>
        <source-position filename="src/adw-squeezer.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1652">whether the size is interpolated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1648">A squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="adw_squeezer_get_page">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1379">Returns the [class@SqueezerPage] object for @child.</doc>
        <source-position filename="src/adw-squeezer.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1386">the page object for @child</doc>
          <type name="SqueezerPage" c:type="AdwSqueezerPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1381">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1382">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="adw_squeezer_get_pages"
              glib:get-property="pages">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1779">Returns a [iface@Gio.ListModel] that contains the pages of @self.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track the visible page.</doc>
        <source-position filename="src/adw-squeezer.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1788">a `GtkSelectionModel` for the squeezer's children</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1781">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_switch_threshold_policy"
              c:identifier="adw_squeezer_get_switch_threshold_policy"
              glib:get-property="switch-threshold-policy">
        <attribute name="org.gtk.Method.get_property"
                   value="switch-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1460">Gets the switch threshold policy for @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1462">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="adw_squeezer_get_transition_duration"
              glib:get-property="transition-duration">
        <attribute name="org.gtk.Method.get_property"
                   value="transition-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1553">Gets the transition animation duration for @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1559">the transition duration, in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1555">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="adw_squeezer_get_transition_running"
              glib:get-property="transition-running">
        <attribute name="org.gtk.Method.get_property"
                   value="transition-running"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1626">Gets whether a transition is currently running for @self.

If a transition is impossible, the property value will be set to `TRUE` and
then immediately to `FALSE`, so it's possible to rely on its notifications
to know that a transition has happened.</doc>
        <source-position filename="src/adw-squeezer.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1636">whether a transition is currently running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1628">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="adw_squeezer_get_transition_type"
              glib:get-property="transition-type">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1590">Gets the type of animation used for transitions between children in @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1596">the current transition type of @self</doc>
          <type name="SqueezerTransitionType"
                c:type="AdwSqueezerTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1592">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="adw_squeezer_get_visible_child"
              glib:get-property="visible-child">
        <attribute name="org.gtk.Method.get_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1398">Gets the currently visible child of @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1404">the visible child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1400">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xalign"
              c:identifier="adw_squeezer_get_xalign"
              glib:get-property="xalign">
        <attribute name="org.gtk.Method.get_property" value="xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1689">Gets the horizontal alignment, from 0 (start) to 1 (end).</doc>
        <source-position filename="src/adw-squeezer.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1695">the alignment value</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1691">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_yalign"
              c:identifier="adw_squeezer_get_yalign"
              glib:get-property="yalign">
        <attribute name="org.gtk.Method.get_property" value="yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1734">Gets the vertical alignment, from 0 (top) to 1 (bottom).</doc>
        <source-position filename="src/adw-squeezer.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1740">the alignment value</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1736">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_squeezer_remove">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1348">Removes a child widget from @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1350">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1351">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_none"
              c:identifier="adw_squeezer_set_allow_none"
              glib:set-property="allow-none">
        <attribute name="org.gtk.Method.set_property" value="allow-none"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1524">Sets whether to allow squeezing beyond the last child's minimum size.

If set to `TRUE`, the squeezer can shrink to the point where no child can be
shown. This is functionally equivalent to appending a widget with 0×0 minimum
size.</doc>
        <source-position filename="src/adw-squeezer.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1526">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="allow_none" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1527">whether @self allows squeezing beyond the last child</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="adw_squeezer_set_homogeneous"
              glib:set-property="homogeneous">
        <attribute name="org.gtk.Method.set_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1430">Sets whether all children have the same size for the opposite orientation.

For example, if a squeezer is horizontal and is homogeneous, it will request
the same height for all its children. If it isn't, the squeezer may change
size when a different child becomes visible.</doc>
        <source-position filename="src/adw-squeezer.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1432">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1433">whether @self is homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="adw_squeezer_set_interpolate_size"
              glib:set-property="interpolate-size">
        <attribute name="org.gtk.Method.set_property"
                   value="interpolate-size"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1662">Sets whether @self interpolates its size when changing the visible child.

If `TRUE`, the squeezer will interpolate its size between the one of the
previous visible child and the one of the new visible child, according to the
set transition duration and the orientation, e.g. if the squeezer is
horizontal, it will interpolate the its height.</doc>
        <source-position filename="src/adw-squeezer.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1664">A squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1665">whether to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_switch_threshold_policy"
              c:identifier="adw_squeezer_set_switch_threshold_policy"
              glib:set-property="switch-threshold-policy">
        <attribute name="org.gtk.Method.set_property"
                   value="switch-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1475">Sets the switch threshold policy for @self.

Determines when the squeezer will switch children.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only switch when the
visible child cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`,
it will switch as soon as the visible child doesn't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately switching.</doc>
        <source-position filename="src/adw-squeezer.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1477">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1478">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="AdwFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="adw_squeezer_set_transition_duration"
              glib:set-property="transition-duration">
        <attribute name="org.gtk.Method.set_property"
                   value="transition-duration"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1569">Sets the transition animation duration for @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1571">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1572">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="adw_squeezer_set_transition_type"
              glib:set-property="transition-type">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1606">Sets the type of animation used for transitions between children in @self.</doc>
        <source-position filename="src/adw-squeezer.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1608">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1609">the new transition type</doc>
            <type name="SqueezerTransitionType"
                  c:type="AdwSqueezerTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xalign"
              c:identifier="adw_squeezer_set_xalign"
              glib:set-property="xalign">
        <attribute name="org.gtk.Method.set_property" value="xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1705">Sets the horizontal alignment, from 0 (start) to 1 (end).

This affects the children allocation during transitions, when they exceed the
size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
start side aligned and overflow the end side, and 1 means the opposite.</doc>
        <source-position filename="src/adw-squeezer.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1707">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1708">the new alignment value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_yalign"
              c:identifier="adw_squeezer_set_yalign"
              glib:set-property="yalign">
        <attribute name="org.gtk.Method.set_property" value="yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1750">Sets the vertical alignment, from 0 (top) to 1 (bottom).

This affects the children allocation during transitions, when they exceed the
size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
top side aligned and overflow the bottom side, and 1 means the opposite.</doc>
        <source-position filename="src/adw-squeezer.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1752">a squeezer</doc>
            <type name="Squeezer" c:type="AdwSqueezer*"/>
          </instance-parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1753">the new alignment value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-none"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_none"
                getter="get_allow_none"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_allow_none"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_allow_none"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1076">Whether to allow squeezing beyond the last child's minimum size.

If set to `TRUE`, the squeezer can shrink to the point where no child can
be shown. This is functionally equivalent to appending a widget with 0×0
minimum size.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="homogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_homogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_homogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1042">Whether all children have the same size for the opposite orientation.

For example, if a squeezer is horizontal and is homogeneous, it will
request the same height for all its children. If it isn't, the squeezer may
change size when a different child becomes visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_interpolate_size"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_interpolate_size"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1125">Whether the squeezer interpolates its size when changing the visible child.

If `TRUE`, the squeezer will interpolate its size between the one of the
previous visible child and the one of the new visible child, according to
the set transition duration and the orientation, e.g. if the squeezer is
horizontal, it will interpolate the its height.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pages" transfer-ownership="none" getter="get_pages">
        <attribute name="org.gtk.Property.get" value="adw_squeezer_get_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1174">A selection model with the squeezer's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track the visible page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="switch-threshold-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_switch_threshold_policy"
                getter="get_switch_threshold_policy"
                default-value="ADW_FOLD_THRESHOLD_POLICY_NATURAL">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_switch_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_switch_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1056">The switch threshold policy.

Determines when the squeezer will switch children.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only switch when the
visible child cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`,
it will switch as soon as the visible child doesn't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately switching.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration"
                default-value="200">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_transition_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_transition_duration"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1090">The transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                transfer-ownership="none"
                getter="get_transition_running"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_transition_running"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1111">Whether a transition is currently running.

If a transition is impossible, the property value will be set to `TRUE` and
then immediately to `FALSE`, so it's possible to rely on its notifications
to know that a transition has happened.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="ADW_SQUEEZER_TRANSITION_TYPE_NONE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1100">The type of animation used for transitions between children.</doc>
        <type name="SqueezerTransitionType"/>
      </property>
      <property name="visible-child"
                transfer-ownership="none"
                getter="get_visible_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_visible_child"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1032">The currently visible child.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="xalign"
                writable="1"
                transfer-ownership="none"
                setter="set_xalign"
                getter="get_xalign"
                default-value="0.500000">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_xalign"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1140">The horizontal alignment, from 0 (start) to 1 (end).

This affects the children allocation during transitions, when they exceed
the size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
start side aligned and overflow the end side, and 1 means the opposite.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="yalign"
                writable="1"
                transfer-ownership="none"
                setter="set_yalign"
                getter="get_yalign"
                default-value="0.500000">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_get_yalign"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_set_yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1157">The vertical alignment, from 0 (top) to 1 (bottom).

This affects the children allocation during transitions, when they exceed
the size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
top side aligned and overflow the bottom side, and 1 means the opposite.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="SqueezerClass"
            c:type="AdwSqueezerClass"
            glib:is-gtype-struct-for="Squeezer">
      <source-position filename="src/adw-squeezer.h" line="38"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="SqueezerPage"
           c:symbol-prefix="squeezer_page"
           c:type="AdwSqueezerPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwSqueezerPage"
           glib:get-type="adw_squeezer_page_get_type"
           glib:type-struct="SqueezerPageClass">
      <doc xml:space="preserve"
           filename="src/adw-squeezer.c"
           line="53">An auxiliary class used by [class@Squeezer].</doc>
      <source-position filename="src/adw-squeezer.h" line="24"/>
      <method name="get_child"
              c:identifier="adw_squeezer_page_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1236">Returns the squeezer child to which @self belongs.</doc>
        <source-position filename="src/adw-squeezer.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1242">the child to which @self belongs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1238">a squeezer page</doc>
            <type name="SqueezerPage" c:type="AdwSqueezerPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="adw_squeezer_page_get_enabled"
              glib:get-property="enabled">
        <attribute name="org.gtk.Method.get_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1252">Gets whether @self is enabled.</doc>
        <source-position filename="src/adw-squeezer.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-squeezer.c"
               line="1258">whether @self is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1254">a squeezer page</doc>
            <type name="SqueezerPage" c:type="AdwSqueezerPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="adw_squeezer_page_set_enabled"
              glib:set-property="enabled">
        <attribute name="org.gtk.Method.set_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="1268">Sets whether @self is enabled.

If a child is disabled, it will be ignored when looking for the child
fitting the available size best.

This allows to programmatically and prematurely hide a child even if it fits
in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="src/adw-squeezer.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1270">a squeezer page</doc>
            <type name="SqueezerPage" c:type="AdwSqueezerPage*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-squeezer.c"
                 line="1271">whether @self is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="214">The the squeezer child to which the page belongs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_squeezer_page_get_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_squeezer_page_set_enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="224">Whether the child is enabled.

If a child is disabled, it will be ignored when looking for the child
fitting the available size best.

This allows to programmatically and prematurely hide a child even if it
fits in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SqueezerPageClass"
            c:type="AdwSqueezerPageClass"
            glib:is-gtype-struct-for="SqueezerPage">
      <source-position filename="src/adw-squeezer.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SqueezerTransitionType"
                 glib:type-name="AdwSqueezerTransitionType"
                 glib:get-type="adw_squeezer_transition_type_get_type"
                 c:type="AdwSqueezerTransitionType">
      <doc xml:space="preserve"
           filename="src/adw-squeezer.c"
           line="59">Describes the possible transitions in a [class@Squeezer] widget.</doc>
      <member name="none"
              value="0"
              c:identifier="ADW_SQUEEZER_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="ADW_SQUEEZER_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="61">No transition</doc>
      </member>
      <member name="crossfade"
              value="1"
              c:identifier="ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE"
              glib:nick="crossfade"
              glib:name="ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE">
        <doc xml:space="preserve"
             filename="src/adw-squeezer.c"
             line="62">A cross-fade</doc>
      </member>
    </enumeration>
    <class name="StatusPage"
           c:symbol-prefix="status_page"
           c:type="AdwStatusPage"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwStatusPage"
           glib:get-type="adw_status_page_get_type"
           glib:type-struct="StatusPageClass">
      <doc xml:space="preserve"
           filename="src/adw-status-page.c"
           line="13">A page used for empty/error states and similar use-cases.

&lt;picture&gt;
  &lt;source srcset="status-page-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="status-page.png" alt="status-page"&gt;
&lt;/picture&gt;

The `AdwStatusPage` widget can have an icon, a title, a description and a
custom widget which is displayed below them.

## CSS nodes

`AdwStatusPage` has a main CSS node with name `statuspage`.

`AdwStatusPage` can use the
[`.compact`](style-classes.html#compact-status-page) style class for when it
needs to fit into a small space such a sidebar or a popover.</doc>
      <source-position filename="src/adw-status-page.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_status_page_new">
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="291">Creates a new `AdwStatusPage`.</doc>
        <source-position filename="src/adw-status-page.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="296">the newly created `AdwStatusPage`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_status_page_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="480">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-status-page.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="486">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="482">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="adw_status_page_get_description"
              glib:get-property="description">
        <attribute name="org.gtk.Method.get_property" value="description"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="441">Gets the description for @self.</doc>
        <source-position filename="src/adw-status-page.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="447">the description</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="443">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_status_page_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="304">Gets the icon name for @self.</doc>
        <source-position filename="src/adw-status-page.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="310">the icon name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="306">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_paintable"
              c:identifier="adw_status_page_get_paintable"
              glib:get-property="paintable">
        <attribute name="org.gtk.Method.get_property" value="paintable"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="353">Gets the paintable for @self.</doc>
        <source-position filename="src/adw-status-page.h" line="34"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="359">the paintable</doc>
          <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="355">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_status_page_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="402">Gets the title for @self.</doc>
        <source-position filename="src/adw-status-page.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-status-page.c"
               line="408">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="404">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_status_page_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="496">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-status-page.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="498">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="499">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="adw_status_page_set_description"
              glib:set-property="description">
        <attribute name="org.gtk.Method.set_property" value="description"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="457">Sets the description for @self.

The description is displayed below the title.</doc>
        <source-position filename="src/adw-status-page.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="459">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="460">the description</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_status_page_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="320">Sets the icon name for @self.

Changing this will set [property@StatusPage:paintable] to `NULL`.</doc>
        <source-position filename="src/adw-status-page.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="322">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="323">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paintable"
              c:identifier="adw_status_page_set_paintable"
              glib:set-property="paintable">
        <attribute name="org.gtk.Method.set_property" value="paintable"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="369">Sets the paintable for @self.

Changing this will set [property@StatusPage:icon-name] to `NULL`.</doc>
        <source-position filename="src/adw-status-page.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="371">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
          <parameter name="paintable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="372">the paintable</doc>
            <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_status_page_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="418">Sets the title for @self.

The title is displayed below the icon.</doc>
        <source-position filename="src/adw-status-page.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="420">a status page</doc>
            <type name="StatusPage" c:type="AdwStatusPage*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-status-page.c"
                 line="421">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_status_page_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_status_page_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="233">The child widget.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="description"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description">
        <attribute name="org.gtk.Property.get"
                   value="adw_status_page_get_description"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_status_page_set_description"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="223">The description to be displayed below the title.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_status_page_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_status_page_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="189">The name of the icon to be used.

Changing this will set [property@StatusPage:paintable] to `NULL`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="paintable"
                writable="1"
                transfer-ownership="none"
                setter="set_paintable"
                getter="get_paintable">
        <attribute name="org.gtk.Property.get"
                   value="adw_status_page_get_paintable"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_status_page_set_paintable"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="201">The paintable to be used.

Changing this will set [property@StatusPage:icon-name] to `NULL`.</doc>
        <type name="Gdk.Paintable"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_status_page_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_status_page_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-status-page.c"
             line="213">The title to be displayed below the icon.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="StatusPageClass"
            c:type="AdwStatusPageClass"
            glib:is-gtype-struct-for="StatusPage">
      <source-position filename="src/adw-status-page.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="StyleManager"
           c:symbol-prefix="style_manager"
           c:type="AdwStyleManager"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwStyleManager"
           glib:get-type="adw_style_manager_get_type"
           glib:type-struct="StyleManagerClass">
      <doc xml:space="preserve"
           filename="src/adw-style-manager.c"
           line="33">A class for managing application-wide styling.

`AdwStyleManager` provides a way to query and influence the application
styles, such as whether to use dark or high contrast appearance.

It allows to set the color scheme via the
[property@StyleManager:color-scheme] property, and to query the current
appearance, as well as whether a system-wide color scheme preference exists.</doc>
      <source-position filename="src/adw-style-manager.h" line="33"/>
      <function name="get_default"
                c:identifier="adw_style_manager_get_default">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="511">Gets the default `AdwStyleManager` instance.

It manages all [class@Gdk.Display] instances unless the style manager for
that display has an override.

See [func@StyleManager.get_for_display].</doc>
        <source-position filename="src/adw-style-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="521">the default style manager</doc>
          <type name="StyleManager" c:type="AdwStyleManager*"/>
        </return-value>
      </function>
      <function name="get_for_display"
                c:identifier="adw_style_manager_get_for_display">
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="532">Gets the `AdwStyleManager` instance managing @display.

It can be used to override styles for that specific display instead of the
whole application.

Most applications should use [func@StyleManager.get_default] instead.</doc>
        <source-position filename="src/adw-style-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="543">the style manager for @display</doc>
          <type name="StyleManager" c:type="AdwStyleManager*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="534">a `GdkDisplay`</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_color_scheme"
              c:identifier="adw_style_manager_get_color_scheme"
              glib:get-property="color-scheme">
        <attribute name="org.gtk.Method.get_property" value="color-scheme"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="577">Gets the requested application color scheme.</doc>
        <source-position filename="src/adw-style-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="583">the color scheme</doc>
          <type name="ColorScheme" c:type="AdwColorScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="579">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dark"
              c:identifier="adw_style_manager_get_dark"
              glib:get-property="dark">
        <attribute name="org.gtk.Method.get_property" value="dark"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="681">Gets whether the application is using dark appearance.

This can be used to query the current appearance, as requested via
[property@StyleManager:color-scheme].</doc>
        <source-position filename="src/adw-style-manager.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="690">whether the application is using dark appearance</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="683">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display"
              c:identifier="adw_style_manager_get_display"
              glib:get-property="display">
        <attribute name="org.gtk.Method.get_property" value="display"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="558">Gets the display the style manager is associated with.

The display will be `NULL` for the style manager returned by
[func@StyleManager.get_default].</doc>
        <source-position filename="src/adw-style-manager.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="567">(nullable): the display</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="560">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_high_contrast"
              c:identifier="adw_style_manager_get_high_contrast"
              glib:get-property="high-contrast">
        <attribute name="org.gtk.Method.get_property" value="high-contrast"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="700">Gets whether the application is using high contrast appearance.

This cannot be overridden by applications.</doc>
        <source-position filename="src/adw-style-manager.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="708">whether the application is using high contrast appearance</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="702">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_supports_color_schemes"
              c:identifier="adw_style_manager_get_system_supports_color_schemes"
              glib:get-property="system-supports-color-schemes">
        <attribute name="org.gtk.Method.get_property"
                   value="system-supports-color-schemes"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="661">Gets whether the system supports color schemes.

This can be used to check if the current environment provides a color scheme
preference. For example, applications might want to show a separate
appearance switcher if it's set to `FALSE`.</doc>
        <source-position filename="src/adw-style-manager.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-style-manager.c"
               line="671">whether the system supports color schemes</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="663">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color_scheme"
              c:identifier="adw_style_manager_set_color_scheme"
              glib:set-property="color-scheme">
        <attribute name="org.gtk.Method.set_property" value="color-scheme"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="593">Sets the requested application color scheme.

The effective appearance will be decided based on the application color
scheme and the system preferred color scheme. The
[property@StyleManager:dark] property can be used to query the current
effective appearance.

The `ADW_COLOR_SCHEME_PREFER_LIGHT` color scheme results in the application
using light appearance unless the system prefers dark colors. This is the
default value.

The `ADW_COLOR_SCHEME_PREFER_DARK` color scheme results in the application
using dark appearance, but can still switch to the light appearance if the
system can prefers it, for example, when the high contrast preference is
enabled.

The `ADW_COLOR_SCHEME_FORCE_LIGHT` and `ADW_COLOR_SCHEME_FORCE_DARK` values
ignore the system preference entirely. They are useful if the application
wants to match its UI to its content or to provide a separate color scheme
switcher.

If a per-[class@Gdk.Display] style manager has its color scheme set to
`ADW_COLOR_SCHEME_DEFAULT`, it will inherit the color scheme from the
default style manager.

For the default style manager, `ADW_COLOR_SCHEME_DEFAULT` is equivalent to
`ADW_COLOR_SCHEME_PREFER_LIGHT`.

The [property@StyleManager:system-supports-color-schemes] property can be
used to check if the current environment provides a color scheme
preference.</doc>
        <source-position filename="src/adw-style-manager.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="595">a style manager</doc>
            <type name="StyleManager" c:type="AdwStyleManager*"/>
          </instance-parameter>
          <parameter name="color_scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-style-manager.c"
                 line="596">the color scheme</doc>
            <type name="ColorScheme" c:type="AdwColorScheme"/>
          </parameter>
        </parameters>
      </method>
      <property name="color-scheme"
                writable="1"
                transfer-ownership="none"
                setter="set_color_scheme"
                getter="get_color_scheme"
                default-value="ADW_COLOR_SCHEME_DEFAULT">
        <attribute name="org.gtk.Property.get"
                   value="adw_style_manager_get_color_scheme"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_style_manager_set_color_scheme"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="391">The requested application color scheme.

The effective appearance will be decided based on the application color
scheme and the system preferred color scheme. The
[property@StyleManager:dark] property can be used to query the current
effective appearance.

The `ADW_COLOR_SCHEME_PREFER_LIGHT` color scheme results in the application
using light appearance unless the system prefers dark colors. This is the
default value.

The `ADW_COLOR_SCHEME_PREFER_DARK` color scheme results in the application
using dark appearance, but can still switch to the light appearance if the
system can prefers it, for example, when the high contrast preference is
enabled.

The `ADW_COLOR_SCHEME_FORCE_LIGHT` and `ADW_COLOR_SCHEME_FORCE_DARK` values
ignore the system preference entirely. They are useful if the application
wants to match its UI to its content or to provide a separate color scheme
switcher.

If a per-[class@Gdk.Display] style manager has its color scheme set to
`ADW_COLOR_SCHEME_DEFAULT`, it will inherit the color scheme from the
default style manager.

For the default style manager, `ADW_COLOR_SCHEME_DEFAULT` is equivalent to
`ADW_COLOR_SCHEME_PREFER_LIGHT`.

The [property@StyleManager:system-supports-color-schemes] property can be
used to check if the current environment provides a color scheme
preference.</doc>
        <type name="ColorScheme"/>
      </property>
      <property name="dark"
                transfer-ownership="none"
                getter="get_dark"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_style_manager_get_dark"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="448">Whether the application is using dark appearance.

This property can be used to query the current appearance, as requested via
[property@StyleManager:color-scheme].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_display">
        <attribute name="org.gtk.Property.get"
                   value="adw_style_manager_get_display"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="378">The display the style manager is associated with.

The display will be `NULL` for the style manager returned by
[func@StyleManager.get_default].</doc>
        <type name="Gdk.Display"/>
      </property>
      <property name="high-contrast"
                transfer-ownership="none"
                getter="get_high_contrast"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_style_manager_get_high_contrast"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="461">Whether the application is using high contrast appearance.

This cannot be overridden by applications.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="system-supports-color-schemes"
                transfer-ownership="none"
                getter="get_system_supports_color_schemes"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_style_manager_get_system_supports_color_schemes"/>
        <doc xml:space="preserve"
             filename="src/adw-style-manager.c"
             line="432">Whether the system supports color schemes.

This property can be used to check if the current environment provides a
color scheme preference. For example, applications might want to show a
separate appearance switcher if it's set to `FALSE`.

See [property@StyleManager:color-scheme].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="StyleManagerClass"
            c:type="AdwStyleManagerClass"
            glib:is-gtype-struct-for="StyleManager">
      <source-position filename="src/adw-style-manager.h" line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SwipeTracker"
           c:symbol-prefix="swipe_tracker"
           c:type="AdwSwipeTracker"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwSwipeTracker"
           glib:get-type="adw_swipe_tracker_get_type"
           glib:type-struct="SwipeTrackerClass">
      <doc xml:space="preserve"
           filename="src/adw-swipe-tracker.c"
           line="33">A swipe tracker used in [class@Carousel], [class@Flap] and [class@Leaflet].

The `AdwSwipeTracker` object can be used for implementing widgets with swipe
gestures. It supports touch-based swipes, pointer dragging, and touchpad
scrolling.

The widgets will probably want to expose the [property@SwipeTracker:enabled]
property. If they expect to use horizontal orientation,
[property@SwipeTracker:reversed] can be used for supporting RTL text
direction.</doc>
      <source-position filename="src/adw-swipe-tracker.h" line="23"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="adw_swipe_tracker_new">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1174">Creates a new `AdwSwipeTracker` for @widget.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1180">the newly created `AdwSwipeTracker`</doc>
          <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
        </return-value>
        <parameters>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1176">a widget to add the tracker on</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_allow_long_swipes"
              c:identifier="adw_swipe_tracker_get_allow_long_swipes"
              glib:get-property="allow-long-swipes">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1337">Gets whether to allow swiping for more than one snap point at a time.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1343">whether long swipes are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1339">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="adw_swipe_tracker_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1296">Gets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1302">whether mouse dragging is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1298">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="adw_swipe_tracker_get_enabled"
              glib:get-property="enabled">
        <attribute name="org.gtk.Method.get_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1208">Gets whether @self is enabled.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1214">whether @self is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1210">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reversed"
              c:identifier="adw_swipe_tracker_get_reversed"
              glib:get-property="reversed">
        <attribute name="org.gtk.Method.get_property" value="reversed"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1255">Gets whether @self is reversing the swipe direction.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1261">whether the direction is reversed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1257">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipeable"
              c:identifier="adw_swipe_tracker_get_swipeable"
              glib:get-property="swipeable">
        <attribute name="org.gtk.Method.get_property" value="swipeable"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1192">Get the widget @self is attached to.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipe-tracker.c"
               line="1198">the swipeable widget</doc>
          <type name="Swipeable" c:type="AdwSwipeable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1194">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="adw_swipe_tracker_set_allow_long_swipes"
              glib:set-property="allow-long-swipes">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1353">Sets whether to allow swiping for more than one snap point at a time.

If the value is `FALSE`, each swipe can only move to the adjacent snap
points.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1355">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1356">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="adw_swipe_tracker_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1312">Sets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1314">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1315">whether to allow mouse dragging</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="adw_swipe_tracker_set_enabled"
              glib:set-property="enabled">
        <attribute name="org.gtk.Method.set_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1224">Sets whether @self is enabled.

When it's not enabled, no events will be processed. Usually widgets will want
to expose this via a property.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1226">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1227">whether @self is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reversed"
              c:identifier="adw_swipe_tracker_set_reversed"
              glib:set-property="reversed">
        <attribute name="org.gtk.Method.set_property" value="reversed"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1271">Sets whether to reverse the swipe direction.

If the swipe tracker is horizontal, it can be used for supporting RTL text
direction.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1273">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
          <parameter name="reversed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1274">whether to reverse the swipe direction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="shift_position"
              c:identifier="adw_swipe_tracker_shift_position">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1379">Moves the current progress value by @delta.

This can be used to adjust the current position if snap points move during
the gesture.</doc>
        <source-position filename="src/adw-swipe-tracker.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1381">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="AdwSwipeTracker*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1382">the position delta</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_swipe_tracker_get_allow_long_swipes"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_swipe_tracker_set_allow_long_swipes"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1069">Whether to allow swiping for more than one snap point at a time.

If the value is `FALSE`, each swipe can only move to the adjacent snap
points.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_swipe_tracker_get_allow_mouse_drag"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_swipe_tracker_set_allow_mouse_drag"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1059">Whether to allow dragging with mouse pointer.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_swipe_tracker_get_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_swipe_tracker_set_enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1033">Whether the swipe tracker is enabled.

When it's not enabled, no events will be processed. Usually widgets will
want to expose this via a property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reversed"
                writable="1"
                transfer-ownership="none"
                setter="set_reversed"
                getter="get_reversed"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_swipe_tracker_get_reversed"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_swipe_tracker_set_reversed"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1046">Whether to reverse the swipe direction.

If the swipe tracker is horizontal, it can be used for supporting RTL text
direction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipeable"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_swipeable">
        <attribute name="org.gtk.Property.get"
                   value="adw_swipe_tracker_get_swipeable"/>
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1023">The widget the swipe tracker is attached to.</doc>
        <type name="Swipeable"/>
      </property>
      <glib:signal name="begin-swipe" when="first">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1108">This signal is emitted right before a swipe will be started, after the
drag threshold has been passed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-swipe" when="first">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1140">This signal is emitted as soon as the gesture has stopped.

The user is expected to animate the deceleration from the current progress
value to @to with an animation using @velocity as the initial velocity,
provided in pixels per second. [class@SpringAnimation] is usually a good
fit for this.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1143">the velocity of the swipe</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1144">the progress value to animate to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="prepare" when="first">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1088">This signal is emitted when a possible swipe is detected.

The @direction value can be used to restrict the swipe to a certain
direction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1091">the direction of the swipe</doc>
            <type name="NavigationDirection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-swipe" when="first">
        <doc xml:space="preserve"
             filename="src/adw-swipe-tracker.c"
             line="1123">This signal is emitted every time the progress value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipe-tracker.c"
                 line="1126">the current animation progress value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SwipeTrackerClass"
            c:type="AdwSwipeTrackerClass"
            glib:is-gtype-struct-for="SwipeTracker">
      <source-position filename="src/adw-swipe-tracker.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="Swipeable"
               c:symbol-prefix="swipeable"
               c:type="AdwSwipeable"
               glib:type-name="AdwSwipeable"
               glib:get-type="adw_swipeable_get_type"
               glib:type-struct="SwipeableInterface">
      <doc xml:space="preserve"
           filename="src/adw-swipeable.c"
           line="11">An interface for swipeable widgets.

The `AdwSwipeable` interface is implemented by all swipeable widgets.

See [class@SwipeTracker] for details about implementing it.</doc>
      <source-position filename="src/adw-swipeable.h" line="52"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="get_cancel_progress" invoker="get_cancel_progress">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="111">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="src/adw-swipeable.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="117">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="113">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_distance" invoker="get_distance">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="41">Gets the swipe distance of @self.

This corresponds to how many pixels 1 unit represents.</doc>
        <source-position filename="src/adw-swipeable.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="49">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="43">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress" invoker="get_progress">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="90">Gets the current progress of @self.</doc>
        <source-position filename="src/adw-swipeable.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="96">the current progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="92">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_snap_points" invoker="get_snap_points">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="64">Gets the snap points of @self.

Each snap point represents a progress value that is considered acceptable to
end the swipe on.</doc>
        <source-position filename="src/adw-swipeable.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="74">the snap points</doc>
          <array length="0" zero-terminated="0" c:type="double*">
            <type name="gdouble" c:type="double"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="66">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="67">location to return the number of the snap points</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_swipe_area" invoker="get_swipe_area">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="132">Gets the area @self can start a swipe from for the given direction and
gesture type.

This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="src/adw-swipeable.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="134">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="135">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="AdwNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="136">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="137">a pointer to a rectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_cancel_progress"
              c:identifier="adw_swipeable_get_cancel_progress">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="111">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="src/adw-swipeable.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="117">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="113">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance" c:identifier="adw_swipeable_get_distance">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="41">Gets the swipe distance of @self.

This corresponds to how many pixels 1 unit represents.</doc>
        <source-position filename="src/adw-swipeable.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="49">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="43">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress" c:identifier="adw_swipeable_get_progress">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="90">Gets the current progress of @self.</doc>
        <source-position filename="src/adw-swipeable.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="96">the current progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="92">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_points"
              c:identifier="adw_swipeable_get_snap_points">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="64">Gets the snap points of @self.

Each snap point represents a progress value that is considered acceptable to
end the swipe on.</doc>
        <source-position filename="src/adw-swipeable.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-swipeable.c"
               line="74">the snap points</doc>
          <array length="0" zero-terminated="0" c:type="double*">
            <type name="gdouble" c:type="double"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="66">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="67">location to return the number of the snap points</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipe_area"
              c:identifier="adw_swipeable_get_swipe_area">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.c"
             line="132">Gets the area @self can start a swipe from for the given direction and
gesture type.

This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="src/adw-swipeable.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="134">a swipeable</doc>
            <type name="Swipeable" c:type="AdwSwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="135">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="AdwNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="136">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="137">a pointer to a rectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SwipeableInterface"
            c:type="AdwSwipeableInterface"
            glib:is-gtype-struct-for="Swipeable">
      <doc xml:space="preserve"
           filename="src/adw-swipeable.h"
           line="25">An interface for swipeable widgets.</doc>
      <source-position filename="src/adw-swipeable.h" line="52"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="src/adw-swipeable.h"
             line="27">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_distance">
        <callback name="get_distance">
          <source-position filename="src/adw-swipeable.h" line="40"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="49">the swipe distance in pixels</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="43">a swipeable</doc>
              <type name="Swipeable" c:type="AdwSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_snap_points">
        <callback name="get_snap_points">
          <source-position filename="src/adw-swipeable.h" line="41"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="74">the snap points</doc>
            <array length="1" zero-terminated="0" c:type="double*">
              <type name="gdouble" c:type="double"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="66">a swipeable</doc>
              <type name="Swipeable" c:type="AdwSwipeable*"/>
            </parameter>
            <parameter name="n_snap_points"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="67">location to return the number of the snap points</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="src/adw-swipeable.h" line="43"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="96">the current progress, unitless</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="92">a swipeable</doc>
              <type name="Swipeable" c:type="AdwSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancel_progress">
        <callback name="get_cancel_progress">
          <source-position filename="src/adw-swipeable.h" line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-swipeable.c"
                 line="117">the cancel progress, unitless</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="113">a swipeable</doc>
              <type name="Swipeable" c:type="AdwSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_swipe_area">
        <callback name="get_swipe_area">
          <source-position filename="src/adw-swipeable.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="134">a swipeable</doc>
              <type name="Swipeable" c:type="AdwSwipeable*"/>
            </parameter>
            <parameter name="navigation_direction" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="135">the direction of the swipe</doc>
              <type name="NavigationDirection"
                    c:type="AdwNavigationDirection"/>
            </parameter>
            <parameter name="is_drag" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="136">whether the swipe is caused by a dragging gesture</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/adw-swipeable.c"
                   line="137">a pointer to a rectangle to store the swipe area</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TabBar"
           c:symbol-prefix="tab_bar"
           c:type="AdwTabBar"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwTabBar"
           glib:get-type="adw_tab_bar_get_type"
           glib:type-struct="TabBarClass">
      <doc xml:space="preserve"
           filename="src/adw-tab-bar.c"
           line="17">A tab bar for [class@TabView].

&lt;picture&gt;
  &lt;source srcset="tab-bar-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="tab-bar.png" alt="tab-bar"&gt;
&lt;/picture&gt;

The `AdwTabBar` widget is a tab bar that can be used with conjunction with
`AdwTabView`.

`AdwTabBar` can autohide and can optionally contain action widgets on both
sides of the tabs.

When there's not enough space to show all the tabs, `AdwTabBar` will scroll
them. Pinned tabs always stay visible and aren't a part of the scrollable
area.

## CSS nodes

`AdwTabBar` has a single CSS node with name `tabbar`.</doc>
      <source-position filename="src/adw-tab-bar.h" line="26"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_tab_bar_new">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="678">Creates a new `AdwTabBar`.</doc>
        <source-position filename="src/adw-tab-bar.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="683">the newly created `AdwTabBar`</doc>
          <type name="TabBar" c:type="AdwTabBar*"/>
        </return-value>
      </constructor>
      <method name="get_autohide"
              c:identifier="adw_tab_bar_get_autohide"
              glib:get-property="autohide">
        <attribute name="org.gtk.Method.get_property" value="autohide"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="869">Gets whether the tabs automatically hide.</doc>
        <source-position filename="src/adw-tab-bar.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="875">whether the tabs automatically hide</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="871">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end_action_widget"
              c:identifier="adw_tab_bar_get_end_action_widget"
              glib:get-property="end-action-widget">
        <attribute name="org.gtk.Method.get_property"
                   value="end-action-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="826">Gets the widget shown after the tabs.</doc>
        <source-position filename="src/adw-tab-bar.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="832">the widget shown after the tabs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="828">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expand_tabs"
              c:identifier="adw_tab_bar_get_expand_tabs"
              glib:get-property="expand-tabs">
        <attribute name="org.gtk.Method.get_property" value="expand-tabs"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="933">Gets whether tabs expand to full width.</doc>
        <source-position filename="src/adw-tab-bar.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="939">whether tabs expand to full width.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="935">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_drag_preload"
              c:identifier="adw_tab_bar_get_extra_drag_preload"
              glib:get-property="extra-drag-preload"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="1050">Gets whether drop data should be preloaded on hover.</doc>
        <source-position filename="src/adw-tab-bar.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="1056">whether drop data should be preloaded on hover</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1052">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inverted"
              c:identifier="adw_tab_bar_get_inverted"
              glib:get-property="inverted">
        <attribute name="org.gtk.Method.get_property" value="inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="975">Gets whether tabs use inverted layout.</doc>
        <source-position filename="src/adw-tab-bar.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="981">whether tabs use inverted layout</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="977">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_overflowing"
              c:identifier="adw_tab_bar_get_is_overflowing"
              glib:get-property="is-overflowing">
        <attribute name="org.gtk.Method.get_property" value="is-overflowing"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="1094">Gets whether @self is overflowing.

If `TRUE`, all tabs cannot be displayed at once and require scrolling.</doc>
        <source-position filename="src/adw-tab-bar.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="1102">whether @self is overflowing</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1096">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_action_widget"
              c:identifier="adw_tab_bar_get_start_action_widget"
              glib:get-property="start-action-widget">
        <attribute name="org.gtk.Method.get_property"
                   value="start-action-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="783">Gets the widget shown before the tabs.</doc>
        <source-position filename="src/adw-tab-bar.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="789">the widget shown before the tabs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="785">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tabs_revealed"
              c:identifier="adw_tab_bar_get_tabs_revealed"
              glib:get-property="tabs-revealed">
        <attribute name="org.gtk.Method.get_property" value="tabs-revealed"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="915">Gets whether the tabs are currently revealed.

See [property@TabBar:autohide].</doc>
        <source-position filename="src/adw-tab-bar.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="923">whether the tabs are currently revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="917">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view"
              c:identifier="adw_tab_bar_get_view"
              glib:get-property="view">
        <attribute name="org.gtk.Method.get_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="691">Gets the tab view @self controls.</doc>
        <source-position filename="src/adw-tab-bar.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="697">the view @self controls</doc>
          <type name="TabView" c:type="AdwTabView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="693">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autohide"
              c:identifier="adw_tab_bar_set_autohide"
              glib:set-property="autohide">
        <attribute name="org.gtk.Method.set_property" value="autohide"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="885">Sets whether the tabs automatically hide.

If set to `TRUE`, the tab bar disappears when [property@TabBar:view] has 0
or 1 tab, no pinned tabs, and no tab is being transferred.

See [property@TabBar:tabs-revealed].</doc>
        <source-position filename="src/adw-tab-bar.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="887">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="autohide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="888">whether the tabs automatically hide</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_end_action_widget"
              c:identifier="adw_tab_bar_set_end_action_widget"
              glib:set-property="end-action-widget">
        <attribute name="org.gtk.Method.set_property"
                   value="end-action-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="842">Sets the widget to show after the tabs.</doc>
        <source-position filename="src/adw-tab-bar.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="844">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="845">the widget to show after the tabs</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expand_tabs"
              c:identifier="adw_tab_bar_set_expand_tabs"
              glib:set-property="expand-tabs">
        <attribute name="org.gtk.Method.set_property" value="expand-tabs"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="949">Sets whether tabs expand to full width.

If set to `TRUE`, the tabs will always vary width filling the whole width
when possible, otherwise tabs will always have the minimum possible size.</doc>
        <source-position filename="src/adw-tab-bar.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="951">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="expand_tabs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="952">whether to expand tabs</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extra_drag_preload"
              c:identifier="adw_tab_bar_set_extra_drag_preload"
              glib:set-property="extra-drag-preload"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="1068">Sets whether drop data should be preloaded on hover.

See [property@Gtk.DropTarget:preload].</doc>
        <source-position filename="src/adw-tab-bar.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1070">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="preload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1071">whether to preload drop data</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inverted"
              c:identifier="adw_tab_bar_set_inverted"
              glib:set-property="inverted">
        <attribute name="org.gtk.Method.set_property" value="inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="991">Sets whether tabs tabs use inverted layout.

If set to `TRUE`, non-pinned tabs will have the close button at the beginning
and the indicator at the end rather than the opposite.</doc>
        <source-position filename="src/adw-tab-bar.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="993">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="inverted" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="994">whether tabs use inverted layout</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_action_widget"
              c:identifier="adw_tab_bar_set_start_action_widget"
              glib:set-property="start-action-widget">
        <attribute name="org.gtk.Method.set_property"
                   value="start-action-widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="799">Sets the widget to show before the tabs.</doc>
        <source-position filename="src/adw-tab-bar.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="801">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="802">the widget to show before the tabs</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view"
              c:identifier="adw_tab_bar_set_view"
              glib:set-property="view">
        <attribute name="org.gtk.Method.set_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="707">Sets the tab view @self controls.</doc>
        <source-position filename="src/adw-tab-bar.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="709">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="710">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_extra_drop_target"
              c:identifier="adw_tab_bar_setup_extra_drop_target">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="1017">Sets the supported types for this drop target.

Sets up an extra drop target on tabs.

This allows to drag arbitrary content onto tabs, for example URLs in a web
browser.

If a tab is hovered for a certain period of time while dragging the content,
it will be automatically selected.

The [signal@TabBar::extra-drag-drop] signal can be used to handle the drop.</doc>
        <source-position filename="src/adw-tab-bar.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1019">a tab bar</doc>
            <type name="TabBar" c:type="AdwTabBar*"/>
          </instance-parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1020">the supported actions</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
          <parameter name="types"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1021">
  all supported `GType`s that can be dropped</doc>
            <array length="2" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
          <parameter name="n_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="1023">number of @types</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="autohide"
                writable="1"
                transfer-ownership="none"
                setter="set_autohide"
                getter="get_autohide"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_autohide"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_autohide"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="455">Whether the tabs automatically hide.

If set to `TRUE`, the tab bar disappears when [property@TabBar:view] has 0
or 1 tab, no pinned tabs, and no tab is being transferred.

See [property@TabBar:tabs-revealed].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="end-action-widget"
                writable="1"
                transfer-ownership="none"
                setter="set_end_action_widget"
                getter="get_end_action_widget">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_end_action_widget"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_end_action_widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="445">The widget shown after the tabs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="expand-tabs"
                writable="1"
                transfer-ownership="none"
                setter="set_expand_tabs"
                getter="get_expand_tabs"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_expand_tabs"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_expand_tabs"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="482">Whether tabs expand to full width.

If set to `TRUE`, the tabs will always vary width filling the whole width
when possible, otherwise tabs will always have the minimum possible size.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="extra-drag-preload"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_extra_drag_preload"
                getter="get_extra_drag_preload"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_extra_drag_preload"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_extra_drag_preload"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="520">Whether the drop data should be preloaded on hover.

See [property@Gtk.DropTarget:preload].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="inverted"
                writable="1"
                transfer-ownership="none"
                setter="set_inverted"
                getter="get_inverted"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_inverted"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="495">Whether tabs use inverted layout.

If set to `TRUE`, non-pinned tabs will have the close button at the
beginning and the indicator at the end rather than the opposite.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-overflowing"
                transfer-ownership="none"
                getter="get_is_overflowing"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_is_overflowing"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="508">Whether the tab bar is overflowing.

If `TRUE`, all tabs cannot be displayed at once and require scrolling.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="start-action-widget"
                writable="1"
                transfer-ownership="none"
                setter="set_start_action_widget"
                getter="get_start_action_widget">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_start_action_widget"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_bar_set_start_action_widget"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="435">The widget shown before the tabs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="tabs-revealed"
                transfer-ownership="none"
                getter="get_tabs_revealed"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_bar_get_tabs_revealed"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="470">Whether the tabs are currently revealed.

See [property@TabBar:autohide].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="view"
                writable="1"
                transfer-ownership="none"
                setter="set_view"
                getter="get_view">
        <attribute name="org.gtk.Property.get" value="adw_tab_bar_get_view"/>
        <attribute name="org.gtk.Property.set" value="adw_tab_bar_set_view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="425">The tab view the tab bar controls.</doc>
        <type name="TabView"/>
      </property>
      <glib:signal name="extra-drag-drop" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="536">This signal is emitted when content is dropped onto a tab.

The content must be of one of the types set up via
[method@TabBar.setup_extra_drop_target].

See [signal@Gtk.DropTarget::drop].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="549">whether the drop was accepted for @page</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="539">the page matching the tab the content was dropped onto</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="540">the `GValue` being dropped</doc>
            <type name="GObject.Value"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="extra-drag-value" when="last" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-bar.c"
             line="562">This signal is emitted when the dropped content is preloaded.

In order for data to be preloaded, [property@TabBar:extra-drag-preload]
must be set to `TRUE`.

The content must be of one of the types set up via
[method@TabBar.setup_extra_drop_target].

See [property@Gtk.DropTarget:value].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-bar.c"
               line="578">the preferred action for the drop on @page</doc>
          <type name="Gdk.DragAction"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="565">the page matching the tab the content was dropped onto</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-bar.c"
                 line="566">the `GValue` being dropped</doc>
            <type name="GObject.Value"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabBarClass"
            c:type="AdwTabBarClass"
            glib:is-gtype-struct-for="TabBar">
      <source-position filename="src/adw-tab-bar.h" line="26"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="TabButton"
           c:symbol-prefix="tab_button"
           c:type="AdwTabButton"
           version="1.3"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwTabButton"
           glib:get-type="adw_tab_button_get_type"
           glib:type-struct="TabButtonClass">
      <doc xml:space="preserve"
           filename="src/adw-tab-button.c"
           line="20">A button that displays the number of [class@TabView] pages.

&lt;picture&gt;
  &lt;source srcset="tab-button-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="tab-button.png" alt="tab-button"&gt;
&lt;/picture&gt;

`AdwTabButton` is a button that displays the number of pages in a given
`AdwTabView`, as well as whether one of the inactive pages needs attention.

It's intended to be used as a visible indicator when there's no visible tab
bar, typically opening an [class@TabOverview] on click, e.g. via the
`overview.open` action name:

```xml
&lt;object class="AdwTabButton"&gt;
  &lt;property name="view"&gt;view&lt;/property&gt;
  &lt;property name="action-name"&gt;overview.open&lt;/property&gt;
&lt;/object&gt;
```

## CSS nodes

`AdwTabButton` has a main CSS node with name `tabbutton`.

# Accessibility

`AdwTabButton` uses the `GTK_ACCESSIBLE_ROLE_BUTTON` role.</doc>
      <source-position filename="src/adw-tab-button.h" line="25"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_tab_button_new" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="420">Creates a new `AdwTabButton`.</doc>
        <source-position filename="src/adw-tab-button.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-button.c"
               line="425">the newly created `AdwTabButton`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_view"
              c:identifier="adw_tab_button_get_view"
              glib:get-property="view"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="435">Gets the tab view @self displays.</doc>
        <source-position filename="src/adw-tab-button.h" line="31"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-button.c"
               line="441">the tab view</doc>
          <type name="TabView" c:type="AdwTabView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-button.c"
                 line="437">a tab button</doc>
            <type name="TabButton" c:type="AdwTabButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_view"
              c:identifier="adw_tab_button_set_view"
              glib:set-property="view"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="453">Sets the tab view to display.</doc>
        <source-position filename="src/adw-tab-button.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-button.c"
                 line="455">a tab button</doc>
            <type name="TabButton" c:type="AdwTabButton*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-button.c"
                 line="456">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </parameter>
        </parameters>
      </method>
      <property name="view"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_view"
                getter="get_view">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_button_get_view"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_button_set_view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="282">The view the tab button displays.</doc>
        <type name="TabView"/>
      </property>
      <glib:signal name="activate" when="first" action="1" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="316">Emitted to animate press then release.

This is an action signal. Applications should never connect to this signal,
but use the [signal@TabButton::clicked] signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clicked" when="first" action="1" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-button.c"
             line="299">Emitted when the button has been activated (pressed and released).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TabButtonClass"
            c:type="AdwTabButtonClass"
            glib:is-gtype-struct-for="TabButton">
      <source-position filename="src/adw-tab-button.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="TabOverview"
           c:symbol-prefix="tab_overview"
           c:type="AdwTabOverview"
           version="1.3"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwTabOverview"
           glib:get-type="adw_tab_overview_get_type"
           glib:type-struct="TabOverviewClass">
      <doc xml:space="preserve"
           filename="src/adw-tab-overview.c"
           line="30">A tab overview for [class@TabView].

&lt;picture&gt;
  &lt;source srcset="tab-overview-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="tab-overview.png" alt="tab-overview"&gt;
&lt;/picture&gt;

`AdwTabOverview` is a widget that can display tabs from an `AdwTabView` in a
grid.

`AdwTabOverview` shows a thumbnail for each tab. By default thumbnails are
static for all pages except the selected one. They can be made always live
by setting [property@TabPage:live-thumbnail] to `TRUE`, or refreshed with
[method@TabPage.invalidate_thumbnail] or
[method@TabView.invalidate_thumbnails] otherwise.

If the pages are too tall or too wide, the thumbnails will be cropped; use
[property@TabPage:thumbnail-xalign] and [property@TabPage:thumbnail-yalign] to
control which part of the page should be visible in this case.

Pinned tabs are shown as smaller cards without thumbnails above the other
tabs. Unlike in [class@TabBar], they still have titles, as well as an unpin
button.

`AdwTabOverview` provides search in open tabs. It searches in tab titles and
tooltips, as well as [property@TabPage:keyword].

If [property@TabOverview:enable-new-tab] is set to `TRUE`, a new tab button
will be shown. Connect to the [signal@TabOverview::create-tab] signal to use
it.

[property@TabOverview:secondary-menu] can be used to provide a secondary menu
for the overview. Use it to add extra actions, e.g. to open a new window or
undo closed tab.

`AdwTabOverview` is intended to be cover the whole window and shows window
buttons by default. They can be disabled by setting
[property@TabOverview:show-start-title-buttons] and/or
[property@TabOverview:show-end-title-buttons] to `FALSE`.

If search and window buttons are disabled, and secondary menu is not set, the
header bar will be hidden.

## Actions

`AdwTabOverview` defines the `overview.open` and `overview.close` actions for
opening and closing itself. They can be convenient when used together with
[class@TabButton].

## CSS nodes

`AdwTabOverview` has a single CSS node with name `taboverview`.</doc>
      <source-position filename="src/adw-tab-overview.h" line="25"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new"
                   c:identifier="adw_tab_overview_new"
                   version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1819">Creates a new `AdwTabOverview`.</doc>
        <source-position filename="src/adw-tab-overview.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1824">the newly created `AdwTabOverview`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="adw_tab_overview_get_child"
              glib:get-property="child"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1930">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1936">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1932">a `AdwTabOveview`</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_new_tab"
              c:identifier="adw_tab_overview_get_enable_new_tab"
              glib:get-property="enable-new-tab"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="enable-new-tab"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2215">Gets whether to new tab button is enabled for @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2221">whether new tab button is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2217">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_search"
              c:identifier="adw_tab_overview_get_enable_search"
              glib:get-property="enable-search"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="enable-search"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2135">Gets whether search in tabs is enabled for @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2141">whether search is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2137">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_drag_preload"
              c:identifier="adw_tab_overview_get_extra_drag_preload"
              glib:get-property="extra-drag-preload"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="extra-drag-preload"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2457">Gets whether drop data should be preloaded on hover.</doc>
        <source-position filename="src/adw-tab-overview.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2463">whether drop data should be preloaded on hover</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2459">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inverted"
              c:identifier="adw_tab_overview_get_inverted"
              glib:get-property="inverted"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2088">Gets whether thumbnails use inverted layout.</doc>
        <source-position filename="src/adw-tab-overview.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2094">whether thumbnails use inverted layout</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2090">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_open"
              c:identifier="adw_tab_overview_get_open"
              glib:get-property="open"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="open"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1972">Gets whether @self is open.</doc>
        <source-position filename="src/adw-tab-overview.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1978">whether the overview is open</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1974">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_active"
              c:identifier="adw_tab_overview_get_search_active"
              glib:get-property="search-active"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="search-active"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2195">Gets whether search is currently active for @self.

See [property@TabOverview:enable-search].</doc>
        <source-position filename="src/adw-tab-overview.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2203">whether search is active</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2197">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_menu"
              c:identifier="adw_tab_overview_get_secondary_menu"
              glib:get-property="secondary-menu"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="secondary-menu"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2262">Gets the secondary menu model for @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2268">the secondary menu model</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2264">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_end_title_buttons"
              c:identifier="adw_tab_overview_get_show_end_title_buttons"
              glib:get-property="show-end-title-buttons"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="show-end-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2357">Gets whether end title buttons are shown in @self's header bar.</doc>
        <source-position filename="src/adw-tab-overview.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2363">whether end title buttons are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2359">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_start_title_buttons"
              c:identifier="adw_tab_overview_get_show_start_title_buttons"
              glib:get-property="show-start-title-buttons"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="show-start-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2309">Gets whether start title buttons are shown in @self's header bar.</doc>
        <source-position filename="src/adw-tab-overview.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="2315">whether start title buttons are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2311">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view"
              c:identifier="adw_tab_overview_get_view"
              glib:get-property="view"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1834">Gets the tab view @self controls.</doc>
        <source-position filename="src/adw-tab-overview.h" line="31"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1840">the tab view</doc>
          <type name="TabView" c:type="AdwTabView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1836">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_tab_overview_set_child"
              glib:set-property="child"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1948">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1950">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1951">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_new_tab"
              c:identifier="adw_tab_overview_set_enable_new_tab"
              glib:set-property="enable-new-tab"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="enable-new-tab"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2233">Sets whether to enable new tab button for @self.

Connect to the [signal@TabOverview::create-tab] signal to use it.</doc>
        <source-position filename="src/adw-tab-overview.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2235">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="enable_new_tab" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2236">whether to enable new tab button</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_search"
              c:identifier="adw_tab_overview_set_enable_search"
              glib:set-property="enable-search"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="enable-search"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2153">Sets whether to enable search in tabs for @self.

Search matches tab titles and tooltips, as well as keywords, set via
[property@TabPage:keyword]. Use keywords to search in e.g. page URLs in a web
browser.

During search, tab reordering and drag-n-drop are disabled.

Use [property@TabOverview:search-active] to check out if search is currently
active.</doc>
        <source-position filename="src/adw-tab-overview.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2155">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="enable_search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2156">whether to enable search</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extra_drag_preload"
              c:identifier="adw_tab_overview_set_extra_drag_preload"
              glib:set-property="extra-drag-preload"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="extra-drag-preload"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2475">Sets whether drop data should be preloaded on hover.

See [property@Gtk.DropTarget:preload].</doc>
        <source-position filename="src/adw-tab-overview.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2477">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="preload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2478">whether to preload drop data</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inverted"
              c:identifier="adw_tab_overview_set_inverted"
              glib:set-property="inverted"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2106">Sets whether thumbnails use inverted layout.

If set to `TRUE`, thumbnails will have the close or unpin button at the
beginning and the indicator at the end rather than the other way around.</doc>
        <source-position filename="src/adw-tab-overview.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2108">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="inverted" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2109">whether thumbnails use inverted layout</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_open"
              c:identifier="adw_tab_overview_set_open"
              glib:set-property="open"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="open"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1990">Sets whether the to open @self.</doc>
        <source-position filename="src/adw-tab-overview.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1992">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1993">whether the overview is open</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secondary_menu"
              c:identifier="adw_tab_overview_set_secondary_menu"
              glib:set-property="secondary-menu"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="secondary-menu"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2280">Sets the secondary menu model for @self.

Use it to add extra actions, e.g. to open a new window or undo closed tab.</doc>
        <source-position filename="src/adw-tab-overview.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2282">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="secondary_menu"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2283">a menu model</doc>
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_end_title_buttons"
              c:identifier="adw_tab_overview_set_show_end_title_buttons"
              glib:set-property="show-end-title-buttons"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="show-end-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2375">Sets whether to show end title buttons in @self's header bar.

See [property@HeaderBar:show-start-title-buttons] for the other side.</doc>
        <source-position filename="src/adw-tab-overview.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2377">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="show_end_title_buttons" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2378">whether to show end title buttons</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_start_title_buttons"
              c:identifier="adw_tab_overview_set_show_start_title_buttons"
              glib:set-property="show-start-title-buttons"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="show-start-title-buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2327">Sets whether to show start title buttons in @self's header bar.

See [property@HeaderBar:show-end-title-buttons] for the other side.</doc>
        <source-position filename="src/adw-tab-overview.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2329">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="show_start_title_buttons" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2330">whether to show start title buttons</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view"
              c:identifier="adw_tab_overview_set_view"
              glib:set-property="view"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1852">Sets the tab view to control.

The view must be inside @self, see [property@TabOverview:child].</doc>
        <source-position filename="src/adw-tab-overview.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1854">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1855">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_extra_drop_target"
              c:identifier="adw_tab_overview_setup_extra_drop_target"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="2405">Sets the supported types for this drop target.

Sets up an extra drop target on tabs.

This allows to drag arbitrary content onto tabs, for example URLs in a web
browser.

If a tab is hovered for a certain period of time while dragging the content,
it will be automatically selected.

The [signal@TabOverview::extra-drag-drop] signal can be used to handle the
drop.</doc>
        <source-position filename="src/adw-tab-overview.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2407">a tab overview</doc>
            <type name="TabOverview" c:type="AdwTabOverview*"/>
          </instance-parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2408">the supported actions</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </parameter>
          <parameter name="types"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2409">
  all supported `GType`s that can be dropped</doc>
            <array length="2" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
          <parameter name="n_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="2411">number of @types</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1499">The child widget.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="enable-new-tab"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_new_tab"
                getter="get_enable_new_tab"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_enable_new_tab"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_enable_new_tab"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1573">Whether to enable new tab button.

Connect to the [signal@TabOverview::create-tab] signal to use it.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-search"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_search"
                getter="get_enable_search"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_enable_search"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_enable_search"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1538">Whether to enable search in tabs.

Search matches tab titles and tooltips, as well as keywords, set via
[property@TabPage:keyword]. Use keywords to search in e.g. page URLs in a
web browser.

During search, tab reordering and drag-n-drop are disabled.

Use [property@TabOverview:search-active] to check out if search is
currently active.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="extra-drag-preload"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_extra_drag_preload"
                getter="get_extra_drag_preload"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_extra_drag_preload"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_extra_drag_preload"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1629">Whether the drop data should be preloaded on hover.

See [property@Gtk.DropTarget:preload].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="inverted"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_inverted"
                getter="get_inverted"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_inverted"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_inverted"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1523">Whether thumbnails use inverted layout.

If set to `TRUE`, thumbnails will have the close or unpin buttons at the
beginning and the indicator at the end rather than the other way around.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="open"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_open"
                getter="get_open"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_open"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_open"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1511">Whether the overview is open.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="search-active"
                version="1.3"
                transfer-ownership="none"
                getter="get_search_active"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_search_active"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1559">Whether search is currently active.

See [property@TabOverview:enable-search].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="secondary-menu"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_secondary_menu"
                getter="get_secondary_menu">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_secondary_menu"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_secondary_menu"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1587">The secondary menu model.

Use it to add extra actions, e.g. to open a new window or undo closed tab.</doc>
        <type name="Gio.MenuModel"/>
      </property>
      <property name="show-end-title-buttons"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_show_end_title_buttons"
                getter="get_show_end_title_buttons"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_show_end_title_buttons"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_show_end_title_buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1615">Whether to show end title buttons in the overview's header bar.

See [property@HeaderBar:show-start-title-buttons] for the other side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-start-title-buttons"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_show_start_title_buttons"
                getter="get_show_start_title_buttons"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_show_start_title_buttons"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_show_start_title_buttons"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1601">Whether to show start title buttons in the overview's header bar.

See [property@HeaderBar:show-end-title-buttons] for the other side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="view"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_view"
                getter="get_view">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_overview_get_view"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_overview_set_view"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1485">The tab view the overview controls.

The view must be inside the tab overview, see [property@TabOverview:child].</doc>
        <type name="TabView"/>
      </property>
      <glib:signal name="create-tab" when="last" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1645">Emitted when a tab needs to be created;

This can happen after the new tab button has been pressed, see
[property@TabOverview:enable-new-tab].

The signal handler is expected to create a new page in the corresponding
[class@TabView] and return it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1657">the newly created page</doc>
          <type name="TabPage"/>
        </return-value>
      </glib:signal>
      <glib:signal name="extra-drag-drop" when="last" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1671">This signal is emitted when content is dropped onto a tab.

The content must be of one of the types set up via
[method@TabOverview.setup_extra_drop_target].

See [signal@Gtk.DropTarget::drop].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1684">whether the drop was accepted for @page</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1674">the page matching the tab the content was dropped onto</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1675">the `GValue` being dropped</doc>
            <type name="GObject.Value"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="extra-drag-value" when="last" version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-overview.c"
             line="1699">This signal is emitted when the dropped content is preloaded.

In order for data to be preloaded, [property@TabOverview:extra-drag-preload]
must be set to `TRUE`.

The content must be of one of the types set up via
[method@TabOverview.setup_extra_drop_target].

See [property@Gtk.DropTarget:value].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-overview.c"
               line="1715">the preferred action for the drop on @page</doc>
          <type name="Gdk.DragAction"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1702">the page matching the tab the content was dropped onto</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-overview.c"
                 line="1703">the `GValue` being dropped</doc>
            <type name="GObject.Value"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabOverviewClass"
            c:type="AdwTabOverviewClass"
            glib:is-gtype-struct-for="TabOverview">
      <source-position filename="src/adw-tab-overview.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="TabPage"
           c:symbol-prefix="tab_page"
           c:type="AdwTabPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwTabPage"
           glib:get-type="adw_tab_page_get_type"
           glib:type-struct="TabPageClass">
      <doc xml:space="preserve"
           filename="src/adw-tab-view.c"
           line="72">An auxiliary class used by [class@TabView].</doc>
      <source-position filename="src/adw-tab-view.h" line="42"/>
      <implements name="Gtk.Accessible"/>
      <method name="get_child"
              c:identifier="adw_tab_page_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2609">Gets the child of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2615">the child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2611">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="adw_tab_page_get_icon"
              glib:get-property="icon">
        <attribute name="org.gtk.Method.get_property" value="icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2769">Gets the icon of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="69"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2775">the icon of @self</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2771">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_activatable"
              c:identifier="adw_tab_page_get_indicator_activatable"
              glib:get-property="indicator-activatable">
        <attribute name="org.gtk.Method.get_property"
                   value="indicator-activatable"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2959">Gets whether the indicator of @self is activatable.</doc>
        <source-position filename="src/adw-tab-view.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2966">whether the indicator is activatable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2961">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_icon"
              c:identifier="adw_tab_page_get_indicator_icon"
              glib:get-property="indicator-icon">
        <attribute name="org.gtk.Method.get_property" value="indicator-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2858">Gets the indicator icon of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2864">the indicator icon of @self</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2860">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_tooltip"
              c:identifier="adw_tab_page_get_indicator_tooltip"
              glib:get-property="indicator-tooltip"
              version="1.2">
        <attribute name="org.gtk.Method.get_property"
                   value="indicator-tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2912">Gets the tooltip of the indicator icon of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2918">the indicator tooltip of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2914">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keyword"
              c:identifier="adw_tab_page_get_keyword"
              glib:get-property="keyword"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="keyword"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3053">Gets the search keyword of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="105"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3059">the search keyword of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3055">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_live_thumbnail"
              c:identifier="adw_tab_page_get_live_thumbnail"
              glib:get-property="live-thumbnail"
              version="1.3">
        <attribute name="org.gtk.Method.get_property" value="live-thumbnail"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3204">Gets whether to live thumbnail is enabled @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3210">whether live thumbnail is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3206">a tab overview</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loading"
              c:identifier="adw_tab_page_get_loading"
              glib:get-property="loading">
        <attribute name="org.gtk.Method.get_property" value="loading"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2813">Gets whether @self is loading.</doc>
        <source-position filename="src/adw-tab-view.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2819">whether @self is loading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2815">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_attention"
              c:identifier="adw_tab_page_get_needs_attention"
              glib:get-property="needs-attention">
        <attribute name="org.gtk.Method.get_property" value="needs-attention"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3004">Gets whether @self needs attention.</doc>
        <source-position filename="src/adw-tab-view.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3010">whether @self needs attention</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3006">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="adw_tab_page_get_parent"
              glib:get-property="parent">
        <attribute name="org.gtk.Method.get_property" value="parent"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2625">Gets the parent page of @self.

See [method@TabView.add_page] and [method@TabView.close_page].</doc>
        <source-position filename="src/adw-tab-view.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2633">the parent page</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2627">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pinned"
              c:identifier="adw_tab_page_get_pinned"
              glib:get-property="pinned">
        <attribute name="org.gtk.Method.get_property" value="pinned"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2659">Gets whether @self is pinned.

See [method@TabView.set_page_pinned].</doc>
        <source-position filename="src/adw-tab-view.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2667">whether @self is pinned</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2661">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="adw_tab_page_get_selected"
              glib:get-property="selected">
        <attribute name="org.gtk.Method.get_property" value="selected"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2643">Gets whether @self is selected.</doc>
        <source-position filename="src/adw-tab-view.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2649">whether @self is selected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2645">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_xalign"
              c:identifier="adw_tab_page_get_thumbnail_xalign"
              glib:get-property="thumbnail-xalign"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="thumbnail-xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3100">Gets the horizontal alignment of the thumbnail for @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3106">the horizontal alignment</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3102">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_yalign"
              c:identifier="adw_tab_page_get_thumbnail_yalign"
              glib:get-property="thumbnail-yalign"
              version="1.3">
        <attribute name="org.gtk.Method.get_property"
                   value="thumbnail-yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3152">Gets the vertical alignment of the thumbnail for @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3158">the vertical alignment</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3154">a tab overview</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_tab_page_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2677">Gets the title of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2683">the title of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2679">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tooltip"
              c:identifier="adw_tab_page_get_tooltip"
              glib:get-property="tooltip">
        <attribute name="org.gtk.Method.get_property" value="tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2726">Gets the tooltip of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2732">the tooltip of @self</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2728">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_thumbnail"
              c:identifier="adw_tab_page_invalidate_thumbnail"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3258">Invalidates thumbnail for @self.

If an [class@TabOverview] is open, the thumbnail representing @self will be
immediately updated. Otherwise it will be update when opening the overview.

Does nothing if [property@TabPage:live-thumbnail] is set to `TRUE`.

See also [method@TabView.invalidate_thumbnails].</doc>
        <source-position filename="src/adw-tab-view.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3260">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="adw_tab_page_set_icon"
              glib:set-property="icon">
        <attribute name="org.gtk.Method.set_property" value="icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2785">Sets the icon of @self.

[class@TabBar] and [class@TabOverview] display the icon next to the title,
unless [property@TabPage:loading] is set to `TRUE`.

`AdwTabBar` also won't show the icon if the page is pinned and
[propertyTabPage:indicator-icon] is set.</doc>
        <source-position filename="src/adw-tab-view.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2787">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2788">the icon of @self</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_activatable"
              c:identifier="adw_tab_page_set_indicator_activatable"
              glib:set-property="indicator-activatable">
        <attribute name="org.gtk.Method.set_property"
                   value="indicator-activatable"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2976">Sets whether the indicator of @self is activatable.

If set to `TRUE`, [signal@TabView::indicator-activated] will be emitted
when the indicator icon is clicked.

If [property@TabPage:indicator-icon] is not set, does nothing.</doc>
        <source-position filename="src/adw-tab-view.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2978">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2979">whether the indicator is activatable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_icon"
              c:identifier="adw_tab_page_set_indicator_icon"
              glib:set-property="indicator-icon">
        <attribute name="org.gtk.Method.set_property" value="indicator-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2874">Sets the indicator icon of @self.

A common use case is an audio or camera indicator in a web browser.

[class@TabBar] will show it at the beginning of the tab, alongside icon
representing [property@TabPage:icon] or loading spinner.

If the page is pinned, the indicator will be shown instead of icon or
spinner.

[class@TabOverview] will show it at the at the top part of the thumbnail.

[property@TabPage:indicator-tooltip] can be used to set the tooltip on the
indicator icon.

If [property@TabPage:indicator-activatable] is set to `TRUE`, the
indicator icon can act as a button.</doc>
        <source-position filename="src/adw-tab-view.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2876">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="indicator_icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2877">the indicator icon of @self</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_tooltip"
              c:identifier="adw_tab_page_set_indicator_tooltip"
              glib:set-property="indicator-tooltip"
              version="1.2">
        <attribute name="org.gtk.Method.set_property"
                   value="indicator-tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2930">Sets the tooltip of the indicator icon of @self.

The tooltip can be marked up with the Pango text markup language.

See [property@TabPage:indicator-icon].</doc>
        <source-position filename="src/adw-tab-view.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2932">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2933">the indicator tooltip of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keyword"
              c:identifier="adw_tab_page_set_keyword"
              glib:set-property="keyword"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="keyword"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3071">Sets the search keyword for @self.

[class@TabOverview] can search pages by their keywords in addition to their
titles and tooltips.

Keywords allow to include e.g. page URLs into tab search in a web browser.</doc>
        <source-position filename="src/adw-tab-view.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3073">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="keyword" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3074">the search keyword</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_live_thumbnail"
              c:identifier="adw_tab_page_set_live_thumbnail"
              glib:set-property="live-thumbnail"
              version="1.3">
        <attribute name="org.gtk.Method.set_property" value="live-thumbnail"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3222">Sets whether to enable live thumbnail for @self.

When set to `TRUE`, @self's thumbnail in [class@TabOverview] will update
immediately when @self is redrawn or resized.

If it's set to `FALSE`, the thumbnail will only be live when the @self is
selected, and otherwise it will be static and will only update when
[method@TabPage.invalidate_thumbnail] or
[method@TabView.invalidate_thumbnails] is called.</doc>
        <source-position filename="src/adw-tab-view.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3224">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="live_thumbnail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3225">whether to enable live thumbnail</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loading"
              c:identifier="adw_tab_page_set_loading"
              glib:set-property="loading">
        <attribute name="org.gtk.Method.set_property" value="loading"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2829">Sets whether @self is loading.

If set to `TRUE`, [class@TabBar] and [class@TabOverview] will display a
spinner in place of icon.

If the page is pinned and [property@TabPage:indicator-icon] is set, loading
status will not be visible with `AdwTabBar`.</doc>
        <source-position filename="src/adw-tab-view.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2831">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="loading" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2832">whether @self is loading</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_attention"
              c:identifier="adw_tab_page_set_needs_attention"
              glib:set-property="needs-attention">
        <attribute name="org.gtk.Method.set_property" value="needs-attention"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3020">Sets whether @self needs attention.

[class@TabBar] will display a line under the tab representing the page if
set to `TRUE`. If the tab is not visible, the corresponding edge of the tab
bar will be highlighted.

[class@TabOverview] will display a dot in the corner of the thumbnail if set
to `TRUE`.

[class@TabButton] will display a dot if any of the pages that aren't
selected have [property@TabPage:needs-attention] set to `TRUE`.</doc>
        <source-position filename="src/adw-tab-view.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3022">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="needs_attention" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3023">whether @self needs attention</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail_xalign"
              c:identifier="adw_tab_page_set_thumbnail_xalign"
              glib:set-property="thumbnail-xalign"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="thumbnail-xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3118">Sets the horizontal alignment of the thumbnail for @self.

If the page is so wide that [class@TabOverview] can't display it completely
and has to crop it, horizontal alignment will determine which part of the
page will be visible.

For example, 0.5 means the center of the page will be visible, 0 means the
start edge will be visible and 1 means the end edge will be visible.

The default horizontal alignment is 0.</doc>
        <source-position filename="src/adw-tab-view.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3120">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3121">the new value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail_yalign"
              c:identifier="adw_tab_page_set_thumbnail_yalign"
              glib:set-property="thumbnail-yalign"
              version="1.3">
        <attribute name="org.gtk.Method.set_property"
                   value="thumbnail-yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3170">Sets the vertical alignment of the thumbnail for @self.

If the page is so tall that [class@TabOverview] can't display it completely
and has to crop it, vertical alignment will determine which part of the page
will be visible.

For example, 0.5 means the center of the page will be visible, 0 means the
top edge will be visible and 1 means the bottom edge will be visible.

The default vertical alignment is 0.</doc>
        <source-position filename="src/adw-tab-view.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3172">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3173">the new value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_tab_page_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2693">[class@TabBar] will display it in the center of the tab unless it's pinned,
and will use it as a tooltip unless [property@TabPage:tooltip] is set.

[class@TabOverview] will display it below the thumbnail unless it's pinned,
or inside the card otherwise, and will use it as a tooltip unless
[property@TabPage:tooltip] is set.

Sets the title of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2695">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2696">the title of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip"
              c:identifier="adw_tab_page_set_tooltip"
              glib:set-property="tooltip">
        <attribute name="org.gtk.Method.set_property" value="tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2742">Sets the tooltip of @self.

The tooltip can be marked up with the Pango text markup language.

If not set, [class@TabBar] and [class@TabOverview] will use
[property@TabPage:title] as a tooltip instead.</doc>
        <source-position filename="src/adw-tab-view.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2744">a tab page</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </instance-parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2745">the tooltip of @self</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get" value="adw_tab_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="553">The child of the page.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <attribute name="org.gtk.Property.get" value="adw_tab_page_get_icon"/>
        <attribute name="org.gtk.Property.set" value="adw_tab_page_set_icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="629">The icon of the page.

[class@TabBar] and [class@TabOverview] display the icon next to the title,
unless [property@TabPage:loading] is set to `TRUE`.

`AdwTabBar` also won't show the icon if the page is pinned and
[propertyTabPage:indicator-icon] is set.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="indicator-activatable"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_activatable"
                getter="get_indicator_activatable"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_indicator_activatable"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_indicator_activatable"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="703">Whether the indicator icon is activatable.

If set to `TRUE`, [signal@TabView::indicator-activated] will be emitted
when the indicator icon is clicked.

If [property@TabPage:indicator-icon] is not set, does nothing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="indicator-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_icon"
                getter="get_indicator_icon">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_indicator_icon"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_indicator_icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="661">An indicator icon for the page.

A common use case is an audio or camera indicator in a web browser.

[class@TabBar] will show it at the beginning of the tab, alongside icon
representing [property@TabPage:icon] or loading spinner.

If the page is pinned, the indicator will be shown instead of icon or
spinner.

[class@TabOverview] will show it at the at the top part of the thumbnail.

[property@TabPage:indicator-tooltip] can be used to set the tooltip on the
indicator icon.

If [property@TabPage:indicator-activatable] is set to `TRUE`, the
indicator icon can act as a button.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="indicator-tooltip"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_tooltip"
                getter="get_indicator_tooltip">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_indicator_tooltip"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_indicator_tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="687">The tooltip of the indicator icon.

The tooltip can be marked up with the Pango text markup language.

See [property@TabPage:indicator-icon].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="keyword"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_keyword"
                getter="get_keyword">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_keyword"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_keyword"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="738">The search keyboard of the page.

[class@TabOverview] can search pages by their keywords in addition to their
titles and tooltips.

Keywords allow to include e.g. page URLs into tab search in a web browser.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="live-thumbnail"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_live_thumbnail"
                getter="get_live_thumbnail"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_live_thumbnail"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_live_thumbnail"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="799">Whether to enable live thumbnail for this page.

When set to `TRUE`, the page's thumbnail in [class@TabOverview] will update
immediately when the page is redrawn or resized.

If it's set to `FALSE`, the thumbnail will only be live when the page is
selected, and otherwise it will be static and will only update when
[method@TabPage.invalidate_thumbnail] or
[method@TabView.invalidate_thumbnails] is called.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="loading"
                writable="1"
                transfer-ownership="none"
                setter="set_loading"
                getter="get_loading"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_loading"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_loading"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="645">Whether the page is loading.

If set to `TRUE`, [class@TabBar] and [class@TabOverview] will display a
spinner in place of icon.

If the page is pinned and [property@TabPage:indicator-icon] is set,
loading status will not be visible with `AdwTabBar`.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="needs-attention"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_attention"
                getter="get_needs_attention"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_needs_attention"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_needs_attention"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="718">Whether the page needs attention.

[class@TabBar] will display a line under the tab representing the page if
set to `TRUE`. If the tab is not visible, the corresponding edge of the tab
bar will be highlighted.

[class@TabOverview] will display a dot in the corner of the thumbnail if set
to `TRUE`.

[class@TabButton] will display a dot if any of the pages that aren't
selected have this property set to `TRUE`.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_parent">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_parent"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="563">The parent page of the page.

See [method@TabView.add_page] and [method@TabView.close_page].</doc>
        <type name="TabPage"/>
      </property>
      <property name="pinned"
                transfer-ownership="none"
                getter="get_pinned"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_pinned"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="585">Whether the page is pinned.

See [method@TabView.set_page_pinned].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="selected"
                transfer-ownership="none"
                getter="get_selected"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_selected"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="575">Whether the page is selected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="thumbnail-xalign"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_thumbnail_xalign"
                getter="get_thumbnail_xalign"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_thumbnail_xalign"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_thumbnail_xalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="755">The horizontal alignment of the page thumbnail.

If the page is so wide that [class@TabOverview] can't display it completely
and has to crop it, horizontal alignment will determine which part of the
page will be visible.

For example, 0.5 means the center of the page will be visible, 0 means the
start edge will be visible and 1 means the end edge will be visible.

The default horizontal alignment is 0.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="thumbnail-yalign"
                version="1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_thumbnail_yalign"
                getter="get_thumbnail_yalign"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_thumbnail_yalign"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_thumbnail_yalign"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="777">The vertical alignment of the page thumbnail.

If the page is so tall that [class@TabOverview] can't display it completely
and has to crop it, vertical alignment will determine which part of the
page will be visible.

For example, 0.5 means the center of the page will be visible, 0 means the
top edge will be visible and 1 means the bottom edge will be visible.

The default vertical alignment is 0.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get" value="adw_tab_page_get_title"/>
        <attribute name="org.gtk.Property.set" value="adw_tab_page_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="597">The title of the page.

[class@TabBar] will display it in the center of the tab unless it's pinned,
and will use it as a tooltip unless [property@TabPage:tooltip] is set.

[class@TabOverview] will display it below the thumbnail unless it's pinned,
or inside the card otherwise, and will use it as a tooltip unless
[property@TabPage:tooltip] is set.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tooltip"
                writable="1"
                transfer-ownership="none"
                setter="set_tooltip"
                getter="get_tooltip">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_page_get_tooltip"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_page_set_tooltip"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="614">The tooltip of the page.

The tooltip can be marked up with the Pango text markup language.

If not set, [class@TabBar] and [class@TabOverview] will use
[property@TabPage:title] as a tooltip instead.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TabPageClass"
            c:type="AdwTabPageClass"
            glib:is-gtype-struct-for="TabPage">
      <source-position filename="src/adw-tab-view.h" line="42"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TabView"
           c:symbol-prefix="tab_view"
           c:type="AdwTabView"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwTabView"
           glib:get-type="adw_tab_view_get_type"
           glib:type-struct="TabViewClass">
      <doc xml:space="preserve"
           filename="src/adw-tab-view.c"
           line="26">A dynamic tabbed container.

`AdwTabView` is a container which shows one child at a time. While it
provides keyboard shortcuts for switching between pages, it does not provide
a visible tab switcher and relies on external widgets for that, such as
[class@TabBar], [class@TabOverview] and [class@TabButton].

`AdwTabView` maintains a [class@TabPage] object for each page, which holds
additional per-page properties. You can obtain the `AdwTabPage` for a page
with [method@TabView.get_page], and as the return value for
[method@TabView.append] and other functions for adding children.

`AdwTabView` only aims to be useful for dynamic tabs in multi-window
document-based applications, such as web browsers, file managers, text
editors or terminals. It does not aim to replace [class@Gtk.Notebook] for use
cases such as tabbed dialogs.

As such, it does not support disabling page reordering or detaching.

`AdwTabView` adds a number of global page switching and reordering shortcuts.
The [property@TabView:shortcuts] property can be used to manage them.

See [flags@TabViewShortcuts] for the list of the available shortcuts. All of
the shortcuts are enabled by default.

[method@TabView.add_shortcuts] and [method@TabView.remove_shortcuts] can be
used to manage shortcuts in a convenient way, for example:

```c
adw_tab_view_remove_shortcuts (view, ADW_TAB_VIEW_SHORTCUT_CONTROL_HOME |
                                     ADW_TAB_VIEW_SHORTCUT_CONTROL_END);
```

## CSS nodes

`AdwTabView` has a main CSS node with the name `tabview`.

## Accessibility

`AdwTabView` uses the `GTK_ACCESSIBLE_ROLE_TAB_PANEL` for the tab pages which
are the accessible parent objects of the child widgets.</doc>
      <source-position filename="src/adw-tab-view.h" line="134"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_tab_view_new">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3294">Creates a new `AdwTabView`.</doc>
        <source-position filename="src/adw-tab-view.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3299">the newly created `AdwTabView`</doc>
          <type name="TabView" c:type="AdwTabView*"/>
        </return-value>
      </constructor>
      <method name="add_page" c:identifier="adw_tab_view_add_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3877">Adds @child to @self with @parent as the parent.

This function can be used to automatically position new pages, and to select
the correct page when this page is closed while being selected (see
[method@TabView.close_page]).

If @parent is `NULL`, this function is equivalent to [method@TabView.append].</doc>
        <source-position filename="src/adw-tab-view.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3891">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3879">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3880">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3881">a parent page for @child</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shortcuts"
              c:identifier="adw_tab_view_add_shortcuts"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3673">Adds @shortcuts for @self.

See [property@TabView:shortcuts] for details.</doc>
        <source-position filename="src/adw-tab-view.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3675">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3676">the shortcuts to add</doc>
            <type name="TabViewShortcuts" c:type="AdwTabViewShortcuts"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="adw_tab_view_append">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3974">Inserts @child as the last non-pinned page.</doc>
        <source-position filename="src/adw-tab-view.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3981">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3976">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3977">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_pinned" c:identifier="adw_tab_view_append_pinned">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4038">Inserts @child as the last pinned page.</doc>
        <source-position filename="src/adw-tab-view.h" line="223"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4045">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4040">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4041">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_other_pages"
              c:identifier="adw_tab_view_close_other_pages">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4138">Requests to close all pages other than @page.</doc>
        <source-position filename="src/adw-tab-view.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4140">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4141">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_page" c:identifier="adw_tab_view_close_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4057">Requests to close @page.

Calling this function will result in the [signal@TabView::close-page] signal
being emitted for @page. Closing the page can then be confirmed or
denied via [method@TabView.close_page_finish].

If the page is waiting for a [method@TabView.close_page_finish] call, this
function will do nothing.

The default handler for [signal@TabView::close-page] will immediately confirm
closing the page if it's non-pinned, or reject it if it's pinned. This
behavior can be changed by registering your own handler for that signal.

If @page was selected, another page will be selected instead:

If the [property@TabPage:parent] value is `NULL`, the next page will be
selected when possible, or if the page was already last, the previous page
will be selected instead.

If it's not `NULL`, the previous page will be selected if it's a descendant
(possibly indirect) of the parent. If both the previous page and the parent
are pinned, the parent will be selected instead.</doc>
        <source-position filename="src/adw-tab-view.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4059">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4060">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_page_finish"
              c:identifier="adw_tab_view_close_page_finish">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4102">Completes a [method@TabView.close_page] call for @page.

If @confirm is `TRUE`, @page will be closed. If it's `FALSE`, it will be
reverted to its previous state and [method@TabView.close_page] can be called
for it again.

This function should not be called unless a custom handler for
[signal@TabView::close-page] is used.</doc>
        <source-position filename="src/adw-tab-view.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4104">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4105">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
          <parameter name="confirm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4106">whether to confirm or deny closing @page</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_pages_after"
              c:identifier="adw_tab_view_close_pages_after">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4191">Requests to close all pages after @page.</doc>
        <source-position filename="src/adw-tab-view.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4193">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4194">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_pages_before"
              c:identifier="adw_tab_view_close_pages_before">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4165">Requests to close all pages before @page.</doc>
        <source-position filename="src/adw-tab-view.h" line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4167">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4168">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_icon"
              c:identifier="adw_tab_view_get_default_icon"
              glib:get-property="default-icon">
        <attribute name="org.gtk.Method.get_property" value="default-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3526">Gets the default icon of @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3532">the default icon of @self.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3528">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_transferring_page"
              c:identifier="adw_tab_view_get_is_transferring_page"
              glib:get-property="is-transferring-page">
        <attribute name="org.gtk.Method.get_property"
                   value="is-transferring-page"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3341">Whether a page is being transferred.

The corresponding property will be set to `TRUE` when a drag-n-drop tab
transfer starts on any `AdwTabView`, and to `FALSE` after it ends.

During the transfer, children cannot receive pointer input and a tab can
be safely dropped on the tab view.</doc>
        <source-position filename="src/adw-tab-view.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3353">whether a page is being transferred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3343">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="adw_tab_view_get_menu_model"
              glib:get-property="menu-model">
        <attribute name="org.gtk.Method.get_property" value="menu-model"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3583">Gets the tab context menu model for @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="165"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3589">the tab context menu model for @self</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3585">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="adw_tab_view_get_n_pages"
              glib:get-property="n-pages">
        <attribute name="org.gtk.Method.get_property" value="n-pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3307">Gets the number of pages in @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3313">the number of pages in @self</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3309">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pinned_pages"
              c:identifier="adw_tab_view_get_n_pinned_pages"
              glib:get-property="n-pinned-pages">
        <attribute name="org.gtk.Method.get_property" value="n-pinned-pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3323">Gets the number of pinned pages in @self.

See [method@TabView.set_page_pinned].</doc>
        <source-position filename="src/adw-tab-view.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3331">the number of pinned pages in @self</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3325">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_page" c:identifier="adw_tab_view_get_nth_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3822">Gets the [class@TabPage] representing the child at @position.</doc>
        <source-position filename="src/adw-tab-view.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3829">the page object at @position</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3824">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3825">the index of the page in @self, starting from 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="adw_tab_view_get_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3793">Gets the [class@TabPage] object representing @child.</doc>
        <source-position filename="src/adw-tab-view.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3800">the page object for @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3795">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3796">a child in @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_position"
              c:identifier="adw_tab_view_get_page_position">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3848">Finds the position of @page in @self, starting from 0.</doc>
        <source-position filename="src/adw-tab-view.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3855">the position of @page in @self</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3850">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3851">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="adw_tab_view_get_pages"
              glib:get-property="pages">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4463">Returns a [iface@Gio.ListModel] that contains the pages of @self.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the selected
page.</doc>
        <source-position filename="src/adw-tab-view.h" line="268"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4473">a `GtkSelectionModel` for the pages of @self</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4465">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_page"
              c:identifier="adw_tab_view_get_selected_page"
              glib:get-property="selected-page">
        <attribute name="org.gtk.Method.get_property" value="selected-page"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3363">Gets the currently selected page in @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="148"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3369">the selected page</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3365">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortcuts"
              c:identifier="adw_tab_view_get_shortcuts"
              glib:get-property="shortcuts"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="shortcuts"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3625">Gets the enabled shortcuts for @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3631">the shortcut mask</doc>
          <type name="TabViewShortcuts" c:type="AdwTabViewShortcuts"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3627">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="adw_tab_view_insert">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3929">Inserts a non-pinned page at @position.

It's an error to try to insert a page before a pinned page, in that case
[method@TabView.insert_pinned] should be used instead.</doc>
        <source-position filename="src/adw-tab-view.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3940">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3931">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3932">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3933">the position to add @child at, starting from 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_pinned" c:identifier="adw_tab_view_insert_pinned">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3993">Inserts a pinned page at @position.

It's an error to try to insert a pinned page after a non-pinned page, in
that case [method@TabView.insert] should be used instead.</doc>
        <source-position filename="src/adw-tab-view.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4004">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3995">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3996">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3997">the position to add @child at, starting from 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_thumbnails"
              c:identifier="adw_tab_view_invalidate_thumbnails"
              version="1.3">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4490">Invalidates thumbnails for all pages in @self.

This is a convenience method, equivalent to calling
[method@TabPage.invalidate_thumbnail] on each page.</doc>
        <source-position filename="src/adw-tab-view.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4492">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="adw_tab_view_prepend">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3955">Inserts @child as the first non-pinned page.</doc>
        <source-position filename="src/adw-tab-view.h" line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3962">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3957">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3958">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_pinned" c:identifier="adw_tab_view_prepend_pinned">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4019">Inserts @child as the first pinned page.</doc>
        <source-position filename="src/adw-tab-view.h" line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4026">the page object representing @child</doc>
          <type name="TabPage" c:type="AdwTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4021">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4022">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_shortcuts"
              c:identifier="adw_tab_view_remove_shortcuts"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3694">Removes @shortcuts from @self.

See [property@TabView:shortcuts] for details.</doc>
        <source-position filename="src/adw-tab-view.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3696">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3697">the shortcuts to reomve</doc>
            <type name="TabViewShortcuts" c:type="AdwTabViewShortcuts"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_backward"
              c:identifier="adw_tab_view_reorder_backward">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4273">Reorders @page to before its previous page if possible.</doc>
        <source-position filename="src/adw-tab-view.h" line="249"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4280">whether @page was moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4275">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4276">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_first" c:identifier="adw_tab_view_reorder_first">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4335">Reorders @page to the first possible position.</doc>
        <source-position filename="src/adw-tab-view.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4342">whether @page was moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4337">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4338">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_forward"
              c:identifier="adw_tab_view_reorder_forward">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4304">Reorders @page to after its next page if possible.</doc>
        <source-position filename="src/adw-tab-view.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4311">whether @page was moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4306">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4307">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_last" c:identifier="adw_tab_view_reorder_last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4361">Reorders @page to the last possible position.</doc>
        <source-position filename="src/adw-tab-view.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4368">whether @page was moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4363">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4364">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_page" c:identifier="adw_tab_view_reorder_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4217">Reorders @page to @position.

It's a programmer error to try to reorder a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.</doc>
        <source-position filename="src/adw-tab-view.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="4228">whether @page was moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4219">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4220">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4221">the position to insert the page at, starting at 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_next_page"
              c:identifier="adw_tab_view_select_next_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3435">Selects the page after the currently selected page.

If the last page was already selected, this function does nothing.</doc>
        <source-position filename="src/adw-tab-view.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3443">whether the selected page was changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3437">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_previous_page"
              c:identifier="adw_tab_view_select_previous_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3402">Selects the page before the currently selected page.

If the first page was already selected, this function does nothing.</doc>
        <source-position filename="src/adw-tab-view.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="3410">whether the selected page was changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3404">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_icon"
              c:identifier="adw_tab_view_set_default_icon"
              glib:set-property="default-icon">
        <attribute name="org.gtk.Method.set_property" value="default-icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3542">Sets the default page icon for @self.

If a page doesn't provide its own icon via [property@TabPage:icon], a default
icon may be used instead for contexts where having an icon is necessary.

[class@TabBar] will use default icon for pinned tabs in case the page is not
loading, doesn't have an icon and an indicator. Default icon is never used
for tabs that aren't pinned.

[class@TabOverview] will use default icon for pages with missing thumbnails.

By default, the `adw-tab-icon-missing-symbolic` icon is used.</doc>
        <source-position filename="src/adw-tab-view.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3544">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="default_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3545">the default icon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_model"
              c:identifier="adw_tab_view_set_menu_model"
              glib:set-property="menu-model">
        <attribute name="org.gtk.Method.set_property" value="menu-model"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3599">Sets the tab context menu model for @self.

When a context menu is shown for a tab, it will be constructed from the
provided menu model. Use the [signal@TabView::setup-menu] signal to set up
the menu actions for the particular tab.</doc>
        <source-position filename="src/adw-tab-view.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3601">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="menu_model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3602">a menu model</doc>
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_pinned"
              c:identifier="adw_tab_view_set_page_pinned">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3715">Pins or unpins @page.

Pinned pages are guaranteed to be placed before all non-pinned pages; at any
given moment the first [property@TabView:n-pinned-pages] pages in @self are
guaranteed to be pinned.

When a page is pinned or unpinned, it's automatically reordered: pinning a
page moves it after other pinned pages; unpinning a page moves it before
other non-pinned pages.

Pinned pages can still be reordered between each other.

[class@TabBar] will display pinned pages in a compact form, never showing the
title or close button, and only showing a single icon, selected in the
following order:

1. [property@TabPage:indicator-icon]
2. A spinner if [property@TabPage:loading] is `TRUE`
3. [property@TabPage:icon]
4. [property@TabView:default-icon]

[class@TabOverview] will not show a thumbnail for pinned pages, and replace
the close button with an unpin button. Unlike `AdwTabBar`, it will still
display the page's title, icon and indicator separately.

Pinned pages cannot be closed by default, see [signal@TabView::close-page]
for how to override that behavior.

Changes the value of the [property@TabPage:pinned] property.</doc>
        <source-position filename="src/adw-tab-view.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3717">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3718">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
          <parameter name="pinned" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3719">whether @page should be pinned</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_page"
              c:identifier="adw_tab_view_set_selected_page"
              glib:set-property="selected-page">
        <attribute name="org.gtk.Method.set_property" value="selected-page"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3379">Sets the currently selected page in @self.</doc>
        <source-position filename="src/adw-tab-view.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3381">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="selected_page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3382">a page in @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shortcuts"
              c:identifier="adw_tab_view_set_shortcuts"
              glib:set-property="shortcuts"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="shortcuts"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="3643">Sets the enabled shortcuts for @self.

See [flags@TabViewShortcuts] for the list of the available shortcuts. All of
the shortcuts are enabled by default.

[method@TabView.add_shortcuts] and [method@TabView.remove_shortcuts] provide
a convenient way to manage individual shortcuts.</doc>
        <source-position filename="src/adw-tab-view.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3645">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="3646">the new shortcuts</doc>
            <type name="TabViewShortcuts" c:type="AdwTabViewShortcuts"/>
          </parameter>
        </parameters>
      </method>
      <method name="transfer_page" c:identifier="adw_tab_view_transfer_page">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="4425">Transfers @page from @self to @other_view.

The @page object will be reused.

It's a programmer error to try to insert a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.</doc>
        <source-position filename="src/adw-tab-view.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4427">a tab view</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4428">a page of @self</doc>
            <type name="TabPage" c:type="AdwTabPage*"/>
          </parameter>
          <parameter name="other_view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4429">the tab view to transfer the page to</doc>
            <type name="TabView" c:type="AdwTabView*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="4430">the position to insert the page at, starting at 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_default_icon"
                getter="get_default_icon">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_default_icon"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_view_set_default_icon"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2294">Default page icon.

If a page doesn't provide its own icon via [property@TabPage:icon], a
default icon may be used instead for contexts where having an icon is
necessary.

[class@TabBar] will use default icon for pinned tabs in case the page is
not loading, doesn't have an icon and an indicator. Default icon is never
used for tabs that aren't pinned.

[class@TabOverview] will use default icon for pages with missing
thumbnails.

By default, the `adw-tab-icon-missing-symbolic` icon is used.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="is-transferring-page"
                transfer-ownership="none"
                getter="get_is_transferring_page"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_is_transferring_page"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2268">Whether a page is being transferred.

This property will be set to `TRUE` when a drag-n-drop tab transfer starts
on any `AdwTabView`, and to `FALSE` after it ends.

During the transfer, children cannot receive pointer input and a tab can
be safely dropped on the tab view.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="menu-model"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_model"
                getter="get_menu_model">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_menu_model"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_view_set_menu_model"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2317">Tab context menu model.

When a context menu is shown for a tab, it will be constructed from the
provided menu model. Use the [signal@TabView::setup-menu] signal to set up
the menu actions for the particular tab.</doc>
        <type name="Gio.MenuModel"/>
      </property>
      <property name="n-pages"
                transfer-ownership="none"
                getter="get_n_pages"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_n_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2246">The number of pages in the tab view.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="n-pinned-pages"
                transfer-ownership="none"
                getter="get_n_pinned_pages"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_n_pinned_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2256">The number of pinned pages in the tab view.

See [method@TabView.set_page_pinned].</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pages" transfer-ownership="none" getter="get_pages">
        <attribute name="org.gtk.Property.get" value="adw_tab_view_get_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2350">A selection model with the tab view's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the selected
page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="selected-page"
                writable="1"
                transfer-ownership="none"
                setter="set_selected_page"
                getter="get_selected_page">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_selected_page"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_view_set_selected_page"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2284">The currently selected page.</doc>
        <type name="TabPage"/>
      </property>
      <property name="shortcuts"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_shortcuts"
                getter="get_shortcuts"
                default-value="ADW_TAB_VIEW_SHORTCUT_CONTROL_TAB | ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_TAB | ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_UP | ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_DOWN | ADW_TAB_VIEW_SHORTCUT_CONTROL_HOME | ADW_TAB_VIEW_SHORTCUT_CONTROL_END | ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_UP | ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_DOWN | ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_HOME | ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_END | ADW_TAB_VIEW_SHORTCUT_ALT_DIGITS | ADW_TAB_VIEW_SHORTCUT_ALT_ZERO">
        <attribute name="org.gtk.Property.get"
                   value="adw_tab_view_get_shortcuts"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_tab_view_set_shortcuts"/>
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2331">The enabled shortcuts.

See [flags@TabViewShortcuts] for the list of the available shortcuts. All
of the shortcuts are enabled by default.

[method@TabView.add_shortcuts] and [method@TabView.remove_shortcuts]
provide a convenient way to manage individual shortcuts.</doc>
        <type name="TabViewShortcuts"/>
      </property>
      <glib:signal name="close-page" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2431">Emitted after [method@TabView.close_page] has been called for @page.

The handler is expected to call [method@TabView.close_page_finish] to
confirm or reject the closing.

The default handler will immediately confirm closing for non-pinned pages,
or reject it for pinned pages, equivalent to the following example:

```c
static gboolean
close_page_cb (AdwTabView *view,
               AdwTabPage *page,
               gpointer    user_data)
{
  adw_tab_view_close_page_finish (view, page, !adw_tab_page_get_pinned (page));

  return GDK_EVENT_STOP;
}
```

The [method@TabView.close_page_finish] call doesn't have to happen inside
the handler, so can be used to do asynchronous checks before confirming the
closing.

A typical reason to connect to this signal is to show a confirmation dialog
for closing a tab.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2434">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-window" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2496">Emitted when a tab should be transferred into a new window.

This can happen after a tab has been dropped on desktop.

The signal handler is expected to create a new window, position it as
needed and return its `AdwTabView` that the page will be transferred into.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-tab-view.c"
               line="2507">the `AdwTabView` from the new window</doc>
          <type name="TabView"/>
        </return-value>
      </glib:signal>
      <glib:signal name="indicator-activated" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2519">Emitted after the indicator icon on @page has been activated.

See [property@TabPage:indicator-icon] and
[property@TabPage:indicator-activatable].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2522">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-attached" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2366">Emitted when a page has been created or transferred to @self.

A typical reason to connect to this signal would be to connect to page
signals for things such as updating window title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2369">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2370">the position of the page, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-detached" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2387">Emitted when a page has been removed or transferred to another view.

A typical reason to connect to this signal would be to disconnect signal
handlers connected in the [signal@TabView::page-attached] handler.

It is important not to try and destroy the page child in the handler of
this function as the child might merely be moved to another window; use
child dispose handler for that or do it in sync with your
[method@TabView.close_page_finish] calls.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2390">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2391">the position of the removed page, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-reordered" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2413">Emitted after @page has been reordered to @position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2416">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2417">the position @page was moved to, starting at 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="setup-menu" when="last">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="2474">Emitted when a context menu is opened or closed for @page.

If the menu has been closed, @page will be set to `NULL`.

It can be used to set up menu actions before showing the menu, for example
disable actions not applicable to @page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-tab-view.c"
                 line="2477">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabViewClass"
            c:type="AdwTabViewClass"
            glib:is-gtype-struct-for="TabView">
      <source-position filename="src/adw-tab-view.h" line="134"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <bitfield name="TabViewShortcuts"
              version="1.2"
              glib:type-name="AdwTabViewShortcuts"
              glib:get-type="adw_tab_view_shortcuts_get_type"
              c:type="AdwTabViewShortcuts">
      <doc xml:space="preserve"
           filename="src/adw-tab-view.c"
           line="78">Describes available shortcuts in an [class@TabView].

Shortcuts can be set with [property@TabView:shortcuts], or added/removed
individually with [method@TabView.add_shortcuts] and
[method@TabView.remove_shortcuts].

New values may be added to this enumeration over time.</doc>
      <member name="none"
              value="0"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_NONE"
              glib:nick="none"
              glib:name="ADW_TAB_VIEW_SHORTCUT_NONE">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="80">No shortcuts</doc>
      </member>
      <member name="control_tab"
              value="1"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_TAB"
              glib:nick="control-tab"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_TAB">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="81">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; - switch to the next page, with looping</doc>
      </member>
      <member name="control_shift_tab"
              value="2"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_TAB"
              glib:nick="control-shift-tab"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_TAB">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="83">&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; - switch to the previous
  page, with looping</doc>
      </member>
      <member name="control_page_up"
              value="4"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_UP"
              glib:nick="control-page-up"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_UP">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="86">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Page Up&lt;/kbd&gt; - switch to the previous page</doc>
      </member>
      <member name="control_page_down"
              value="8"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_DOWN"
              glib:nick="control-page-down"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_DOWN">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="88">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Page Down&lt;/kbd&gt; - switch to the next page</doc>
      </member>
      <member name="control_home"
              value="16"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_HOME"
              glib:nick="control-home"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_HOME">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="90">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Home&lt;/kbd&gt; - switch to the first page</doc>
      </member>
      <member name="control_end"
              value="32"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_END"
              glib:nick="control-end"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_END">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="92">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;End&lt;/kbd&gt; - switch to the last page</doc>
      </member>
      <member name="control_shift_page_up"
              value="64"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_UP"
              glib:nick="control-shift-page-up"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_UP">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="94">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Page Up&lt;/kbd&gt; - move the selected
  page backward</doc>
      </member>
      <member name="control_shift_page_down"
              value="128"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_DOWN"
              glib:nick="control-shift-page-down"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_DOWN">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="97">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Page Down&lt;/kbd&gt; - move the selected
  page forward</doc>
      </member>
      <member name="control_shift_home"
              value="256"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_HOME"
              glib:nick="control-shift-home"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_HOME">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="100">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Home&lt;/kbd&gt; - move the selected page
  at the start</doc>
      </member>
      <member name="control_shift_end"
              value="512"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_END"
              glib:nick="control-shift-end"
              glib:name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_END">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="103">&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;End&lt;/kbd&gt; - move the current page at
  the end</doc>
      </member>
      <member name="alt_digits"
              value="1024"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_ALT_DIGITS"
              glib:nick="alt-digits"
              glib:name="ADW_TAB_VIEW_SHORTCUT_ALT_DIGITS">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="106">&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;1&lt;/kbd&gt;⋯&lt;kbd&gt;9&lt;/kbd&gt; - switch to pages 1-9</doc>
      </member>
      <member name="alt_zero"
              value="2048"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_ALT_ZERO"
              glib:nick="alt-zero"
              glib:name="ADW_TAB_VIEW_SHORTCUT_ALT_ZERO">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="108">&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;0&lt;/kbd&gt; - switch to page 10</doc>
      </member>
      <member name="all_shortcuts"
              value="4095"
              c:identifier="ADW_TAB_VIEW_SHORTCUT_ALL_SHORTCUTS"
              glib:nick="all-shortcuts"
              glib:name="ADW_TAB_VIEW_SHORTCUT_ALL_SHORTCUTS">
        <doc xml:space="preserve"
             filename="src/adw-tab-view.c"
             line="110">All of the shortcuts</doc>
      </member>
    </bitfield>
    <class name="TimedAnimation"
           c:symbol-prefix="timed_animation"
           c:type="AdwTimedAnimation"
           parent="Animation"
           final="1"
           glib:type-name="AdwTimedAnimation"
           glib:get-type="adw_timed_animation_get_type"
           glib:type-struct="TimedAnimationClass">
      <doc xml:space="preserve"
           filename="src/adw-timed-animation.c"
           line="14">A time-based [class@Animation].

`AdwTimedAnimation` implements a simple animation interpolating the given
value from [property@TimedAnimation:value-from] to
[property@TimedAnimation:value-to] over
[property@TimedAnimation:duration] milliseconds using the curve described by
[property@TimedAnimation:easing].

If [property@TimedAnimation:reverse] is set to `TRUE`, `AdwTimedAnimation`
will instead animate from [property@TimedAnimation:value-to] to
[property@TimedAnimation:value-from], and the easing curve will be inverted.

The animation can repeat a certain amount of times, or endlessly, depending
on the [property@TimedAnimation:repeat-count] value. If
[property@TimedAnimation:alternate] is set to `TRUE`, it will also change the
direction every other iteration.</doc>
      <source-position filename="src/adw-timed-animation.h" line="25"/>
      <constructor name="new" c:identifier="adw_timed_animation_new">
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="320">Creates a new `AdwTimedAnimation` on @widget to animate @target from @from
to @to.</doc>
        <source-position filename="src/adw-timed-animation.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="331">the newly created animation</doc>
          <type name="Animation" c:type="AdwAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="322">a widget to create animation on</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="323">a value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="324">a value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="325">a duration for the animation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="target" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="326">a target value to animate</doc>
            <type name="AnimationTarget" c:type="AdwAnimationTarget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_alternate"
              c:identifier="adw_timed_animation_get_alternate"
              glib:get-property="alternate">
        <attribute name="org.gtk.Method.get_property" value="alternate"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="600">Gets whether @self changes direction on every iteration.</doc>
        <source-position filename="src/adw-timed-animation.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="606">whether @self alternates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="602">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="adw_timed_animation_get_duration"
              glib:get-property="duration">
        <attribute name="org.gtk.Method.get_property" value="duration"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="444">Gets the duration of @self.</doc>
        <source-position filename="src/adw-timed-animation.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="450">the duration of @self, in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="446">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_easing"
              c:identifier="adw_timed_animation_get_easing"
              glib:get-property="easing">
        <attribute name="org.gtk.Method.get_property" value="easing"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="483">Gets the easing function @self uses.</doc>
        <source-position filename="src/adw-timed-animation.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="489">the easing function @self uses</doc>
          <type name="Easing" c:type="AdwEasing"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="485">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_repeat_count"
              c:identifier="adw_timed_animation_get_repeat_count"
              glib:get-property="repeat-count">
        <attribute name="org.gtk.Method.get_property" value="repeat-count"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="524">Gets the number of times @self will play.</doc>
        <source-position filename="src/adw-timed-animation.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="530">the number of times @self will play</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="526">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reverse"
              c:identifier="adw_timed_animation_get_reverse"
              glib:get-property="reverse">
        <attribute name="org.gtk.Method.get_property" value="reverse"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="563">Gets whether @self plays backwards.</doc>
        <source-position filename="src/adw-timed-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="569">whether @self plays backwards</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="565">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_from"
              c:identifier="adw_timed_animation_get_value_from"
              glib:get-property="value-from">
        <attribute name="org.gtk.Method.get_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="358">Gets the value @self will animate from.</doc>
        <source-position filename="src/adw-timed-animation.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="364">the value to animate from</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="360">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_to"
              c:identifier="adw_timed_animation_get_value_to"
              glib:get-property="value-to">
        <attribute name="org.gtk.Method.get_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="401">Gets the value @self will animate to.</doc>
        <source-position filename="src/adw-timed-animation.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-timed-animation.c"
               line="407">the value to animate to</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="403">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alternate"
              c:identifier="adw_timed_animation_set_alternate"
              glib:set-property="alternate">
        <attribute name="org.gtk.Method.set_property" value="alternate"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="616">Sets whether @self changes direction on every iteration.</doc>
        <source-position filename="src/adw-timed-animation.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="618">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="alternate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="619">whether @self alternates</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duration"
              c:identifier="adw_timed_animation_set_duration"
              glib:set-property="duration">
        <attribute name="org.gtk.Method.set_property" value="duration"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="460">Sets the duration of @self.

If the animation repeats more than once, sets the duration of one iteration.</doc>
        <source-position filename="src/adw-timed-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="462">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="463">the duration to use, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_easing"
              c:identifier="adw_timed_animation_set_easing"
              glib:set-property="easing">
        <attribute name="org.gtk.Method.set_property" value="easing"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="500">Sets the easing function @self will use.

See [enum@Easing] for the description of specific easing functions.</doc>
        <source-position filename="src/adw-timed-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="502">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="easing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="503">the easing function to use</doc>
            <type name="Easing" c:type="AdwEasing"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_repeat_count"
              c:identifier="adw_timed_animation_set_repeat_count"
              glib:set-property="repeat-count">
        <attribute name="org.gtk.Method.set_property" value="repeat-count"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="540">Sets the number of times @self will play.

If set to 0, @self will repeat endlessly.</doc>
        <source-position filename="src/adw-timed-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="542">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="repeat_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="543">the number of times @self will play</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reverse"
              c:identifier="adw_timed_animation_set_reverse"
              glib:set-property="reverse">
        <attribute name="org.gtk.Method.set_property" value="reverse"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="579">Sets whether @self plays backwards.</doc>
        <source-position filename="src/adw-timed-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="581">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="582">whether @self plays backwards</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_from"
              c:identifier="adw_timed_animation_set_value_from"
              glib:set-property="value-from">
        <attribute name="org.gtk.Method.set_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="374">Sets the value @self will animate from.

The animation will start at this value and end at
[property@TimedAnimation:value-to].

If [property@TimedAnimation:reverse] is `TRUE`, the animation will end at
this value instead.</doc>
        <source-position filename="src/adw-timed-animation.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="376">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="377">the value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_to"
              c:identifier="adw_timed_animation_set_value_to"
              glib:set-property="value-to">
        <attribute name="org.gtk.Method.set_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="417">Sets the value @self will animate to.

The animation will start at [property@TimedAnimation:value-from] and end at
this value.

If [property@TimedAnimation:reverse] is `TRUE`, the animation will start
at this value instead.</doc>
        <source-position filename="src/adw-timed-animation.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="419">a timed animation</doc>
            <type name="TimedAnimation" c:type="AdwTimedAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-timed-animation.c"
                 line="420">the value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="alternate"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_alternate"
                getter="get_alternate"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_alternate"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_alternate"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="302">Whether the animation changes direction on every iteration.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="duration"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_duration"
                getter="get_duration"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_duration"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="246">Duration of the animation, in milliseconds.

Describes how much time the animation will take.

If the animation repeats more than once, describes the duration of one
iteration.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="easing"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_easing"
                getter="get_easing"
                default-value="ADW_EASE_OUT_CUBIC">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_easing"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_easing"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="263">Easing function used in the animation.

Describes the curve the value is interpolated on.

See [enum@Easing] for the description of specific easing functions.</doc>
        <type name="Easing"/>
      </property>
      <property name="repeat-count"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_repeat_count"
                getter="get_repeat_count"
                default-value="1">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_repeat_count"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_repeat_count"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="278">Number of times the animation will play.

If set to 0, the animation will repeat endlessly.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reverse"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_reverse"
                getter="get_reverse"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_reverse"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_reverse"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="292">Whether the animation plays backwards.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="value-from"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_from"
                getter="get_value_from"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_value_from"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_value_from"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="210">The value to animate from.

The animation will start at this value and end at
[property@TimedAnimation:value-to].

If [property@TimedAnimation:reverse] is `TRUE`, the animation will end at
this value instead.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value-to"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_to"
                getter="get_value_to"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="adw_timed_animation_get_value_to"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_timed_animation_set_value_to"/>
        <doc xml:space="preserve"
             filename="src/adw-timed-animation.c"
             line="228">The value to animate to.

The animation will start at [property@TimedAnimation:value-from] and end at
this value.

If [property@TimedAnimation:reverse] is `TRUE`, the animation will start
at this value instead.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="TimedAnimationClass"
            c:type="AdwTimedAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="TimedAnimation">
      <source-position filename="src/adw-timed-animation.h" line="25"/>
    </record>
    <class name="Toast"
           c:symbol-prefix="toast"
           c:type="AdwToast"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwToast"
           glib:get-type="adw_toast_get_type"
           glib:type-struct="ToastClass">
      <doc xml:space="preserve"
           filename="src/adw-toast.c"
           line="23">A helper object for [class@ToastOverlay].

Toasts are meant to be passed into [method@ToastOverlay.add_toast] as
follows:

```c
adw_toast_overlay_add_toast (overlay, adw_toast_new (_("Simple Toast")));
```

&lt;picture&gt;
  &lt;source srcset="toast-simple-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="toast-simple.png" alt="toast-simple"&gt;
&lt;/picture&gt;

Toasts always have a close button. They emit the [signal@Toast::dismissed]
signal when disappearing.

[property@Toast:timeout] determines how long the toast stays on screen, while
[property@Toast:priority] determines how it behaves if another toast is
already being displayed.

[property@Toast:custom-title] can be used to replace the title label with a
custom widget.

## Actions

Toasts can have one button on them, with a label and an attached
[iface@Gio.Action].

```c
AdwToast *toast = adw_toast_new (_("Toast with Action"));

adw_toast_set_button_label (toast, _("_Example"));
adw_toast_set_action_name (toast, "win.example");

adw_toast_overlay_add_toast (overlay, toast);
```

&lt;picture&gt;
  &lt;source srcset="toast-action-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="toast-action.png" alt="toast-action"&gt;
&lt;/picture&gt;

## Modifying toasts

Toasts can be modified after they have been shown. For this, an `AdwToast`
reference must be kept around while the toast is visible.

A common use case for this is using toasts as undo prompts that stack with
each other, allowing to batch undo the last deleted items:

```c

static void
toast_undo_cb (GtkWidget  *sender,
               const char *action,
               GVariant   *param)
{
  // Undo the deletion
}

static void
dismissed_cb (MyWindow *self)
{
  self-&gt;undo_toast = NULL;

  // Permanently delete the items
}

static void
delete_item (MyWindow *self,
             MyItem   *item)
{
  g_autofree char *title = NULL;
  int n_items;

  // Mark the item as waiting for deletion
  n_items = ... // The number of waiting items

  if (!self-&gt;undo_toast) {
    self-&gt;undo_toast = adw_toast_new_format (_("‘%s’ deleted"), ...);

    adw_toast_set_priority (self-&gt;undo_toast, ADW_TOAST_PRIORITY_HIGH);
    adw_toast_set_button_label (self-&gt;undo_toast, _("_Undo"));
    adw_toast_set_action_name (self-&gt;undo_toast, "toast.undo");

    g_signal_connect_swapped (self-&gt;undo_toast, "dismissed",
                              G_CALLBACK (dismissed_cb), self);

    adw_toast_overlay_add_toast (self-&gt;toast_overlay, self-&gt;undo_toast);

    return;
  }

  title =
    g_strdup_printf (ngettext ("&lt;span font_features='tnum=1'&gt;%d&lt;/span&gt; item deleted",
                               "&lt;span font_features='tnum=1'&gt;%d&lt;/span&gt; items deleted",
                               n_items), n_items);

  adw_toast_set_title (self-&gt;undo_toast, title);

  // Bump the toast timeout
  adw_toast_overlay_add_toast (self-&gt;toast_overlay, g_object_ref (self-&gt;undo_toast));
}

static void
my_window_class_init (MyWindowClass *klass)
{
  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);

  gtk_widget_class_install_action (widget_class, "toast.undo", NULL, toast_undo_cb);
}
```

&lt;picture&gt;
  &lt;source srcset="toast-undo-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="toast-undo.png" alt="toast-undo"&gt;
&lt;/picture&gt;</doc>
      <source-position filename="src/adw-toast.h" line="28"/>
      <constructor name="new" c:identifier="adw_toast_new">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="446">Creates a new `AdwToast`.

The toast will use @title as its title.

@title can be marked up with the Pango text markup language.</doc>
        <source-position filename="src/adw-toast.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="456">the new created `AdwToast`</doc>
          <type name="Toast" c:type="AdwToast*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="448">the title to be displayed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_format"
                   c:identifier="adw_toast_new_format"
                   version="1.2"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="468">Creates a new `AdwToast`.

The toast will use the format string as its title.

See also: [ctor@Toast.new]</doc>
        <source-position filename="src/adw-toast.h" line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="479">the newly created toast object</doc>
          <type name="Toast" c:type="AdwToast*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="470">the formatted string for the toast title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="471">the parameters to insert into the format string</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dismiss" c:identifier="adw_toast_dismiss">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="905">Dismisses @self.

Does nothing if @self has already been dismissed, or hasn't been added to an
[class@ToastOverlay].</doc>
        <source-position filename="src/adw-toast.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="907">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action_name"
              c:identifier="adw_toast_get_action_name"
              glib:get-property="action-name">
        <attribute name="org.gtk.Method.get_property" value="action-name"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="605">Gets the name of the associated action.</doc>
        <source-position filename="src/adw-toast.h" line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="611">the action name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="607">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action_target_value"
              c:identifier="adw_toast_get_action_target_value">
        <attribute name="org.gtk.Method.get_property" value="action-target"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="647">Gets the parameter for action invocations.</doc>
        <source-position filename="src/adw-toast.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="653">the action target</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="649">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_button_label"
              c:identifier="adw_toast_get_button_label"
              glib:get-property="button-label">
        <attribute name="org.gtk.Method.get_property" value="button-label"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="561">Gets the label to show on the button.</doc>
        <source-position filename="src/adw-toast.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="567">the button label</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="563">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_custom_title"
              c:identifier="adw_toast_get_custom_title"
              glib:get-property="custom-title"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="custom-title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="852">Gets the custom title widget of @self.</doc>
        <source-position filename="src/adw-toast.h" line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="858">the custom title widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="854">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="adw_toast_get_priority"
              glib:get-property="priority">
        <attribute name="org.gtk.Method.get_property" value="priority"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="762">Gets priority for @self.</doc>
        <source-position filename="src/adw-toast.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="768">the priority</doc>
          <type name="ToastPriority" c:type="AdwToastPriority"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="764">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="adw_toast_get_timeout"
              glib:get-property="timeout">
        <attribute name="org.gtk.Method.get_property" value="timeout"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="809">Gets timeout for @self.</doc>
        <source-position filename="src/adw-toast.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="815">the timeout</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="811">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_toast_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="504">Gets the title that will be displayed on the toast.

If a custom title has been set with [method@Adw.Toast.set_custom_title]
the return value will be %NULL.</doc>
        <source-position filename="src/adw-toast.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast.c"
               line="513">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="506">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_action_name"
              c:identifier="adw_toast_set_action_name"
              glib:set-property="action-name">
        <attribute name="org.gtk.Method.set_property" value="action-name"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="621">Sets the name of the associated action.

It will be activated when clicking the button.

See [property@Toast:action-target].</doc>
        <source-position filename="src/adw-toast.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="623">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="action_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="624">the action name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action_target"
              c:identifier="adw_toast_set_action_target"
              glib:set-property="action-target"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="693">Sets the parameter for action invocations.

This is a convenience function that calls [ctor@GLib.Variant.new] for
@format_string and uses the result to call
[method@Toast.set_action_target_value].

If you are setting a string-valued target and want to set
the action name at the same time, you can use
[method@Toast.set_detailed_action_name].</doc>
        <source-position filename="src/adw-toast.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="695">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="format_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="696">a variant format string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="697">arguments appropriate for @target_format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_action_target_value"
              c:identifier="adw_toast_set_action_target_value">
        <attribute name="org.gtk.Method.set_property" value="action-target"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="663">Sets the parameter for action invocations.

If the @action_target variant has a floating reference this function
will sink it.</doc>
        <source-position filename="src/adw-toast.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="665">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="action_target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="666">the action target</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_button_label"
              c:identifier="adw_toast_set_button_label"
              glib:set-property="button-label">
        <attribute name="org.gtk.Method.set_property" value="button-label"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="577">Sets the label to show on the button.

Underlines in the button text can be used to indicate a mnemonic.

If set to `NULL`, the button won't be shown.

See [property@Toast:action-name].</doc>
        <source-position filename="src/adw-toast.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="579">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="button_label"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="580">a button label</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_custom_title"
              c:identifier="adw_toast_set_custom_title"
              glib:set-property="custom-title"
              version="1.2">
        <attribute name="org.gtk.Method.set_property" value="custom-title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="870">Sets the custom title widget of @self.

It will be displayed instead of the title if set. In this case,
[property@Toast:title] is ignored.

Setting a custom title will unset [property@Toast:title].</doc>
        <source-position filename="src/adw-toast.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="872">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="873">the custom title widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_detailed_action_name"
              c:identifier="adw_toast_set_detailed_action_name">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="723">Sets the action name and its parameter.

@detailed_action_name is a string in the format accepted by
[func@Gio.Action.parse_detailed_name].</doc>
        <source-position filename="src/adw-toast.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="725">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="detailed_action_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="726">the detailed action name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="adw_toast_set_priority"
              glib:set-property="priority">
        <attribute name="org.gtk.Method.set_property" value="priority"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="778">Sets priority for @self.

Priority controls how the toast behaves when another toast is already
being displayed.

If @priority is `ADW_TOAST_PRIORITY_NORMAL`, the toast will be queued.

If @priority is `ADW_TOAST_PRIORITY_HIGH`, the toast will be displayed
immediately, pushing the previous toast into the queue instead.</doc>
        <source-position filename="src/adw-toast.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="780">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="781">the priority</doc>
            <type name="ToastPriority" c:type="AdwToastPriority"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="adw_toast_set_timeout"
              glib:set-property="timeout">
        <attribute name="org.gtk.Method.set_property" value="timeout"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="825">Sets timeout for @self.

If @timeout is 0, the toast is displayed indefinitely until manually
dismissed.

Toasts cannot disappear while being hovered, pressed (on touchscreen), or
have keyboard focus inside them.</doc>
        <source-position filename="src/adw-toast.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="827">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="828">the timeout</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_toast_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="526">Sets the title that will be displayed on the toast.

The title can be marked up with the Pango text markup language.

Setting a title will unset [property@Toast:custom-title].

If [property@Toast:custom-title] is set, it will be used instead.</doc>
        <source-position filename="src/adw-toast.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="528">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast.c"
                 line="529">a title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="action-name"
                writable="1"
                transfer-ownership="none"
                setter="set_action_name"
                getter="get_action_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_toast_get_action_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_toast_set_action_name"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="325">The name of the associated action.

It will be activated when clicking the button.

See [property@Toast:action-target].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="action-target"
                writable="1"
                transfer-ownership="none"
                setter="set_action_target">
        <attribute name="org.gtk.Property.get"
                   value="adw_toast_get_action_target_value"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_toast_set_action_target_value"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="339">The parameter for action invocations.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="button-label"
                writable="1"
                transfer-ownership="none"
                setter="set_button_label"
                getter="get_button_label"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_toast_get_button_label"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_toast_set_button_label"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="309">The label to show on the button.

Underlines in the button text can be used to indicate a mnemonic.

If set to `NULL`, the button won't be shown.

See [property@Toast:action-name].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="custom-title"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_custom_title"
                getter="get_custom_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_toast_get_custom_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_toast_set_custom_title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="385">The custom title widget.

It will be displayed instead of the title if set. In this case,
[property@Toast:title] is ignored.

Setting a custom title will unset [property@Toast:title].</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="ADW_TOAST_PRIORITY_NORMAL">
        <attribute name="org.gtk.Property.get" value="adw_toast_get_priority"/>
        <attribute name="org.gtk.Property.set" value="adw_toast_set_priority"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="350">The priority of the toast.

Priority controls how the toast behaves when another toast is already
being displayed.

If the priority is `ADW_TOAST_PRIORITY_NORMAL`, the toast will be queued.

If the priority is `ADW_TOAST_PRIORITY_HIGH`, the toast will be displayed
immediately, pushing the previous toast into the queue instead.</doc>
        <type name="ToastPriority"/>
      </property>
      <property name="timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_timeout"
                getter="get_timeout"
                default-value="5">
        <attribute name="org.gtk.Property.get" value="adw_toast_get_timeout"/>
        <attribute name="org.gtk.Property.set" value="adw_toast_set_timeout"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="369">The timeout of the toast, in seconds.

If timeout is 0, the toast is displayed indefinitely until manually
dismissed.

Toasts cannot disappear while being hovered, pressed (on touchscreen), or
have keyboard focus inside them.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get" value="adw_toast_get_title"/>
        <attribute name="org.gtk.Property.set" value="adw_toast_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="293">The title of the toast.

The title can be marked up with the Pango text markup language.

Setting a title will unset [property@Toast:custom-title].

If [property@Toast:custom-title] is set, it will be used instead.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="button-clicked" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="417">Emitted after the button has been clicked.

It can be used as an alternative to setting an action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="dismissed" when="first">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="404">Emitted when the toast has been dismissed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToastClass"
            c:type="AdwToastClass"
            glib:is-gtype-struct-for="Toast">
      <source-position filename="src/adw-toast.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ToastOverlay"
           c:symbol-prefix="toast_overlay"
           c:type="AdwToastOverlay"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwToastOverlay"
           glib:get-type="adw_toast_overlay_get_type"
           glib:type-struct="ToastOverlayClass">
      <doc xml:space="preserve"
           filename="src/adw-toast-overlay.c"
           line="24">A widget showing toasts above its content.

&lt;picture&gt;
  &lt;source srcset="toast-overlay-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="toast-overlay.png" alt="toast-overlay"&gt;
&lt;/picture&gt;

Much like [class@Gtk.Overlay], `AdwToastOverlay` is a container with a single
main child, on top of which it can display a [class@Toast], overlaid.
Toasts can be shown with [method@ToastOverlay.add_toast].

See [class@Toast] for details.

## CSS nodes

```
toastoverlay
├── [child]
├── toast
┊   ├── widget
┊   │   ├── [label.heading]
    │   ╰── [custom title]
    ├── [button]
    ╰── button.circular.flat
```

`AdwToastOverlay`'s CSS node is called `toastoverlay`. It contains the child,
as well as zero or more `toast` subnodes.

Each of the `toast` nodes contains a `widget` subnode, optionally a `button`
subnode, and another `button` subnode with `.circular` and `.flat` style
classes.

The `widget` subnode contains a `label` subnode with the `.heading` style
class, or a custom widget provided by the application.

## Accessibility

`AdwToastOverlay` uses the `GTK_ACCESSIBLE_ROLE_TAB_GROUP` role.</doc>
      <source-position filename="src/adw-toast-overlay.h" line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_toast_overlay_new">
        <doc xml:space="preserve"
             filename="src/adw-toast-overlay.c"
             line="546">Creates a new `AdwToastOverlay`.</doc>
        <source-position filename="src/adw-toast-overlay.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-toast-overlay.c"
               line="551">the new created `AdwToastOverlay`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_toast" c:identifier="adw_toast_overlay_add_toast">
        <doc xml:space="preserve"
             filename="src/adw-toast-overlay.c"
             line="603">Displays @toast.

Only one toast can be shown at a time; if a toast is already being displayed,
either @toast or the original toast will be placed in a queue, depending on
the priority of @toast. See [property@Toast:priority].

If called on a toast that's already displayed, its timeout will be reset.

If called on a toast currently in the queue, the toast will be bumped
forward to be shown as soon as possible.</doc>
        <source-position filename="src/adw-toast-overlay.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast-overlay.c"
                 line="605">a toast overlay</doc>
            <type name="ToastOverlay" c:type="AdwToastOverlay*"/>
          </instance-parameter>
          <parameter name="toast" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/adw-toast-overlay.c"
                 line="606">a toast</doc>
            <type name="Toast" c:type="AdwToast*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child"
              c:identifier="adw_toast_overlay_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-toast-overlay.c"
             line="559">Gets the child widget of @self.</doc>
        <source-position filename="src/adw-toast-overlay.h" line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-toast-overlay.c"
               line="565">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast-overlay.c"
                 line="561">a toast overlay</doc>
            <type name="ToastOverlay" c:type="AdwToastOverlay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="adw_toast_overlay_set_child"
              glib:set-property="child">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-toast-overlay.c"
             line="575">Sets the child widget of @self.</doc>
        <source-position filename="src/adw-toast-overlay.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-toast-overlay.c"
                 line="577">a toast overlay</doc>
            <type name="ToastOverlay" c:type="AdwToastOverlay*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-toast-overlay.c"
                 line="578">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_toast_overlay_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_toast_overlay_set_child"/>
        <doc xml:space="preserve"
             filename="src/adw-toast-overlay.c"
             line="496">The child widget.</doc>
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="ToastOverlayClass"
            c:type="AdwToastOverlayClass"
            glib:is-gtype-struct-for="ToastOverlay">
      <source-position filename="src/adw-toast-overlay.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="ToastPriority"
                 glib:type-name="AdwToastPriority"
                 glib:get-type="adw_toast_priority_get_type"
                 c:type="AdwToastPriority">
      <doc xml:space="preserve"
           filename="src/adw-toast.c"
           line="13">[class@Toast] behavior when another toast is already displayed.</doc>
      <member name="normal"
              value="0"
              c:identifier="ADW_TOAST_PRIORITY_NORMAL"
              glib:nick="normal"
              glib:name="ADW_TOAST_PRIORITY_NORMAL">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="15">the toast will be queued if another toast is
  already displayed.</doc>
      </member>
      <member name="high"
              value="1"
              c:identifier="ADW_TOAST_PRIORITY_HIGH"
              glib:nick="high"
              glib:name="ADW_TOAST_PRIORITY_HIGH">
        <doc xml:space="preserve"
             filename="src/adw-toast.c"
             line="17">the toast will be displayed immediately, pushing
  the previous toast into the queue instead.</doc>
      </member>
    </enumeration>
    <function-macro name="UNAVAILABLE"
                    c:identifier="ADW_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="src/adw-version.h" line="187"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_S" value="1.3.beta" c:type="ADW_VERSION_S">
      <doc xml:space="preserve"
           filename="src/adw-version.h"
           line="45">Adwaita version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="src/adw-version.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="ViewStack"
           c:symbol-prefix="view_stack"
           c:type="AdwViewStack"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwViewStack"
           glib:get-type="adw_view_stack_get_type"
           glib:type-struct="ViewStackClass">
      <doc xml:space="preserve"
           filename="src/adw-view-stack.c"
           line="21">A view container for [class@ViewSwitcher].

`AdwViewStack` is a container which only shows one page at a time.
It is typically used to hold an application's main views.

It doesn't provide a way to transition between pages.
Instead, a separate widget such as [class@ViewSwitcher] can be used with
`AdwViewStack` to provide this functionality.

`AdwViewStack` pages can have a title, an icon, an attention request, and a
numbered badge that [class@ViewSwitcher] will use to let users identify which
page is which. Set them using the [property@ViewStackPage:title],
[property@ViewStackPage:icon-name],
[property@ViewStackPage:needs-attention], and
[property@ViewStackPage:badge-number] properties.

Unlike [class@Gtk.Stack], transitions between views are not animated.

`AdwViewStack` maintains a [class@ViewStackPage] object for each added child,
which holds additional per-child properties. You obtain the
[class@ViewStackPage] for a child with [method@ViewStack.get_page] and you
can obtain a [iface@Gtk.SelectionModel] containing all the pages with
[method@ViewStack.get_pages].

## AdwViewStack as GtkBuildable

To set child-specific properties in a .ui file, create
[class@ViewStackPage] objects explicitly, and set the child widget as a
property on it:

```xml
  &lt;object class="AdwViewStack" id="stack"&gt;
    &lt;child&gt;
      &lt;object class="AdwViewStackPage"&gt;
        &lt;property name="name"&gt;overview&lt;/property&gt;
        &lt;property name="title"&gt;Overview&lt;/property&gt;
        &lt;property name="child"&gt;
          &lt;object class="AdwStatusPage"&gt;
            &lt;property name="title"&gt;Welcome!&lt;/property&gt;
          &lt;/object&gt;
        &lt;/property&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
```

## CSS nodes

`AdwViewStack` has a single CSS node named `stack`.

## Accessibility

`AdwViewStack` uses the `GTK_ACCESSIBLE_ROLE_TAB_PANEL` for the stack pages
which are the accessible parent objects of the child widgets.</doc>
      <source-position filename="src/adw-view-stack.h" line="78"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_view_stack_new">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1475">Creates a new `AdwViewStack`.</doc>
        <source-position filename="src/adw-view-stack.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1480">the newly created `AdwViewStack`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="adw_view_stack_add">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1488">Adds a child to @self.</doc>
        <source-position filename="src/adw-view-stack.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1495">the [class@ViewStackPage] for @child</doc>
          <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1490">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1491">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_named" c:identifier="adw_view_stack_add_named">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1507">Adds a child to @self.

The child is identified by the @name.</doc>
        <source-position filename="src/adw-view-stack.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1517">the `AdwViewStackPage` for @child</doc>
          <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1509">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1510">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1511">the name for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_titled" c:identifier="adw_view_stack_add_titled">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1530">Adds a child to @self.

The child is identified by the @name. The @title will be used by
[class@ViewSwitcher] to represent @child, so it should be short.</doc>
        <source-position filename="src/adw-view-stack.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1542">the `AdwViewStackPage` for @child</doc>
          <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1532">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1533">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1534">the name for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1535">a human-readable title for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_titled_with_icon"
              c:identifier="adw_view_stack_add_titled_with_icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1556">Adds a child to @self.

The child is identified by the @name. The @title and @icon_name will be used
by [class@ViewSwitcher] to represent @child.</doc>
        <source-position filename="src/adw-view-stack.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1569">the `AdwViewStackPage` for @child</doc>
          <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1558">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1559">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1560">the name for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1561">a human-readable title for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1562">an icon name for @child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="adw_view_stack_get_child_by_name">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1636">Finds the child with @name in @self.</doc>
        <source-position filename="src/adw-view-stack.h" line="111"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1643">the requested child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1638">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1639">the name of the child to find</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hhomogeneous"
              c:identifier="adw_view_stack_get_hhomogeneous"
              glib:get-property="hhomogeneous">
        <attribute name="org.gtk.Method.get_property" value="hhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1751">Gets whether @self is horizontally homogeneous.</doc>
        <source-position filename="src/adw-view-stack.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1757">whether @self is horizontally homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1753">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="adw_view_stack_get_page">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1617">Gets the [class@ViewStackPage] object for @child.</doc>
        <source-position filename="src/adw-view-stack.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1624">the page object for @child</doc>
          <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1619">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1620">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="adw_view_stack_get_pages"
              glib:get-property="pages">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1847">Returns a [iface@Gio.ListModel] that contains the pages of the stack.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <source-position filename="src/adw-view-stack.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1857">a `GtkSelectionModel` for the stack's children</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1849">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vhomogeneous"
              c:identifier="adw_view_stack_get_vhomogeneous"
              glib:get-property="vhomogeneous">
        <attribute name="org.gtk.Method.get_property" value="vhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1799">Gets whether @self is vertically homogeneous.</doc>
        <source-position filename="src/adw-view-stack.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1805">whether @self is vertically homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1801">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="adw_view_stack_get_visible_child"
              glib:get-property="visible-child">
        <attribute name="org.gtk.Method.get_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1659">Gets the currently visible child of @self, .</doc>
        <source-position filename="src/adw-view-stack.h" line="115"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1665">the visible child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1661">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="adw_view_stack_get_visible_child_name"
              glib:get-property="visible-child-name">
        <attribute name="org.gtk.Method.get_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1703">Returns the name of the currently visible child of @self.</doc>
        <source-position filename="src/adw-view-stack.h" line="121"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1709">the name of the visible child</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1705">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="adw_view_stack_remove">
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1586">Removes a child widget from @self.</doc>
        <source-position filename="src/adw-view-stack.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1588">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1589">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hhomogeneous"
              c:identifier="adw_view_stack_set_hhomogeneous"
              glib:set-property="hhomogeneous">
        <attribute name="org.gtk.Method.set_property" value="hhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1767">Sets @self to be horizontally homogeneous or not.

If the stack is horizontally homogeneous, it allocates the same width for
all children.

If it's `FALSE`, the stack may change width when a different child becomes
visible.</doc>
        <source-position filename="src/adw-view-stack.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1769">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="hhomogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1770">whether to make @self horizontally homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vhomogeneous"
              c:identifier="adw_view_stack_set_vhomogeneous"
              glib:set-property="vhomogeneous">
        <attribute name="org.gtk.Method.set_property" value="vhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1815">Sets @self to be vertically homogeneous or not.

If the stack is vertically homogeneous, it allocates the same height for
all children.

If it's `FALSE`, the stack may change height when a different child becomes
visible.</doc>
        <source-position filename="src/adw-view-stack.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1817">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="vhomogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1818">whether to make @self vertically homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="adw_view_stack_set_visible_child"
              glib:set-property="visible-child">
        <attribute name="org.gtk.Method.set_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1675">Makes @child the visible child of @self.</doc>
        <source-position filename="src/adw-view-stack.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1677">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1678">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="adw_view_stack_set_visible_child_name"
              glib:set-property="visible-child-name">
        <attribute name="org.gtk.Method.set_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1719">Makes the child with @name visible.

See [property@ViewStack:visible-child].</doc>
        <source-position filename="src/adw-view-stack.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1721">a view stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1722">the name of the child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="hhomogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_hhomogeneous"
                getter="get_hhomogeneous"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_get_hhomogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_set_hhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1027">Whether the stack is horizontally homogeneous.

If the stack is horizontally homogeneous, it allocates the same width for
all children.

If it's `FALSE`, the stack may change width when a different child becomes
visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pages" transfer-ownership="none" getter="get_pages">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_get_pages"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1081">A selection model with the stack's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="vhomogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_vhomogeneous"
                getter="get_vhomogeneous"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_get_vhomogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_set_vhomogeneous"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1043">Whether the stack is vertically homogeneous.

If the stack is vertically homogeneous, it allocates the same height for
all children.

If it's `FALSE`, the stack may change height when a different child becomes
visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-child"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_get_visible_child"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_set_visible_child"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1059">The widget currently visible in the stack.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_get_visible_child_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_set_visible_child_name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1069">The name of the widget currently visible in the stack.

See [property@ViewStack:visible-child].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ViewStackClass"
            c:type="AdwViewStackClass"
            glib:is-gtype-struct-for="ViewStack">
      <source-position filename="src/adw-view-stack.h" line="78"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="ViewStackPage"
           c:symbol-prefix="view_stack_page"
           c:type="AdwViewStackPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="AdwViewStackPage"
           glib:get-type="adw_view_stack_page_get_type"
           glib:type-struct="ViewStackPageClass">
      <doc xml:space="preserve"
           filename="src/adw-view-stack.c"
           line="80">An auxiliary class used by [class@ViewStack].</doc>
      <source-position filename="src/adw-view-stack.h" line="28"/>
      <implements name="Gtk.Accessible"/>
      <method name="get_badge_number"
              c:identifier="adw_view_stack_page_get_badge_number"
              glib:get-property="badge-number">
        <attribute name="org.gtk.Method.get_property" value="badge-number"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1385">Gets the badge number for this page.</doc>
        <source-position filename="src/adw-view-stack.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1391">the badge number for this page</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1387">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child"
              c:identifier="adw_view_stack_page_get_child"
              glib:get-property="child">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1149">Gets the stack child to which @self belongs.</doc>
        <source-position filename="src/adw-view-stack.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1155">the child to which @self belongs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1151">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="adw_view_stack_page_get_icon_name"
              glib:get-property="icon-name">
        <attribute name="org.gtk.Method.get_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1306">Gets the icon name of the page.</doc>
        <source-position filename="src/adw-view-stack.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1312">the icon name of the page</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1308">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="adw_view_stack_page_get_name"
              glib:get-property="name">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1165">Gets the name of the page.</doc>
        <source-position filename="src/adw-view-stack.h" line="34"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1171">the name of the page</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1167">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_attention"
              c:identifier="adw_view_stack_page_get_needs_attention"
              glib:get-property="needs-attention">
        <attribute name="org.gtk.Method.get_property" value="needs-attention"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1344">Gets whether the page requires the user attention.</doc>
        <source-position filename="src/adw-view-stack.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1350">whether the page needs attention</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1346">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_view_stack_page_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1229">Gets the page title.</doc>
        <source-position filename="src/adw-view-stack.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1235">the page title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1231">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="adw_view_stack_page_get_use_underline"
              glib:get-property="use-underline">
        <attribute name="org.gtk.Method.get_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1271">Gets whether underlines in the page title indicate mnemonics.</doc>
        <source-position filename="src/adw-view-stack.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1277">whether underlines in the page title indicate mnemonics</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1273">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="adw_view_stack_page_get_visible"
              glib:get-property="visible">
        <attribute name="org.gtk.Method.get_property" value="visible"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1427">Gets whether @self is visible in its `AdwViewStack`.

This is independent from the [property@Gtk.Widget:visible]
property of its widget.</doc>
        <source-position filename="src/adw-view-stack.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-stack.c"
               line="1436">whether @self is visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1429">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_badge_number"
              c:identifier="adw_view_stack_page_set_badge_number"
              glib:set-property="badge-number">
        <attribute name="org.gtk.Method.set_property" value="badge-number"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1401">Sets the badge number for this page.

[class@ViewSwitcher] can display it as a badge next to the page icon. It is
commonly used to display a number of unread items within the page.

It can be used together with [property@ViewStack{age}:needs-attention].</doc>
        <source-position filename="src/adw-view-stack.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1403">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="badge_number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1404">the new value to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="adw_view_stack_page_set_icon_name"
              glib:set-property="icon-name">
        <attribute name="org.gtk.Method.set_property" value="icon-name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1322">Sets the icon name of the page.</doc>
        <source-position filename="src/adw-view-stack.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1324">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1325">the icon name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="adw_view_stack_page_set_name"
              glib:set-property="name">
        <attribute name="org.gtk.Method.set_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1181">Sets the name of the page.</doc>
        <source-position filename="src/adw-view-stack.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1183">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1184">the page name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_attention"
              c:identifier="adw_view_stack_page_set_needs_attention"
              glib:set-property="needs-attention">
        <attribute name="org.gtk.Method.set_property" value="needs-attention"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1360">Sets whether the page requires the user attention.

[class@ViewSwitcher] will display it as a dot next to the page icon.</doc>
        <source-position filename="src/adw-view-stack.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1362">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="needs_attention" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1363">the new value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_view_stack_page_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1245">Sets the page title.</doc>
        <source-position filename="src/adw-view-stack.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1247">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1248">the page title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="adw_view_stack_page_set_use_underline"
              glib:set-property="use-underline">
        <attribute name="org.gtk.Method.set_property" value="use-underline"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1285">Sets whether underlines in the page title indicate mnemonics.</doc>
        <source-position filename="src/adw-view-stack.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1287">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1288">the new value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="adw_view_stack_page_set_visible"
              glib:set-property="visible">
        <attribute name="org.gtk.Method.set_property" value="visible"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="1446">Sets whether @page is visible in its `AdwViewStack`.

This is independent from the [property@Gtk.Widget:visible] property of
[property@ViewStackPage:child].</doc>
        <source-position filename="src/adw-view-stack.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1448">a view stack page</doc>
            <type name="ViewStackPage" c:type="AdwViewStackPage*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-stack.c"
                 line="1449">whether @self is visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="badge-number"
                writable="1"
                transfer-ownership="none"
                setter="set_badge_number"
                getter="get_badge_number"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_badge_number"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_badge_number"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="342">The badge number for this page.

[class@ViewSwitcher] can display it as a badge next to the page icon. It is
commonly used to display a number of unread items within the page.

It can be used together with [property@ViewStack{age}:needs-attention].</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="child"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="280">The stack child to which the page belongs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_icon_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_icon_name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="320">The icon name of the child page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_name"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_name"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="290">The name of the child page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="needs-attention"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_attention"
                getter="get_needs_attention"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_needs_attention"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_needs_attention"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="330">Whether the page requires the user attention.

[class@ViewSwitcher] will display it as a dot next to the page icon.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="300">The title of the child page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_use_underline"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_use_underline"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="310">Whether an embedded underline in the title indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible"
                writable="1"
                transfer-ownership="none"
                setter="set_visible"
                getter="get_visible"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_stack_page_get_visible"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_stack_page_set_visible"/>
        <doc xml:space="preserve"
             filename="src/adw-view-stack.c"
             line="357">Whether this page is visible.

This is independent from the [property@Gtk.Widget:visible] property of
[property@ViewStackPage:child].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ViewStackPageClass"
            c:type="AdwViewStackPageClass"
            glib:is-gtype-struct-for="ViewStackPage">
      <source-position filename="src/adw-view-stack.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ViewSwitcher"
           c:symbol-prefix="view_switcher"
           c:type="AdwViewSwitcher"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwViewSwitcher"
           glib:get-type="adw_view_switcher_get_type"
           glib:type-struct="ViewSwitcherClass">
      <doc xml:space="preserve"
           filename="src/adw-view-switcher.c"
           line="17">An adaptive view switcher.

&lt;picture&gt;
  &lt;source srcset="view-switcher-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="view-switcher.png" alt="view-switcher"&gt;
&lt;/picture&gt;

An adaptive view switcher designed to switch between multiple views
contained in a [class@ViewStack] in a similar fashion to
[class@Gtk.StackSwitcher].

`AdwViewSwitcher` buttons always have an icon and a label. They can be
displayed side by side, or icon on top of the label. This can be controlled
via the [property@ViewSwitcher:policy] property.

Most applications should be using [class@ViewSwitcherBar] and
[class@ViewSwitcherTitle].

## CSS nodes

`AdwViewSwitcher` has a single CSS node with name `viewswitcher`. It can have
the style classes `.wide` and `.narrow`, matching its policy.

## Accessibility

`AdwViewSwitcher` uses the `GTK_ACCESSIBLE_ROLE_TAB_LIST` role and uses the
`GTK_ACCESSIBLE_ROLE_TAB` for its buttons.</doc>
      <source-position filename="src/adw-view-switcher.h" line="25"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_view_switcher_new">
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="389">Creates a new `AdwViewSwitcher`.</doc>
        <source-position filename="src/adw-view-switcher.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher.c"
               line="394">the newly created `AdwViewSwitcher`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_policy"
              c:identifier="adw_view_switcher_get_policy"
              glib:get-property="policy">
        <attribute name="org.gtk.Method.get_property" value="policy"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="402">Gets the policy of @self.</doc>
        <source-position filename="src/adw-view-switcher.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher.c"
               line="408">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="AdwViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="404">a view switcher</doc>
            <type name="ViewSwitcher" c:type="AdwViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="adw_view_switcher_get_stack"
              glib:get-property="stack">
        <attribute name="org.gtk.Method.get_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="457">Gets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher.h" line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher.c"
               line="463">the stack</doc>
          <type name="ViewStack" c:type="AdwViewStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="459">a view switcher</doc>
            <type name="ViewSwitcher" c:type="AdwViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="adw_view_switcher_set_policy"
              glib:set-property="policy">
        <attribute name="org.gtk.Method.set_property" value="policy"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="418">Sets the policy of @self.</doc>
        <source-position filename="src/adw-view-switcher.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="420">a view switcher</doc>
            <type name="ViewSwitcher" c:type="AdwViewSwitcher*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="421">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="AdwViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="adw_view_switcher_set_stack"
              glib:set-property="stack">
        <attribute name="org.gtk.Method.set_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="473">Sets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="475">a view switcher</doc>
            <type name="ViewSwitcher" c:type="AdwViewSwitcher*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher.c"
                 line="476">a stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="policy"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy"
                default-value="ADW_VIEW_SWITCHER_POLICY_NARROW">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_get_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_set_policy"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="349">The policy to determine which mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="stack"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_get_stack"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_set_stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="360">The stack the view switcher controls.</doc>
        <type name="ViewStack"/>
      </property>
    </class>
    <class name="ViewSwitcherBar"
           c:symbol-prefix="view_switcher_bar"
           c:type="AdwViewSwitcherBar"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwViewSwitcherBar"
           glib:get-type="adw_view_switcher_bar_get_type"
           glib:type-struct="ViewSwitcherBarClass">
      <doc xml:space="preserve"
           filename="src/adw-view-switcher-bar.c"
           line="13">A view switcher action bar.

&lt;picture&gt;
  &lt;source srcset="view-switcher-bar-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="view-switcher-bar.png" alt="view-switcher-bar"&gt;
&lt;/picture&gt;

An action bar letting you switch between multiple views contained in a
[class@ViewStack], via an [class@ViewSwitcher]. It is designed to be put at
the bottom of a window and to be revealed only on really narrow windows, e.g.
on mobile phones. It can't be revealed if there are less than two pages.

`AdwViewSwitcherBar` is intended to be used together with
[class@ViewSwitcherTitle].

A common use case is to bind the [property@ViewSwitcherBar:reveal] property
to [property@ViewSwitcherTitle:title-visible] to automatically reveal the
view switcher bar when the title label is displayed in place of the view
switcher, as follows:

```xml
&lt;object class="GtkWindow"&gt;
  &lt;property name="titlebar"&gt;
    &lt;object class="AdwHeaderBar"&gt;
      &lt;property name="centering-policy"&gt;strict&lt;/property&gt;
      &lt;property name="title-widget"&gt;
        &lt;object class="AdwViewSwitcherTitle" id="title"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
        &lt;/object&gt;
      &lt;/property&gt;
    &lt;/object&gt;
  &lt;/property&gt;
  &lt;property name="child"&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="AdwViewStack" id="stack"/&gt;
      &lt;/child&gt;
      &lt;child&gt;
        &lt;object class="AdwViewSwitcherBar"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
          &lt;binding name="reveal"&gt;
            &lt;lookup name="title-visible"&gt;title&lt;/lookup&gt;
          &lt;/binding&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```

## CSS nodes

`AdwViewSwitcherBar` has a single CSS node with name` viewswitcherbar`.</doc>
      <source-position filename="src/adw-view-switcher-bar.h" line="25"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_view_switcher_bar_new">
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="221">Creates a new `AdwViewSwitcherBar`.</doc>
        <source-position filename="src/adw-view-switcher-bar.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-bar.c"
               line="226">the newly created `AdwViewSwitcherBar`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_reveal"
              c:identifier="adw_view_switcher_bar_get_reveal"
              glib:get-property="reveal">
        <attribute name="org.gtk.Method.get_property" value="reveal"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="289">Gets whether @self should be revealed or hidden.</doc>
        <source-position filename="src/adw-view-switcher-bar.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-bar.c"
               line="295">whether @self is revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="291">a view switcher bar</doc>
            <type name="ViewSwitcherBar" c:type="AdwViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="adw_view_switcher_bar_get_stack"
              glib:get-property="stack">
        <attribute name="org.gtk.Method.get_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="234">Gets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher-bar.h" line="31"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-bar.c"
               line="240">the stack</doc>
          <type name="ViewStack" c:type="AdwViewStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="236">a view switcher bar</doc>
            <type name="ViewSwitcherBar" c:type="AdwViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_reveal"
              c:identifier="adw_view_switcher_bar_set_reveal"
              glib:set-property="reveal">
        <attribute name="org.gtk.Method.set_property" value="reveal"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="305">Sets whether @self should be revealed or hidden.</doc>
        <source-position filename="src/adw-view-switcher-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="307">a view switcher bar</doc>
            <type name="ViewSwitcherBar" c:type="AdwViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="reveal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="308">whether to reveal @self</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="adw_view_switcher_bar_set_stack"
              glib:set-property="stack">
        <attribute name="org.gtk.Method.set_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="250">Sets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher-bar.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="252">a view switcher bar</doc>
            <type name="ViewSwitcherBar" c:type="AdwViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-bar.c"
                 line="253">a stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="reveal"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal"
                getter="get_reveal"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_bar_get_reveal"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_bar_set_reveal"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="192">Whether the bar should be revealed or hidden.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stack"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_bar_get_stack"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_bar_set_stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-bar.c"
             line="182">The stack the view switcher controls.</doc>
        <type name="ViewStack"/>
      </property>
    </class>
    <record name="ViewSwitcherBarClass"
            c:type="AdwViewSwitcherBarClass"
            glib:is-gtype-struct-for="ViewSwitcherBar">
      <source-position filename="src/adw-view-switcher-bar.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="ViewSwitcherClass"
            c:type="AdwViewSwitcherClass"
            glib:is-gtype-struct-for="ViewSwitcher">
      <source-position filename="src/adw-view-switcher.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="ViewSwitcherPolicy"
                 glib:type-name="AdwViewSwitcherPolicy"
                 glib:get-type="adw_view_switcher_policy_get_type"
                 c:type="AdwViewSwitcherPolicy">
      <doc xml:space="preserve"
           filename="src/adw-view-switcher.c"
           line="49">Describes the adaptive modes of [class@ViewSwitcher].</doc>
      <member name="narrow"
              value="0"
              c:identifier="ADW_VIEW_SWITCHER_POLICY_NARROW"
              glib:nick="narrow"
              glib:name="ADW_VIEW_SWITCHER_POLICY_NARROW">
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="51">Force the narrow mode</doc>
      </member>
      <member name="wide"
              value="1"
              c:identifier="ADW_VIEW_SWITCHER_POLICY_WIDE"
              glib:nick="wide"
              glib:name="ADW_VIEW_SWITCHER_POLICY_WIDE">
        <doc xml:space="preserve"
             filename="src/adw-view-switcher.c"
             line="52">Force the wide mode</doc>
      </member>
    </enumeration>
    <class name="ViewSwitcherTitle"
           c:symbol-prefix="view_switcher_title"
           c:type="AdwViewSwitcherTitle"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwViewSwitcherTitle"
           glib:get-type="adw_view_switcher_title_get_type"
           glib:type-struct="ViewSwitcherTitleClass">
      <doc xml:space="preserve"
           filename="src/adw-view-switcher-title.c"
           line="15">A view switcher title.

&lt;picture&gt;
  &lt;source srcset="view-switcher-title-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="view-switcher-title.png" alt="view-switcher-title"&gt;
&lt;/picture&gt;

A widget letting you switch between multiple views contained by a
[class@ViewStack] via an [class@ViewSwitcher].

It is designed to be used as the title widget of a [class@HeaderBar], and
will display the window's title when the window is too narrow to fit the view
switcher e.g. on mobile phones, or if there are less than two views.

In order to center the title in narrow windows, the header bar should have
[property@HeaderBar:centering-policy] set to
`ADW_CENTERING_POLICY_STRICT`.

`AdwViewSwitcherTitle` is intended to be used together with
[class@ViewSwitcherBar].

A common use case is to bind the [property@ViewSwitcherBar:reveal] property
to [property@ViewSwitcherTitle:title-visible] to automatically reveal the
view switcher bar when the title label is displayed in place of the view
switcher, as follows:

```xml
&lt;object class="GtkWindow"&gt;
  &lt;property name="titlebar"&gt;
    &lt;object class="AdwHeaderBar"&gt;
      &lt;property name="centering-policy"&gt;strict&lt;/property&gt;
      &lt;property name="title-widget"&gt;
        &lt;object class="AdwViewSwitcherTitle" id="title"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
        &lt;/object&gt;
      &lt;/property&gt;
    &lt;/object&gt;
  &lt;/property&gt;
  &lt;property name="child"&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="AdwViewStack" id="stack"/&gt;
      &lt;/child&gt;
      &lt;child&gt;
        &lt;object class="AdwViewSwitcherBar"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
          &lt;binding name="reveal"&gt;
            &lt;lookup name="title-visible"&gt;title&lt;/lookup&gt;
          &lt;/binding&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```

## CSS nodes

`AdwViewSwitcherTitle` has a single CSS node with name `viewswitchertitle`.</doc>
      <source-position filename="src/adw-view-switcher-title.h" line="25"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_view_switcher_title_new">
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="373">Creates a new `AdwViewSwitcherTitle`.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="378">the newly created `AdwViewSwitcherTitle`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_stack"
              c:identifier="adw_view_switcher_title_get_stack"
              glib:get-property="stack">
        <attribute name="org.gtk.Method.get_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="386">Gets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="31"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="392">the stack</doc>
          <type name="ViewStack" c:type="AdwViewStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="388">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="adw_view_switcher_title_get_subtitle"
              glib:get-property="subtitle">
        <attribute name="org.gtk.Method.get_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="482">Gets the subtitle of @self.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="488">the subtitle</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="484">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_view_switcher_title_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="442">Gets the title of @self.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="448">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="444">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_visible"
              c:identifier="adw_view_switcher_title_get_title_visible"
              glib:get-property="title-visible">
        <attribute name="org.gtk.Method.get_property" value="title-visible"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="568">Gets whether the title of @self is currently visible.

If the title is visible, it means the view switcher is hidden an it may be
wanted to show an alternative switcher, e.g. a [class@ViewSwitcherBar].</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="577">whether the title of @self is currently visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="570">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view_switcher_enabled"
              c:identifier="adw_view_switcher_title_get_view_switcher_enabled"
              glib:get-property="view-switcher-enabled">
        <attribute name="org.gtk.Method.get_property"
                   value="view-switcher-enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="521">Gets whether @self's view switcher is enabled.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-view-switcher-title.c"
               line="527">whether the view switcher is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="523">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="adw_view_switcher_title_set_stack"
              glib:set-property="stack">
        <attribute name="org.gtk.Method.set_property" value="stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="402">Sets the stack controlled by @self.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="404">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="405">a stack</doc>
            <type name="ViewStack" c:type="AdwViewStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="adw_view_switcher_title_set_subtitle"
              glib:set-property="subtitle">
        <attribute name="org.gtk.Method.set_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="498">Sets the subtitle of @self.

The subtitle should give the user additional details.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="500">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="501">a subtitle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_view_switcher_title_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="458">Sets the title of @self.

The title typically identifies the current view or content item, and
generally does not use the application name.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="460">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="461">a title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view_switcher_enabled"
              c:identifier="adw_view_switcher_title_set_view_switcher_enabled"
              glib:set-property="view-switcher-enabled">
        <attribute name="org.gtk.Method.set_property"
                   value="view-switcher-enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="537">Sets whether @self's view switcher is enabled.

If it is disabled, the title will be displayed instead. This allows to
programmatically hide the view switcher even if it fits in the available
space.

This can be used e.g. to ensure the view switcher is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="src/adw-view-switcher-title.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="539">a view switcher title</doc>
            <type name="ViewSwitcherTitle" c:type="AdwViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-view-switcher-title.c"
                 line="540">whether the view switcher is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="stack"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_title_get_stack"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_title_set_stack"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="281">The stack the view switcher controls.</doc>
        <type name="ViewStack"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_title_get_subtitle"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_title_set_subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="304">The subtitle to display.

The subtitle should give the user additional details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_title_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_title_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="291">The title to display.

The title typically identifies the current view or content item, and
generally does not use the application name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title-visible"
                transfer-ownership="none"
                getter="get_title_visible"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_title_get_title_visible"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="333">Whether the title is currently visible.

If the title is visible, it means the view switcher is hidden an it may be
wanted to show an alternative switcher, e.g. a [class@ViewSwitcherBar].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="view-switcher-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_view_switcher_enabled"
                getter="get_view_switcher_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="adw_view_switcher_title_get_view_switcher_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_view_switcher_title_set_view_switcher_enabled"/>
        <doc xml:space="preserve"
             filename="src/adw-view-switcher-title.c"
             line="316">Whether the view switcher is enabled.

If it is disabled, the title will be displayed instead. This allows to
programmatically hide the view switcher even if it fits in the available
space.

This can be used e.g. to ensure the view switcher is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ViewSwitcherTitleClass"
            c:type="AdwViewSwitcherTitleClass"
            glib:is-gtype-struct-for="ViewSwitcherTitle">
      <source-position filename="src/adw-view-switcher-title.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="AdwWindow"
           parent="Gtk.Window"
           glib:type-name="AdwWindow"
           glib:get-type="adw_window_get_type"
           glib:type-struct="WindowClass">
      <doc xml:space="preserve"
           filename="src/adw-window.c"
           line="12">A freeform window.

&lt;picture&gt;
  &lt;source srcset="window-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="window.png" alt="window"&gt;
&lt;/picture&gt;

The `AdwWindow` widget is a subclass of [class@Gtk.Window] which has no
titlebar area. It means [class@Gtk.HeaderBar] can be used as follows:

```xml
&lt;object class="AdwWindow"&gt;
  &lt;property name="content"&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="GtkHeaderBar"/&gt;
      &lt;/child&gt;
      &lt;child&gt;
        &lt;!-- ... --&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/property&gt;
&lt;/object&gt;
```

Using [property@Gtk.Window:titlebar] or [property@Gtk.Window:child]
is not supported and will result in a crash. Use [property@Window:content]
instead.</doc>
      <source-position filename="src/adw-window.h" line="30"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="adw_window_new">
        <doc xml:space="preserve"
             filename="src/adw-window.c"
             line="183">Creates a new `AdwWindow`.</doc>
        <source-position filename="src/adw-window.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-window.c"
               line="188">the newly created `AdwWindow`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_content"
              c:identifier="adw_window_get_content"
              glib:get-property="content">
        <attribute name="org.gtk.Method.get_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-window.c"
             line="220">Gets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.get_child].</doc>
        <source-position filename="src/adw-window.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/adw-window.c"
               line="228">the content widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window.c"
                 line="222">a window</doc>
            <type name="Window" c:type="AdwWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="adw_window_set_content"
              glib:set-property="content">
        <attribute name="org.gtk.Method.set_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/adw-window.c"
             line="196">Sets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.set_child].</doc>
        <source-position filename="src/adw-window.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window.c"
                 line="198">a window</doc>
            <type name="Window" c:type="AdwWindow*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/adw-window.c"
                 line="199">the content widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <attribute name="org.gtk.Property.get" value="adw_window_get_content"/>
        <attribute name="org.gtk.Property.set" value="adw_window_set_content"/>
        <doc xml:space="preserve"
             filename="src/adw-window.c"
             line="137">The content widget.

This property should always be used instead of [property@Gtk.Window:child].</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="WindowClass"
            c:type="AdwWindowClass"
            glib:is-gtype-struct-for="Window">
      <source-position filename="src/adw-window.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="WindowTitle"
           c:symbol-prefix="window_title"
           c:type="AdwWindowTitle"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="AdwWindowTitle"
           glib:get-type="adw_window_title_get_type"
           glib:type-struct="WindowTitleClass">
      <doc xml:space="preserve"
           filename="src/adw-window-title.c"
           line="11">A helper widget for setting a window's title and subtitle.

&lt;picture&gt;
  &lt;source srcset="window-title-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="window-title.png" alt="window-title"&gt;
&lt;/picture&gt;

`AdwWindowTitle` shows a title and subtitle. It's intended to be used as the
title child of [class@Gtk.HeaderBar] or [class@HeaderBar].

## CSS nodes

`AdwWindowTitle` has a single CSS node with name `windowtitle`.</doc>
      <source-position filename="src/adw-window-title.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="adw_window_title_new">
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="155">Creates a new `AdwWindowTitle`.</doc>
        <source-position filename="src/adw-window-title.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-window-title.c"
               line="162">the newly created `AdwWindowTitle`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="157">a title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="158">a subtitle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_subtitle"
              c:identifier="adw_window_title_get_subtitle"
              glib:get-property="subtitle">
        <attribute name="org.gtk.Method.get_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="216">Gets the subtitle of @self.</doc>
        <source-position filename="src/adw-window-title.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-window-title.c"
               line="222">the subtitle</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="218">a window title</doc>
            <type name="WindowTitle" c:type="AdwWindowTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="adw_window_title_get_title"
              glib:get-property="title">
        <attribute name="org.gtk.Method.get_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="174">Gets the title of @self.</doc>
        <source-position filename="src/adw-window-title.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-window-title.c"
               line="180">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="176">a window title</doc>
            <type name="WindowTitle" c:type="AdwWindowTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="adw_window_title_set_subtitle"
              glib:set-property="subtitle">
        <attribute name="org.gtk.Method.set_property" value="subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="232">Sets the subtitle of @self.

The subtitle should give the user additional details.</doc>
        <source-position filename="src/adw-window-title.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="234">a window title</doc>
            <type name="WindowTitle" c:type="AdwWindowTitle*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="235">a subtitle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="adw_window_title_set_title"
              glib:set-property="title">
        <attribute name="org.gtk.Method.set_property" value="title"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="190">Sets the title of @self.

The title typically identifies the current view or content item, and
generally does not use the application name.</doc>
        <source-position filename="src/adw-window-title.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="192">a window title</doc>
            <type name="WindowTitle" c:type="AdwWindowTitle*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/adw-window-title.c"
                 line="193">a title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <attribute name="org.gtk.Property.get"
                   value="adw_window_title_get_subtitle"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_window_title_set_subtitle"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="131">The subtitle to display.

The subtitle should give the user additional details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <attribute name="org.gtk.Property.get"
                   value="adw_window_title_get_title"/>
        <attribute name="org.gtk.Property.set"
                   value="adw_window_title_set_title"/>
        <doc xml:space="preserve"
             filename="src/adw-window-title.c"
             line="118">The title to display.

The title typically identifies the current view or content item, and
generally does not use the application name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="WindowTitleClass"
            c:type="AdwWindowTitleClass"
            glib:is-gtype-struct-for="WindowTitle">
      <source-position filename="src/adw-window-title.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <function name="easing_ease"
              c:identifier="adw_easing_ease"
              moved-to="Easing.ease">
      <doc xml:space="preserve"
           filename="src/adw-easing.c"
           line="428">Computes easing with @easing for @value.

@value should generally be in the [0, 1] range.</doc>
      <source-position filename="src/adw-easing.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-easing.c"
             line="437">the easing for @value</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-easing.c"
               line="430">an easing value</doc>
          <type name="Easing" c:type="AdwEasing"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-easing.c"
               line="431">a value to ease</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_enable_animations"
              c:identifier="adw_get_enable_animations">
      <doc xml:space="preserve"
           filename="src/adw-animation-util.c"
           line="28">Checks whether animations are enabled for @widget.

This should be used when implementing an animated widget to know whether to
animate it or not.</doc>
      <source-position filename="src/adw-animation-util.h" line="26"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-animation-util.c"
             line="37">whether animations are enabled for @widget</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-util.c"
               line="30">a `GtkWidget`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_major_version" c:identifier="adw_get_major_version">
      <doc xml:space="preserve"
           filename="src/adw-version.c"
           line="13">Returns the major version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 1.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the major version of the libadwaita headers you have
included when compiling your code.</doc>
      <source-position filename="src/adw-version.h" line="193"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-version.c"
             line="25">the major version number of the Adwaita library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_micro_version" c:identifier="adw_get_micro_version">
      <doc xml:space="preserve"
           filename="src/adw-version.c"
           line="53">Returns the micro version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 3.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the micro version of the libadwaita headers you have
included when compiling your code.</doc>
      <source-position filename="src/adw-version.h" line="197"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-version.c"
             line="65">the micro version number of the Adwaita library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_minor_version" c:identifier="adw_get_minor_version">
      <doc xml:space="preserve"
           filename="src/adw-version.c"
           line="33">Returns the minor version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 2.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the minor version of the libadwaita headers you have
included when compiling your code.</doc>
      <source-position filename="src/adw-version.h" line="195"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-version.c"
             line="45">the minor version number of the Adwaita library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="init" c:identifier="adw_init">
      <doc xml:space="preserve"
           filename="src/adw-main.c"
           line="17">Initializes Libadwaita.

This function can be used instead of [func@Gtk.init] as it initializes GTK
implicitly.

There's no need to call this function if you're using [class@Application].

If Libadwaita has already been initialized, the function will simply return.

This makes sure translations, types, themes, and icons for the Adwaita
library are set up properly.</doc>
      <source-position filename="src/adw-main.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="is_initialized" c:identifier="adw_is_initialized">
      <doc xml:space="preserve"
           filename="src/adw-main.c"
           line="58">Use this function to check if libadwaita has been initialized with
[func@init].</doc>
      <source-position filename="src/adw-main.h" line="22"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-main.c"
             line="64">the initialization status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="lerp" c:identifier="adw_lerp">
      <doc xml:space="preserve"
           filename="src/adw-animation-util.c"
           line="12">Computes the linear interpolation between @a and @b for @t.</doc>
      <source-position filename="src/adw-animation-util.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/adw-animation-util.c"
             line="20">the computed value</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-util.c"
               line="14">the start</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-util.c"
               line="15">the end</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="t" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-animation-util.c"
               line="16">the interpolation rate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_about_window"
              c:identifier="adw_show_about_window"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/adw-about-window.c"
           line="3259">A convenience function for showing an application’s about window.</doc>
      <source-position filename="src/adw-about-window.h" line="171"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3261">the parent top-level window</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3262">the name of the first property</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/adw-about-window.c"
               line="3263">value of first property, followed by more pairs of property name and
  value, `NULL`-terminated</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
